[{"title":"Java 线上诊断工具 Arthas","url":"https://feifaninternet.github.io/2019/05/17/Java线上诊断工具-Arthas/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>对于很多线上发生的问题，我们无法在线上debug，线下也无法重现，这个时候我们便可以使用这个工具来进行诊断，它可以监控jvm实时运行状态，<br>可以观察指定类中的某个方法的内部调用路径，也可以对监控后的请求进行重现</p>\n<h3 id=\"相关命令和使用场景\"><a href=\"#相关命令和使用场景\" class=\"headerlink\" title=\"相关命令和使用场景\"></a>相关命令和使用场景</h3><p>更多命令查阅<a href=\"https://alibaba.github.io/arthas/install-detail.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h4 id=\"1-启动\"><a href=\"#1-启动\" class=\"headerlink\" title=\"1.启动\"></a>1.启动</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar arthas-boot.jar</span><br><span class=\"line\"></span><br><span class=\"line\">#打印更多详细信息</span><br><span class=\"line\">java -jar arthas-boot.jar -h</span><br></pre></td></tr></table></figure>\n<p>如果有多个应用，输入相应数字选择</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/arthas/aras启动.jpg\" alt=\"aras启动\" title=\"aras启动\"><br></div>\n\n<h4 id=\"2-查看当前进程信息\"><a href=\"#2-查看当前进程信息\" class=\"headerlink\" title=\"2.查看当前进程信息\"></a>2.查看当前进程信息</h4><p><strong><a href=\"https://alibaba.github.io/arthas/dashboard.html#dashboard\" target=\"_blank\" rel=\"noopener\">dashboard命令</a></strong></p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/arthas/dashboard.jpg\" alt=\"dashboard\" title=\"dashboard\"><br></div>\n\n<p>信息会自动刷新，cpu使用比例，堆内存使用情况，应用GC次数，应用GC耗时都很清楚。<br><code>ctrl+c</code> 可中断执行，可查看<code>main</code>方法的线程id，通过<code>thread id</code>的命令来获取<code>Main Class</code></p>\n<h4 id=\"3-查看进程信息\"><a href=\"#3-查看进程信息\" class=\"headerlink\" title=\"3.查看进程信息\"></a>3.查看进程信息</h4><p><strong><a href=\"https://alibaba.github.io/arthas/thread.html#thread\" target=\"_blank\" rel=\"noopener\">thread命令</a></strong>: 查看当前线程信息，查看线程的堆栈</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#显示所有线程信息</span><br><span class=\"line\">thread</span><br><span class=\"line\"></span><br><span class=\"line\">#打印线程ID 1的栈</span><br><span class=\"line\">thread 1</span><br><span class=\"line\"></span><br><span class=\"line\">#显示最忙的前n个线程，打印堆栈</span><br><span class=\"line\">thread -n 3</span><br><span class=\"line\"></span><br><span class=\"line\">#找出阻塞其他线程的线程</span><br><span class=\"line\">thread -b</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-方法执行数据观测\"><a href=\"#4-方法执行数据观测\" class=\"headerlink\" title=\"4.方法执行数据观测\"></a>4.方法执行数据观测</h4><p><strong><a href=\"https://alibaba.github.io/arthas/watch.html#watch\" target=\"_blank\" rel=\"noopener\">watch命令</a></strong>: 观察指定方法的调用情况(返回值、抛出异常、入参)</p>\n<p>请求观察的方法后即可观察到控制台输出</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/arthas/watch演示.jpg\" alt=\"watch演示\" title=\"watch演示\"><br></div>\n\n\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>class-pattern</td>\n<td>类名表达式匹配</td>\n</tr>\n<tr>\n<td>method-pattern</td>\n<td>方法名表达式匹配</td>\n</tr>\n<tr>\n<td>express</td>\n<td>观察表达式</td>\n</tr>\n<tr>\n<td>condition-express</td>\n<td>条件表达式</td>\n</tr>\n<tr>\n<td>[b]</td>\n<td>在方法调用之前观察</td>\n</tr>\n<tr>\n<td>[e]</td>\n<td>在方法异常之后观察</td>\n</tr>\n<tr>\n<td>[s]</td>\n<td>在方法返回之后观察</td>\n</tr>\n<tr>\n<td>[f]</td>\n<td>在方法结束之后(正常返回和异常返回)观察</td>\n</tr>\n<tr>\n<td>[E]</td>\n<td>开启正则表达式匹配，默认为通配符匹配</td>\n</tr>\n<tr>\n<td>[x:]</td>\n<td>指定输出结果的属性遍历深度，默认为 1</td>\n</tr>\n</tbody>\n</table>\n<p>条件表达式</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ watch demo.MathGame primeFactors &quot;&#123;params[0],target&#125;&quot; &quot;params[0]&lt;0&quot;</span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 68 ms.</span><br><span class=\"line\">ts=2018-12-03 19:36:04; [cost=0.530255ms] result=@ArrayList[</span><br><span class=\"line\">    @Integer[-18178089],</span><br><span class=\"line\">    @MathGame[demo.MathGame@41cf53f9],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>数据过滤</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ watch demo.MathGame primeFactors &apos;&#123;params, returnObj&#125;&apos; &apos;#cost&gt;200&apos; -x 2</span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 66 ms.</span><br><span class=\"line\">ts=2018-12-03 19:40:28; [cost=2112.168897ms] result=@ArrayList[</span><br><span class=\"line\">    @Object[][</span><br><span class=\"line\">        @Integer[2141897465],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    @ArrayList[</span><br><span class=\"line\">        @Integer[5],</span><br><span class=\"line\">        @Integer[428379493],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><strong>观察某个类以及类的属性，可实现线上断点的效果，非常方便</strong></p>\n<p>1.查看方法运行前后，当前对象中的属性，可以使用<code>target</code>关键字，代表当前对象</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ watch demo.MathGame primeFactors &apos;target&apos;</span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 52 ms.</span><br><span class=\"line\">ts=2018-12-03 19:41:52; [cost=0.477882ms] result=@MathGame[</span><br><span class=\"line\">    random=@Random[java.util.Random@522b408a],</span><br><span class=\"line\">    illegalArgumentCount=@Integer[13355],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>2.使用<code>target.field_name</code>访问当前对象的某个属性</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ watch demo.MathGame primeFactors &apos;target.illegalArgumentCount&apos;</span><br><span class=\"line\">Press Ctrl+C to abort.</span><br><span class=\"line\">Affect(class-cnt:1 , method-cnt:1) cost in 67 ms.</span><br><span class=\"line\">ts=2018-12-03 20:04:34; [cost=131.303498ms] result=@Integer[8]</span><br><span class=\"line\">ts=2018-12-03 20:04:35; [cost=0.961441ms] result=@Integer[8]</span><br></pre></td></tr></table></figure>\n<p>测试请求时，查看某个<code>service</code>中的属性和相应方法中的对象的属性</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/arthas/watch断点.jpg\" alt=\"watch断点\" title=\"watch断点\"><br></div>\n\n<h4 id=\"5-查看方法内部调用路径及耗时\"><a href=\"#5-查看方法内部调用路径及耗时\" class=\"headerlink\" title=\"5.查看方法内部调用路径及耗时\"></a>5.查看方法内部调用路径及耗时</h4><p><strong><a href=\"https://alibaba.github.io/arthas/trace.html#trace\" target=\"_blank\" rel=\"noopener\">trace命令</a></strong>: 方法内部调用路径，并输出方法路径上的每个节点上耗时</p>\n<p>可以找出某个请求速度慢的原因所在</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/arthas/trace耗时.jpg\" alt=\"trace耗时\" title=\"trace耗时\"><br></div>\n\n<p>查看多个类多个函数</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace -E com.test.ClassA|org.test.ClassB method1|method2|method3</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-查看方法完整调用路径\"><a href=\"#6-查看方法完整调用路径\" class=\"headerlink\" title=\"6.查看方法完整调用路径\"></a>6.查看方法完整调用路径</h4><p><strong><a href=\"https://alibaba.github.io/arthas/stack.html#stack\" target=\"_blank\" rel=\"noopener\">stack命令</a></strong>: 输出当前方法被调用的调用路径</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/arthas/stack.jpg\" alt=\"stack\" title=\"stack\"><br></div>\n\n<h4 id=\"7-记录指定方法的调用\"><a href=\"#7-记录指定方法的调用\" class=\"headerlink\" title=\"7.记录指定方法的调用\"></a>7.记录指定方法的调用</h4><p><strong><a href=\"https://alibaba.github.io/arthas/tt.html#tt\" target=\"_blank\" rel=\"noopener\">tt命令</a></strong>: 记录下指定方法的调用，后续对其进行筛选，查看，重现等</p>\n<p><code>tt</code>和<code>watch</code>命令我们通常都会在后台执行，并输出到相应日志文件保存，以便后续操作</p>\n<p>在线上请求量过多的时候一定要设置<code>-n</code>的值，请求数量达到这个值后便会停止记录，将请求记录到相应日志文件中，<code>watch</code>通常也这样使用</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -t -n 3 com.test.testM.service.TestService test &gt;&gt; /data1/test.log &amp;</span><br></pre></td></tr></table></figure>\n<p>通过<code>jobs</code>查看后台执行的任务，已经删除任务</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/arthas/jobs.jpg\" alt=\"查看后台执行的任务\" title=\"查看后台执行的任务\"><br></div>\n\n<p>查看所有记录</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/arthas/tt-l.jpg\" alt=\"查看所有记录\" title=\"查看所有记录\"><br></div>\n\n<p>对参数进行筛选</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -s &quot;params[0].testId==&apos;xfan_test_id&apos;&quot;</span><br></pre></td></tr></table></figure>\n<p>查看具体的记录信息</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1006</span><br></pre></td></tr></table></figure>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/arthas/tt查看具体信息.jpg\" alt=\"查看具体信息\" title=\"查看具体信息\"><br></div>\n\n<p>重新模拟一次调用</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tt -i 1006 -p</span><br></pre></td></tr></table></figure>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/arthas/模拟调用.jpg\" alt=\"模拟调用\" title=\"模拟调用\"><br></div>\n\n<p>好了，最常用的这些命令先整理到这里，更多命令及详细使用方法查阅<a href=\"https://alibaba.github.io/arthas/install-detail.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n","categories":["Expand"],"tags":["Arthas"]},{"title":"实时分布式消息传递平台 -- NSQ","url":"https://feifaninternet.github.io/2019/04/15/实时分布式消息传递平台-NSQ/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>网上关于 <code>NSQ</code> 在 <code>java</code> 平台使用的资料非常少，我们来看下 <code>NSQ</code> 到底与其他消息中间件有何不同，到底应该如何使用？</p>\n<h3 id=\"NSQ简介\"><a href=\"#NSQ简介\" class=\"headerlink\" title=\"NSQ简介\"></a>NSQ简介</h3><p><code>NSQ</code> 是一个基于 <code>go</code> 语言开发的分布式实时消息架构。<code>NSQ</code> 主要用于处理大规模消息任务，每天可以处理的任务可达十亿级别。</p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>分布式，去中心化拓扑</li>\n<li>可伸缩，横向扩展</li>\n<li>操作友好，简单的配置&amp;部署</li>\n</ul>\n<h4 id=\"主要模块\"><a href=\"#主要模块\" class=\"headerlink\" title=\"主要模块\"></a>主要模块</h4><ol>\n<li><strong><a href=\"https://nsq.io/components/nsqlookupd.html\" target=\"_blank\" rel=\"noopener\">nsqlookupd</a></strong> : 管理拓扑信息的守护程序。客户端查询<code>nsqlookupd</code>以发现<code>nsqd</code>特定主题的生产者，并且<code>nsqd</code>节点广播主题和信道信息。</li>\n<li><strong><a href=\"https://nsq.io/components/nsqd.html\" target=\"_blank\" rel=\"noopener\">nsqd</a></strong> : 守护进程，它接收，排队并向客户端发送消息，可独立运行。</li>\n<li><strong><a href=\"https://nsq.io/components/nsqadmin.html\" target=\"_blank\" rel=\"noopener\">nsqadmin</a></strong> : <code>Web UI</code>，可实时查看聚合的群集统计信息并执行各种管理任务。</li>\n<li><strong><a href=\"https://nsq.io/components/utilities.html\" target=\"_blank\" rel=\"noopener\">utilities</a></strong> : 常见基础功能，数据流处理 <code>nsq_stat</code> <code>nsq_to_file</code>等</li>\n</ol>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"https://upload-images.jianshu.io/upload_images/14001673-adcf8b01a5004396.gif\" alt=\"发布与消费\" title=\"发布与消费\"><br></div>\n\n<h4 id=\"主要角色\"><a href=\"#主要角色\" class=\"headerlink\" title=\"主要角色\"></a>主要角色</h4><h5 id=\"生产者-Producer\"><a href=\"#生产者-Producer\" class=\"headerlink\" title=\"生产者 Producer\"></a>生产者 Producer</h5><p>连接<code>nsqd</code>发布消息到<code>topic</code></p>\n<p><code>Producer</code>断线后需要手动重连，<code>Consumer</code>断线后会自动重连，<code>Consumer</code>的重连时间默认为60s，可设置短一点<br><code>Producer</code>不能发布空<code>message</code>否则会导致<code>panic</code><br>如果<code>Producer</code>连接的<code>nsqd</code>中断，那么<code>message</code>就会发布失败，所以我们也要考虑这种情况，做好备用方案。</p>\n<h5 id=\"消费者-Consumer\"><a href=\"#消费者-Consumer\" class=\"headerlink\" title=\"消费者 Consumer\"></a>消费者 Consumer</h5><p>消费者有两种方式与<code>nsqd</code>建立连接。</p>\n<ol>\n<li>消费者直连<code>nsqd</code>，这是最简单的方式，缺点是<code>nsqd</code>服务无法实现动态伸缩了</li>\n<li>消费者通过<code>http</code> 查询<code>nsqlookupd</code>获取该<code>nsqlookupd</code>上所有<code>nsqd</code>的连接地址，然后再分别和这些<code>nsqd</code>建立连接 (官方推荐的做法)，但是客户端会不停的向<code>nsqlookupd</code>查询最新的<code>nsqd</code>地址目录</li>\n</ol>\n<h3 id=\"NSQ与Kafka比较\"><a href=\"#NSQ与Kafka比较\" class=\"headerlink\" title=\"NSQ与Kafka比较\"></a>NSQ与Kafka比较</h3><table>\n<thead>\n<tr>\n<th>类别</th>\n<th>NSQ</th>\n<th>Kafka</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储</td>\n<td>默认是把消息放到内存中，只有当队列里消息的数量超过–mem-queue-size配置的限制时，才会对消息进行持久化</td>\n<td>写到磁盘中进行持久化，并通过顺序读写磁盘来保障性能。持久化能够让Kafka做更多的事情：消息的重新消费（重置offset）；让数据更加安全，不那么容易丢失。同时Kafka还通过partition的机制，对消息做了备份，进一步增强了消息的安全性</td>\n</tr>\n<tr>\n<td>推拉模型</td>\n<td>使用推模型，推模型能够使得时延非常小，消息到了马上就能够推送给下游消费，但是下游消费能够无法控制，推送过快可能导致下游过载</td>\n<td>使用拉模型，拉模型能够让消费者自己掌握节奏，但是这样轮询会让整个消费的时延增加，不过消息队列本身对时延的要求不是很大，这一点影响不是很大</td>\n</tr>\n<tr>\n<td>消息的顺序性</td>\n<td>不能把特性消息和消费者对应起来，所以无法实现消息的有序性</td>\n<td>因为消息在Partition中写入是有序的，同时一个Partition只能够被一个Consumer消费，这样就可能实现消息在Partition中的有序。自定义写入哪个Partition的规则能够让需要有序消费的相关消息都进入同一个Partition中被消费，这样达到”全局有序“</td>\n</tr>\n<tr>\n<td>数据备份</td>\n<td>只把消息存储到一台机器中，不做任何备份，一旦机器奔溃，磁盘损坏，消息就永久丢失了</td>\n<td>通过partition的机制，对消息做了备份，增强了消息的安全性</td>\n</tr>\n<tr>\n<td>消息投递</td>\n<td>支持至少一次，也就是说，消息有可能被多次投递，消费者必须自己保证消息处理的幂等性</td>\n<td>支持准确一次</td>\n</tr>\n<tr>\n<td>吞吐</td>\n<td>一般</td>\n<td>高</td>\n</tr>\n<tr>\n<td>是否可回溯</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>requeue和defer</td>\n<td>消费失败requeue，延时消费defer</td>\n<td>无</td>\n</tr>\n<tr>\n<td>生态</td>\n<td>无</td>\n<td>Hadoop</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"NSQ的安装和环境变量配置\"><a href=\"#NSQ的安装和环境变量配置\" class=\"headerlink\" title=\"NSQ的安装和环境变量配置\"></a>NSQ的安装和环境变量配置</h3><p>安装配置<a href=\"https://golang.google.cn/dl/\" target=\"_blank\" rel=\"noopener\">Go</a>开发环境</p>\n<p>1.下载<a href=\"https://nsq.io/deployment/installing.html\" target=\"_blank\" rel=\"noopener\">nsq</a><br>2.解压</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf /downloads/NSQ-1.1.0.darwin-amd64.go1.10.3.tar.gz</span><br></pre></td></tr></table></figure>\n<p>3.删除压缩包，解压后到文件移动到<code>/usr/local</code></p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /downloads/NSQ-1.1.0.darwin-amd64.go1.10.3.tar.gz</span><br><span class=\"line\">mv NSQ-1.1.0.darwin-amd64.go1.10.3 /usr/local/nsq</span><br></pre></td></tr></table></figure>\n<p>4.配置环境变量</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#打开配置文件</span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">#在最后面加上下面的配置</span><br><span class=\"line\">export NSQ_HOME=/usr/local/nsq</span><br><span class=\"line\">export PATH=$PATH:$NSQ_HOME/bin</span><br><span class=\"line\"></span><br><span class=\"line\">#使环境变量生效</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<p>5.测试使用<br>1.启动<code>nsqlookupd</code></p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nsqlookupd</span><br></pre></td></tr></table></figure>\n<p>2.启动<code>nsqd</code></p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nsqd --lookupd-tcp-address=127.0.0.1:4160 -broadcast-address=127.0.0.1</span><br></pre></td></tr></table></figure>\n<p>3.启动<code>nsqadmin</code></p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nsqadmin --lookupd-http-address=127.0.0.1:4161</span><br></pre></td></tr></table></figure>\n<p>4.创建<code>topic</code>和<code>channel</code>，发布消息</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#创建topic</span><br><span class=\"line\">curl -X POST http://127.0.0.1:4151/topic/create?topic=name</span><br><span class=\"line\">#创建channel</span><br><span class=\"line\">    curl -X POST http://127.0.0.1:4151/channel/create?topic=name&amp;channel=name</span><br><span class=\"line\">#发布消息</span><br><span class=\"line\">curl -d &quot;&lt;message&gt;&quot; http://127.0.0.1:4151/pub?topic=name</span><br></pre></td></tr></table></figure>\n<p>5.在浏览器输入<code>127.0.0.1:4171</code>查看消息与连接状态</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/nsq/nsqadmin.jpg\" alt=\"nsq的WebUI\" title=\"nsq的WebUI\"><br></div>\n\n<h3 id=\"JAVA-NSQ\"><a href=\"#JAVA-NSQ\" class=\"headerlink\" title=\"JAVA + NSQ\"></a>JAVA + NSQ</h3><p>关于<code>java</code>使用NSQ，我是采取了类似<code>kafka</code>在<code>springboot</code>中集成的方法来实现，你可以在<a href=\"https://github.com/wbean/spring-boot-starter-nsq\" target=\"_blank\" rel=\"noopener\">wbean的项目</a>中找到它，但是他好像并没有成功将项目上传至<code>maven</code>库，并不能直接导入，你可以下载项目后打包成<code>jar</code>，然后导入项目使用，<br>我没有使用最常用的<a href=\"https://github.com/brainlag/JavaNSQClient\" target=\"_blank\" rel=\"noopener\">JavaNSQClient</a>，因为我觉得<a href=\"https://github.com/wbean/spring-boot-starter-nsq\" target=\"_blank\" rel=\"noopener\">wbean的项目</a>集成显然是很优秀的</p>\n<h4 id=\"1-配置-application-properties\"><a href=\"#1-配置-application-properties\" class=\"headerlink\" title=\"1.配置 application.properties\"></a>1.配置 application.properties</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#nsq</span><br><span class=\"line\">nsq.host=127.0.0.1</span><br><span class=\"line\">nsq.port=4161</span><br><span class=\"line\"></span><br><span class=\"line\">#nsqd</span><br><span class=\"line\">nsqd.host=127.0.0.1</span><br><span class=\"line\">nsqd.port=4151</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-创建-nsqd-配置类\"><a href=\"#2-创建-nsqd-配置类\" class=\"headerlink\" title=\"2.创建 nsqd 配置类\"></a>2.创建 nsqd 配置类</h4><p>关于<code>nsq</code>的配置，集成的<code>jar</code>会自动加载</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.teapot.nsq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.PostConstruct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> xfan</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019-04-19</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> Nsqd配置属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"nsqd\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NsqdProperties</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String host;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> NsqdProperties nsqdProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        nsqdProperties = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">nsqdHost</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nsqdProperties.host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">nsqdPort</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nsqdProperties.port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getHost</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHost</span><span class=\"params\">(String host)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.host = host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPort</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPort</span><span class=\"params\">(String port)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.port = port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-发布消息方法\"><a href=\"#3-发布消息方法\" class=\"headerlink\" title=\"3.发布消息方法\"></a>3.发布消息方法</h4><p>这里我们使用官方推荐的<code>http</code>方式</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.teapot.nsq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.gson.Gson;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.teapot.exception.BusinessException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.teapot.support.ApiPostUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.json.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> xfan</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019-04-19</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> NSQ发布消息到topic</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NsqPutSupport</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Gson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String SUCCESS_STR = <span class=\"string\">\"OK\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">publishMessage</span><span class=\"params\">(String topicName, Object object)</span></span>&#123;</span><br><span class=\"line\">        String url = <span class=\"string\">\"http://\"</span> + NsqdProperties.nsqdHost() + <span class=\"string\">\":\"</span> + NsqdProperties.nsqdPort() + <span class=\"string\">\"/pub?topic=\"</span> + topicName;</span><br><span class=\"line\">        JSONObject msgObj = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        msgObj.put(<span class=\"string\">\"message\"</span>, JSON.toJSONString(object));</span><br><span class=\"line\">        HttpPost post = <span class=\"keyword\">new</span> HttpPost(url);</span><br><span class=\"line\">        String res = ApiPostUtil.post(gson.toJson(msgObj), post);</span><br><span class=\"line\">        System.out.println(res);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!res.equals(SUCCESS_STR))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BusinessException(<span class=\"number\">2999</span>, <span class=\"string\">\"消息发送失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h4>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String DEVICE_TOPIC = <span class=\"string\">\"xfan_test\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String message = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">        NsqPutSupport.publishMessage(DEVICE_TOPIC, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在另一个项目中配置<code>nsq</code>和<code>nsqd</code>,使用如下代码消费消息</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 指定topic和channel来消费消息</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@NsqListener</span>(topic = <span class=\"string\">\"xfan_test\"</span>, channel = <span class=\"string\">\"xfan_local\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(NSQMessage nsqMessage)</span></span>&#123;</span><br><span class=\"line\">        String message = <span class=\"keyword\">new</span> String(nsqMessage.getMessage());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"接收到消息：\"</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>nsq</code>在java的应用还是比较少，资料也比较少，性能的话其实也不比<code>kafka</code>强，我还是建议使用<code>kafka</code>，但是喜欢<code>go</code>的同学可以研究使用<code>nsq</code></p>\n","categories":["Expand"],"tags":["NSQ"]},{"title":"500G磁盘凭空消失！","url":"https://feifaninternet.github.io/2019/04/12/500G磁盘凭空消失！/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>最近有一台磁盘容量500G的机器频繁出现磁盘容量不足，每次出现都只能重新启动机器，次数多了就想用一个一劳永逸的办法给他解决掉</p>\n<h3 id=\"问题查看步骤\"><a href=\"#问题查看步骤\" class=\"headerlink\" title=\"问题查看步骤\"></a>问题查看步骤</h3><p>1.查看磁盘空间剩余容量</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n<p>2.如果磁盘容量已经用尽，找出占用容量最大的目录</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -s /* | sort -nr</span><br></pre></td></tr></table></figure>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/http/du-s.jpg\"><br></div>\n\n\n<p>3.假设 <code>/root</code> 目录占用最多，查看root目录下哪个目录占用磁盘最多</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -s /root/* |sort -nr</span><br></pre></td></tr></table></figure>\n<p>4.找到占用最多的文件，选择性的进行删除，如果删除后仍未解决，可以查看被删除的文件是否仍然被进程所占用而没有实际删除</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof |grep delete</span><br></pre></td></tr></table></figure>\n<p>最后结束占用进程</p>\n<p>我发现我的项目中 <code>nohup.out</code> 文件最大，而且删除了也还是被项目占用，结束进程后又要重启项目，非常麻烦，下面我们来了解一下 <code>nohup.out</code> 和如何解决此文件过大的问题</p>\n<h3 id=\"nohup-后台方式启动项目产生的-nohup-out-文件过大的问题解决记录\"><a href=\"#nohup-后台方式启动项目产生的-nohup-out-文件过大的问题解决记录\" class=\"headerlink\" title=\"nohup 后台方式启动项目产生的 nohup.out 文件过大的问题解决记录\"></a>nohup 后台方式启动项目产生的 nohup.out 文件过大的问题解决记录</h3><p>原因：使用 <code>nohup</code> 执行 <code>java</code> 项目时，未指定日志去向，会自动在当前目录生成一个 <code>nohup.out</code> 文件来存放请求日志，而这个日志文件中的日志策略根本不会使用项目中的配置，所有的日志都会打印记录，所以会导致这个文件非常大，</p>\n<p>1.指定日志文件去到系统空洞/垃圾桶 <code>/dev/null</code></p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup *** &gt;&gt; /dev/null 1 &gt; /var/log/app.log &amp;</span><br></pre></td></tr></table></figure>\n<p>2.指定日志去向，定时清除</p>\n<p>2.1指定日志输出到 <code>/var/log/app.log</code><br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup *** &gt;&gt; /var/log/app.log &amp;</span><br></pre></td></tr></table></figure></p>\n<p>2.2编写 <code>cron</code> 定时任务脚本文件</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim app.cron</span><br></pre></td></tr></table></figure>\n<p>2.3在定时任务脚本文件写入，每天18点清除<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 18 * * * cat /dev/null &gt; /var/log/app.log</span><br></pre></td></tr></table></figure></p>\n<p>2.4执行</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab /app/app.cron &gt; /var/log/corn.log</span><br></pre></td></tr></table></figure>\n<p>2.5查看</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -l</span><br></pre></td></tr></table></figure>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/http/cronjob.jpg\" alt=\"定时任务\" title=\"定时任务\"><br></div>\n\n<p>3.</p>\n","categories":["Expand"],"tags":["http"]},{"title":"如何应对恶意IP访问","url":"https://feifaninternet.github.io/2019/03/13/如何应对恶意IP访问/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>最近上线的一个项目，上线几天突然崩溃了，客户反馈的时候我也是纳闷，啥也没有改动呀，上服务器一看访问日志，很明显是有人在恶意攻击，项目运行内存不足挂掉了。</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/reqLog.jpg\" alt=\"请求日志\" title=\"请求日志\"><br></div>\n\n<p>遇到这种情况，我们应该如何应对呢？</p>\n<h3 id=\"限制单个IP访问接口的频率\"><a href=\"#限制单个IP访问接口的频率\" class=\"headerlink\" title=\"限制单个IP访问接口的频率\"></a>限制单个IP访问接口的频率</h3><p>在拦截器中使用 <code>Guava Cache</code> 实现</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化 cache ，定义过期时间</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Cache&lt;Object, Object&gt; IP_CONTROL = CacheBuilder.newBuilder()</span><br><span class=\"line\">             .expireAfterAccess(<span class=\"number\">1</span>, TimeUnit.SECONDS).build();</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//拦截在限制时间内的单ip访问相同接口</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (IP_CONTROL.getIfPresent(ip + url) != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">     logger.warn(<span class=\"string\">\"拦截恶意请求, ip:&#123;&#125;, url:&#123;&#125;\"</span>, ip, url);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">//通过的ip放入缓存</span></span><br><span class=\"line\"> IP_CONTROL.put(ip + url, <span class=\"string\">\"pass\"</span>);</span><br></pre></td></tr></table></figure>\n<p>这样在同一秒内同一个IP对相同的接口发起的请求将被拦截<br>缺陷: </p>\n<ol>\n<li>限制了所有IP访问接口，会误伤非恶意IP</li>\n<li>请求还是会进入应用程序，不够完美</li>\n</ol>\n<h3 id=\"使用RateLimiter限流\"><a href=\"#使用RateLimiter限流\" class=\"headerlink\" title=\"使用RateLimiter限流\"></a>使用RateLimiter限流</h3><p>可在被攻击的控制层进行处理，<a href=\"https://www.jianshu.com/p/5d4fe4b2a726\" target=\"_blank\" rel=\"noopener\">令牌桶算法和RateLimiter原理</a></p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置放行速率</span></span><br><span class=\"line\">    RateLimiter rateLimiter = RateLimiter.create(<span class=\"number\">1</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test\"</span>)  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> count, String code)</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"等待时间\"</span> + rateLimiter.acquire());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"pass\"</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可宏观控制系统的稳定性，控制请求放行的速率达到稳定系统的效果<br>缺陷: </p>\n<ol>\n<li>尽管控制了放行速率，但是非法IP还是会有源源不断的进入，而且还会占用正常用户的排队时间</li>\n<li>请求还是会进入应用程序，不够完美</li>\n</ol>\n<h3 id=\"Nginx-限制单IP并发访问数量和访问速度\"><a href=\"#Nginx-限制单IP并发访问数量和访问速度\" class=\"headerlink\" title=\"Nginx 限制单IP并发访问数量和访问速度\"></a>Nginx 限制单IP并发访问数量和访问速度</h3><p>1.在 <code>nginx</code> 相应的配置文件中加入下面的配置，然后重启 <code>nginx</code></p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，</span><br><span class=\"line\">    #以$binary_remote_addr 为key,限制平均每秒的请求为20个，</span><br><span class=\"line\">    #1M能存储16000个状态，rete的值必须为整数，</span><br><span class=\"line\">    #如果限制两秒钟一个请求，可以设置成30r/m</span><br><span class=\"line\">    limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s;</span><br><span class=\"line\">    #连接数限制</span><br><span class=\"line\">    limit_conn_zone   one  $binary_remote_addr  10m;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        location /***/ &#123;</span><br><span class=\"line\">            #限制每ip每秒不超过20个请求，漏桶数burst为5</span><br><span class=\"line\">            #brust的意思就是，如果第1-4秒请求为19个，第5秒的请求为25个是被允许的，可以不设置</span><br><span class=\"line\">            #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。</span><br><span class=\"line\">            #nodelay，如果不设置该选项，严格使用平均速率限制请求数</span><br><span class=\"line\">            #如果不设置第1秒25个请求时，5个请求放到第2秒执行，</span><br><span class=\"line\">            #设置nodelay，25个请求将在第1秒执行。</span><br><span class=\"line\">            #我处理时只设置了 limit_req zone=allips</span><br><span class=\"line\">            limit_req zone=allips burst=5 nodelay;</span><br><span class=\"line\">            </span><br><span class=\"line\">            #连接数限制，我处理时未设置此参数</span><br><span class=\"line\">            limit_conn one 20;          </span><br><span class=\"line\">            #带宽限制,对单个连接限数，如果一个ip两个连接，就是500x2k，我处理时未设置此参数</span><br><span class=\"line\">            limit_rate 500k; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制之后查看 <code>nginx</code> 的请求日志，发现许多请求已被拦截，返回 <code>503</code></p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/attackLog.png\" alt=\"nginx日志\" title=\"nginx日志\"><br></div>\n\n<p>请求未到应用层，系统压力大大降低，恶意请求绝大部分都被拦截<br>缺陷: </p>\n<ol>\n<li>恶意IP还是会有少量的请求到达应用层，致使恶意请求的次数被控制</li>\n<li>未禁止恶意IP访问，不够完美</li>\n</ol>\n<h3 id=\"使用Shell脚本限制恶意IP\"><a href=\"#使用Shell脚本限制恶意IP\" class=\"headerlink\" title=\"使用Shell脚本限制恶意IP\"></a>使用Shell脚本限制恶意IP</h3><p>我们可以使用 <code>Shell</code> 脚本，分隔日志，进行分析，找出其中的恶意IP，再将恶意IP加入 <code>nginx</code> 的配置中进行拦截</p>\n<p>1.编写 <code>Shell</code> 脚本 <code>vim /shell/nginx_cutaccesslog.sh</code></p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#日志目录</span><br><span class=\"line\">log_path=/var/log/nginx</span><br><span class=\"line\">date=`date -d &quot;10 min ago&quot; +%Y%m%d-%H:%M:%S`</span><br><span class=\"line\">cd $&#123;log_path&#125;</span><br><span class=\"line\">#过滤appvalley-access_log中正常访问API接口并在10分钟</span><br><span class=\"line\">#内访问量最高的100个IP，取值如果此IP访问量大于100次，则把此IP放入黑名单</span><br><span class=\"line\">#awk &apos;&#123; print $1&#125;&apos;：取数据的低1域（第1列），第一列为访问次数，第二列为ip</span><br><span class=\"line\">#awk &apos;&#123;if($1&gt;100) print &quot;deny &quot;$2&quot;;&quot;&#125;&apos; 第一列访问次数大于100时，将第二列的ip记录</span><br><span class=\"line\">#sort：对IP部分进行排序。</span><br><span class=\"line\">#uniq -c：打印每一重复行出现的次数。（并去掉重复行）</span><br><span class=\"line\">#sort -nr -k1：按照重复行出现的次序倒序排列,-k1以第一列为标准排序。</span><br><span class=\"line\">#head -n 100：取排在前100位的IP 。</span><br><span class=\"line\">cat appvalley-access_log | grep -v 403 | awk &apos;&#123;print $1&#125;&apos;|sort|uniq -c | sort -nr -k1 </span><br><span class=\"line\">| head -n 100 | awk &apos;&#123;if($1&gt;100) print &quot;deny &quot;$2&quot;;&quot;&#125;&apos; &gt; /etc/nginx/website/denyip.conf</span><br><span class=\"line\">#将appvalley-access_log中的日志移动到accesslog.bak/中，accesslog.bak/是切割的日志</span><br><span class=\"line\">mv $&#123;log_path&#125;/appvalley-access_log $&#123;log_path&#125;/accesslog.bak/access_$&#123;date&#125;.log</span><br><span class=\"line\"># 重载nginx</span><br><span class=\"line\">cd /sbin/</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<p>2.修改 <code>nginx.conf</code> 使其包含 <code>denyip.conf</code>，重载 <code>nginx</code>，因为之前配置项目路径时已经加入了 <code>include /etc/nginx/website/*.conf;</code>，所以就不用再设置了</p>\n<p>3.运行 <code>Shell</code> 脚本进行验证，进入 <code>accesslog.bak/</code> 目录中，查看日志分隔是否成功</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/bakLog.jpg\" alt=\"分隔日志\" title=\"分隔日志\"><br></div>\n\n<p>4.查看 <code>denyip.conf</code> 文件，发现已经写入了拦截的恶意IP</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/interceptor.jpg\" alt=\"拦截IP\" title=\"拦截IP\"><br></div>\n\n<p>5.再查看 <code>nginx</code> 访问日志是否成功拦截请求</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/403.jpg\" alt=\"nginx请求日志\" title=\"nginx请求日志\"><br></div>\n\n<p>6.脚本验证成功后我们可以添加定时任务，每10分钟执行一次脚本，去禁用恶意IP</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/10 * * * * /bin/bash /shell/nginx_cutaccesslog.sh &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p><em>剩余疑问：如何获取真实IP进行拦截？</em></p>\n","categories":["Expand"],"tags":["http"]},{"title":"秒杀系统","url":"https://feifaninternet.github.io/2018/08/09/秒杀系统/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>秒杀和抢购系统是比较常见的，从技术的角度来说，这是对web系统的一个巨大的考验，在一个高并发的场景下，系统的优化，稳定性和安全性尤为重要</p>\n<h3 id=\"秒杀带来的挑战\"><a href=\"#秒杀带来的挑战\" class=\"headerlink\" title=\"秒杀带来的挑战\"></a>秒杀带来的挑战</h3><h4 id=\"1-请求接口的设计\"><a href=\"#1-请求接口的设计\" class=\"headerlink\" title=\"1.请求接口的设计\"></a>1.请求接口的设计</h4><p>实现秒杀的接口每秒的请求次数可能达到5W或者更高，这个接口不仅要能支持高并发的请求，而且为了增强用户体验，最重要的还是准确，快速，为了在最短的时间内返回用户请求结果，后端存储一般使用内存级别的操作，如果业务场景比较复杂，建议采用异步写入。而静态资源一般是通过CDN部署，压力不大。</p>\n<h4 id=\"2-快速响应与实际问题\"><a href=\"#2-快速响应与实际问题\" class=\"headerlink\" title=\"2.快速响应与实际问题\"></a>2.快速响应与实际问题</h4><p>假设一个业务请求的响应时间为100ms，系统内有20台负载均衡服务器，配置最大连接数为500，那么我们的理想峰值为</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20 * 50  / 0.1 = 10W</span><br></pre></td></tr></table></figure>\n<p>看起来每秒可以支撑10W此请求，这个系统似乎很不错，但是这是理想状态，在高并发的场景下，机器都处于高负载状态，此时的响应时间会大大增加，就web服务器而言，Apache打开了越多的连接进程，CPU需要处理的上下文切换也越多，额外增加了CPU的消耗，增长响应时间，那么我们来看下实际情况</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20 * 50  / 0.25 = 4W</span><br></pre></td></tr></table></figure>\n<p>每秒差了1W次请求，可想会造成多大的拥堵，满负荷工作状态下却还有如此多的请求没有可用连接，服务器异常也接踵而至，如果用户频繁操作，甚至会导致雪崩，就是一台服务器挂了流量分散到其他正常工作的机器上，导致正常的机器也异常，从而导致整个web系统瘫痪</p>\n<h4 id=\"3-重启与过载保护\"><a href=\"#3-重启与过载保护\" class=\"headerlink\" title=\"3.重启与过载保护\"></a>3.重启与过载保护</h4><p>如果发生雪崩，直接重启服务是无法解决问题的，很有可能重启回来又立马挂掉，这个时候最好在入口层将流量拒绝掉，然后再重启，如果是redis/memcache这种服务也挂了，重启的时候需要预热。<br>秒杀和抢购的场景，流量往往是超乎我们系统的准备和想象的，所以过载保护也是很有必要，如果检测到系统满负载状态，拒绝请求也是一种保护措施，在前端设置过滤虽然简单，但是用户的体验下降，更合适的就是将过载保护设置在CGI入口层，快速将客户的请求直接返回</p>\n<h4 id=\"4-作弊与反作弊\"><a href=\"#4-作弊与反作弊\" class=\"headerlink\" title=\"4.作弊与反作弊\"></a>4.作弊与反作弊</h4><p>通常这种业务场景会有很多请求是来自作弊手段，比如刷票工具，自动脚本等，有效的拦截这些作弊手段，也能大大提高系统的稳定性</p>\n<ul>\n<li>同一个账号，一次性发出多个请求</li>\n</ul>\n<p>部分用户通过浏览器插件等，在秒杀期间使用自己的账号，短时间内发起成百上千个请求，若不处理，很有可能出现严重的安全问题。在高并发场景下，若用户秒杀成功，在写入记录期间，请求了很多次，而此时尚未写入完成，请求到的都是未参与秒杀，那么就出现了严重的问题。<br>我们可以在秒杀入口限制一个账号只允许接受一个请求，其他的将被过滤，可以通过redis这种内存缓存服务，写入一个标志位，成功写入的则可以继续参加，类似于JAVA对象头monitor有没有？</p>\n<ul>\n<li>多个账号，一次性发出多个请求</li>\n</ul>\n<p>这个就是我们常说的僵尸账号，通常对于这类作弊我们常用的手段就是发现某个ip请求频率很高，则弹出一个验证码，为了避免自动脚本轻易识别验证码，我们需要将验证码设计的稍微巧妙一点，验证码的作用就是识别僵尸账号与真实账号</p>\n<ul>\n<li>多个帐号，不同IP发出多个请求</li>\n</ul>\n<p>这种场景就非常类似真实用户的业务场景了，想做分辨已经非常困难，我们可以通过数据分析，用户活跃信息等来做判断，或者设置等级门槛，这也是一个很好的方法。</p>\n<h3 id=\"5-如何保证高并发下的数据安全\"><a href=\"#5-如何保证高并发下的数据安全\" class=\"headerlink\" title=\"5.如何保证高并发下的数据安全\"></a>5.如何保证高并发下的数据安全</h3><p>在秒杀商品还剩最后一个时，如果来了非常多的请求，那么他们获取的信息都是还有一件商品，这就有可能产生超发的问题，我们可以尝试解决</p>\n<p>1.悲观锁思路<br>在修改数据的时候，采用锁定状态，排斥外部请求的修改，遇到锁的状态就必须等待。再回到高并发的场景，这种方法很可能造成系统异常，因为会有很多的请求在等待锁，有可能很多请求都没有机会去获得锁，这种等待的请求越来越多，不仅会影响响应时间，还会用尽连接数，导致系统异常。</p>\n<p>2.FIFO队列思路<br>我们直接将请求放入队列中，采用先进先出原则，将多线程变成单线程的感觉，有没有？这样似乎解决了悲观锁的问题，但是在高并发场景下，有可能一个队列被瞬间塞满，甚至撑爆，系统处理队列中请求的速度根本比不上涌入队列的速度，队列中的请求会积累的越来越多，响应时间还是会变长，导致系统异常</p>\n<p>3.乐观锁思路<br>与悲观锁不同，所有请求都有权限去修改数据，但是会获得一个该数据的版本号，只有版本号符合才能操作成功，否则操作失败，虽然会增大CPU的计算开销，但是综合来说这个方法还是比较好的，redis中的watch就是其中之一。</p>\n<p>高并发下面临的问题是非常严峻的，我们需要做好一系列保护措施，设计出一个安全稳定高效的系统，来满足用户的需求，接下来需要学习秒杀系统的设计优化和实践。</p>\n","categories":["JAVA"],"tags":["Concurrent"]},{"title":"深入理解JAVA反射","url":"https://feifaninternet.github.io/2018/08/07/深入理解JAVA反射/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>对于反射的定义，可以引用oracle官方的说明: 通过反射，java代码可以发现有关已加载类的字段，方法和构造函数的信息，并可以在安全限制内对这些字段，方法和构造函数进行操作，这种能力就是反射。<br>通俗的说就是   </p>\n<ul>\n<li>对于任意一个类，都能够知道这个类的所有属性和方法，即使为私有</li>\n<li>对于任意一个对象，都能够调用它的任意一个方法和属性</li>\n</ul>\n<h3 id=\"Class-类\"><a href=\"#Class-类\" class=\"headerlink\" title=\"Class 类\"></a>Class 类</h3><p>java.lang.Class是反射能够实现的基础，是JDK提供的一个类</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">GenericDeclaration</span>, <span class=\"title\">Type</span>, <span class=\"title\">AnnotatedElement</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于每一种类，java虚拟机都会初始化出一个Class类型的实例，每当我们编写并且编译一个新创建的类就会产生一个对应Class对象，并且这个Class对象会被保存在同名.class文件里。当我们new一个新对象或者引用静态成员变量时，Java虚拟机(JVM)中的类加载器系统会将对应Class对象加载到JVM中，然后JVM再根据这个类型信息相关的Class对象创建我们需要实例对象或者提供静态变量的引用值。</p>\n<p>反射实例化一个对象</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span> <span class=\"meta\">@setter</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestReflection</span></span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testReflection</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">         Class c = Dog.class;</span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">//通过Class对象反射获取Animal类的构造方法</span></span><br><span class=\"line\">              Constructor constructor = c.getConstructor(String.class, <span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">              <span class=\"comment\">//调用构造方法获取Animal实例</span></span><br><span class=\"line\">              Dog dog = (Dog) constructor.newInstance( <span class=\"string\">\"Titi\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>这样的操作比new对象复杂多了，但是如果对象中的属性和方法为私有的，那么这个时候Class的优势就展现出来了</p>\n<h4 id=\"获取Class对象的方法\"><a href=\"#获取Class对象的方法\" class=\"headerlink\" title=\"获取Class对象的方法\"></a>获取Class对象的方法</h4><ol>\n<li>Object.getClass(),基本类型无法使用此方法</li>\n<li>.class,类的类型获取，基本类型也可以使用</li>\n<li>Class.forName()，通过类的全限定名获取，基本类型无法使用</li>\n<li>.TYPE,包装类使用，如Double.TYPE</li>\n<li>.getSuperclass()，已经获取了一个类的Class对象，就可以通过反射获取这个类的父类的Class对象</li>\n</ol>\n<h3 id=\"通过Class获取类修饰符和类型\"><a href=\"#通过Class获取类修饰符和类型\" class=\"headerlink\" title=\"通过Class获取类修饰符和类型\"></a>通过Class获取类修饰符和类型</h3><p>以HashMap为例</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestReflection</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"Reflection\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testReflection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = HashMap.class;</span><br><span class=\"line\">        <span class=\"comment\">//获取类名</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Class : \"</span> + c.getCanonicalName());</span><br><span class=\"line\">        <span class=\"comment\">//获取类限定符</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Modifiers : \"</span> + Modifier.toString(c.getModifiers()));</span><br><span class=\"line\">        <span class=\"comment\">//获取类泛型信息</span></span><br><span class=\"line\">        TypeVariable[] tv = c.getTypeParameters();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tv.length != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            StringBuilder parameter = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"Parameters : \"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (TypeVariable t : tv) &#123;</span><br><span class=\"line\">                parameter.append(t.getName());</span><br><span class=\"line\">                parameter.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(parameter.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-- No Type Parameters --\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取类实现的所有接口</span></span><br><span class=\"line\">        Type[] intfs = c.getGenericInterfaces();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intfs.length != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            StringBuilder interfaces = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"Implemented Interfaces : \"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Type intf : intfs)&#123;</span><br><span class=\"line\">                interfaces.append(intf.toString());</span><br><span class=\"line\">                interfaces.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(interfaces.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-- No Implemented Interfaces --\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取类继承数上的所有父类</span></span><br><span class=\"line\">        List&lt;Class&gt; l = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        printAncestor(c, l);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l.size() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            StringBuilder inheritance = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"Inheritance Path : \"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Class&lt;?&gt; cl : l)&#123;</span><br><span class=\"line\">                inheritance.append(cl.getCanonicalName());</span><br><span class=\"line\">                inheritance.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(inheritance.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-- No Super Classes --%n%n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取类的注解(只能获取到 RUNTIME 类型的注解)</span></span><br><span class=\"line\">        Annotation[] ann = c.getAnnotations();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ann.length != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            StringBuilder annotation = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"Annotations : \"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Annotation a : ann)&#123;</span><br><span class=\"line\">                annotation.append(a.toString());</span><br><span class=\"line\">                annotation.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(annotation.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-- No Annotations --%n%n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printAncestor</span><span class=\"params\">(Class&lt;?&gt; c, List&lt;Class&gt; l)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; ancestor = c.getSuperclass();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ancestor != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            l.add(ancestor);</span><br><span class=\"line\">            printAncestor(ancestor, l);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Member-接口\"><a href=\"#Member-接口\" class=\"headerlink\" title=\"Member 接口\"></a>Member 接口</h3><p>Member的三个实现类</p>\n<ol>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html\" target=\"_blank\" rel=\"noopener\">java.lang.reflect.Field()</a> ：对应类变量</li>\n<li><a href=\"https://link.jianshu.com/?t=https%3A%2F%2Fdocs.oracle.com%2Fjavase%2F8%2Fdocs%2Fapi%2Fjava%2Flang%2Freflect%2FMethod.html\" target=\"_blank\" rel=\"noopener\">java.lang.reflect.Method()</a> ：对应类方法</li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html\" target=\"_blank\" rel=\"noopener\">java.lang.reflect.Constructor</a> ：对应类构造函数</li>\n</ol>\n<p>反射就是通过这三个类才能在运行时改变对象状类，下面我们分别来了解一下</p>\n<h4 id=\"Field\"><a href=\"#Field\" class=\"headerlink\" title=\"Field\"></a>Field</h4><p>通过Field你可以访问给定对象的类变量，包括获取变量的类型，修饰符，注解，变量名，变量的值或者重新设置变量值，即使变量是private的。</p>\n<p>获取Field</p>\n<ol>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredField-java.lang.String-\" target=\"_blank\" rel=\"noopener\">getDeclaredField(String name)</a>：获取指定的变量，只要是声明的变量都能获得，包括private</li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getField-java.lang.String-\" target=\"_blank\" rel=\"noopener\">getField(String name)</a>：获取指定的变量（只能获得public的）</li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredFields--\" target=\"_blank\" rel=\"noopener\">getDeclaredFields()</a>：获取所有声明的变量（包括private）</li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getFields--\" target=\"_blank\" rel=\"noopener\">getFields()</a>：获取所有的public变量</li>\n</ol>\n<p>获取变量，修饰符，注解</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testField</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Class c = Cat.class;</span><br><span class=\"line\">        Field[] fields = c.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Field f : fields)&#123;</span><br><span class=\"line\">            StringBuilder builder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"comment\">//获取名称</span></span><br><span class=\"line\">            builder.append(<span class=\"string\">\"filed name = \"</span>);</span><br><span class=\"line\">            builder.append(f.getName());</span><br><span class=\"line\">            <span class=\"comment\">//获取类型</span></span><br><span class=\"line\">            builder.append(<span class=\"string\">\" type = \"</span>);</span><br><span class=\"line\">            builder.append(f.getType());</span><br><span class=\"line\">            <span class=\"comment\">//获取修饰符</span></span><br><span class=\"line\">            builder.append(<span class=\"string\">\" modifiers = \"</span>);</span><br><span class=\"line\">            builder.append(Modifier.toString(f.getModifiers()));</span><br><span class=\"line\">            <span class=\"comment\">//获取注解</span></span><br><span class=\"line\">            Annotation[] ann = f.getAnnotations();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ann.length != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                builder.append(<span class=\"string\">\" annotations = \"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Annotation a : ann)&#123;</span><br><span class=\"line\">                    builder.append(a.toString());</span><br><span class=\"line\">                    builder.append(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                builder.append(<span class=\"string\">\"  -- No Annotations --\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           System.out.println(builder.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>获取设置变量值</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testField</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Cat cat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        Class c = cat.getClass();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//注意获取private变量时，需要用getDeclaredField</span></span><br><span class=\"line\">            Field fieldName = c.getDeclaredField(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">            Field fieldAge = c.getField(<span class=\"string\">\"age\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//反射获取名字, 年龄</span></span><br><span class=\"line\">            String name = (String) fieldName.get(cat);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> age = fieldAge.getInt(cat);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"before set, Cat name = \"</span> + name + <span class=\"string\">\" age = \"</span> + age);</span><br><span class=\"line\">            <span class=\"comment\">//反射重新set名字和年龄</span></span><br><span class=\"line\">            fieldName.set(cat, <span class=\"string\">\"Timmy\"</span>);</span><br><span class=\"line\">            fieldAge.setInt(cat, <span class=\"number\">3</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"after set, Cat \"</span> + cat.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>如果有属性为私有，上面会报错，我们可以使用<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#setAccessible-boolean-\" target=\"_blank\" rel=\"noopener\">setAccessible(boolean flag)</a>取消java语言的访问权限检查，任何继承<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html\" target=\"_blank\" rel=\"noopener\">AccessibleObject</a>的类都可以使用此方法来去除检查，去除检查之后便可操作私有属性</p>\n<h3 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h3><p>通过反射获取对象的方法</p>\n<ol>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethod-java.lang.String-java.lang.Class...-\" target=\"_blank\" rel=\"noopener\">getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</a>：根据方法名获得指定的方法，参数name为方法名，parameterTypes为参数类型</li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethod-java.lang.String-java.lang.Class...-\" target=\"_blank\" rel=\"noopener\">getMethod(String name, Class&lt;?&gt;… parameterTypes)</a>：根据方法名获取指定的public方法</li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethods--\" target=\"_blank\" rel=\"noopener\">getDeclaredMethods()</a>：获取所有声明的方法</li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethods--\" target=\"_blank\" rel=\"noopener\">getMethods()</a>：获取所有的public方法</li>\n</ol>\n<p>其他方法</p>\n<ol>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getReturnType--\" target=\"_blank\" rel=\"noopener\">getReturnType()</a>：获取方法返回类型对应的Class对象</li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getParameterTypes--\" target=\"_blank\" rel=\"noopener\">getParameterTypes()</a>：获取方法参数类型</li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getExceptionTypes--\" target=\"_blank\" rel=\"noopener\">getExceptionTypes()</a>：获取目标方法抛出的异常类型对应的Class对象</li>\n</ol>\n<p>获取方法参数名称<br>.class文件中默认不存储方法参数名称，如果想要获取方法参数名称，需要在编译的时候加上-parameters参数</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里的m可以是普通方法Method，也可以是构造方法Constructor</span></span><br><span class=\"line\"><span class=\"comment\">//获取方法所有参数</span></span><br><span class=\"line\">Parameter[] params = m.getParameters();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; params.length; i++) &#123;</span><br><span class=\"line\">    Parameter p = params[i];</span><br><span class=\"line\">    p.getType();   <span class=\"comment\">//获取参数类型</span></span><br><span class=\"line\">    p.getName();  <span class=\"comment\">//获取参数名称，如果编译时未加上`-parameters`，返回的名称形如`argX`, X为参数在方法声明中的位置，从0开始</span></span><br><span class=\"line\">    p.getModifiers(); <span class=\"comment\">//获取参数修饰符</span></span><br><span class=\"line\">    p.isNamePresent();  <span class=\"comment\">//.class文件中是否保存参数名称, 编译时加上`-parameters`返回true,反之flase</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过反射调用方法<br>反射通过Method的invoke()方法来调用目标方法，第一个参数为需要调用的目标类对象，如果方法为static，则该参数为null，后面的参数为目标方法的参数值，顺序与目标方法声明一样</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object obj, Object... args)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IllegalAccessException, IllegalArgumentException, InvocationTargetException</span></span><br></pre></td></tr></table></figure>\n<p><em>注意：如果方法是private的，可以使用method.setAccessible(true)方法绕过权限检查</em></p>\n<p>示例</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; c = Cat.class;</span><br><span class=\"line\"> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">//构造Cat实例</span></span><br><span class=\"line\">     Constructor constructor = c.getConstructor(String.class, <span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">     Object cat = constructor.newInstance( <span class=\"string\">\"Jack\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">     <span class=\"comment\">//调用无参方法</span></span><br><span class=\"line\">     Method sleep = c.getDeclaredMethod(<span class=\"string\">\"sleep\"</span>);</span><br><span class=\"line\">     sleep.invoke(cat);</span><br><span class=\"line\">     <span class=\"comment\">//调用定项参数方法</span></span><br><span class=\"line\">     Method eat = c.getDeclaredMethod(<span class=\"string\">\"eat\"</span>, String.class);</span><br><span class=\"line\">     eat.invoke(cat, <span class=\"string\">\"grass\"</span>);</span><br><span class=\"line\">     <span class=\"comment\">//调用不定项参数方法</span></span><br><span class=\"line\">     <span class=\"comment\">//不定项参数可以当成数组来处理</span></span><br><span class=\"line\">     Class[] argTypes = <span class=\"keyword\">new</span> Class[] &#123; String[].class &#125;;</span><br><span class=\"line\">     Method varargsEat = c.getDeclaredMethod(<span class=\"string\">\"eat\"</span>, argTypes);</span><br><span class=\"line\">     String[] foods = <span class=\"keyword\">new</span> String[]&#123;</span><br><span class=\"line\">          <span class=\"string\">\"grass\"</span>, <span class=\"string\">\"meat\"</span></span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     varargsEat.invoke(cat, (Object)foods);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) &#123;</span><br><span class=\"line\">     e.printStackTrace();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>被调用方法所抛出的异常在反射中都会以InvocationTargetException抛出</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor\"></a>Constructor</h3><p>获取构造方法</p>\n<ol>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructor-java.lang.Class...-\" target=\"_blank\" rel=\"noopener\">getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</a>：获取指定构造函数，参数parameterTypes为构造方法的参数类型</li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructor-java.lang.Class...-\" target=\"_blank\" rel=\"noopener\">getConstructor(Class&lt;?&gt;… parameterTypes)</a>：获取指定public构造函数，参数parameterTypes为构造方法的参数类型</li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructors--\" target=\"_blank\" rel=\"noopener\">getDeclaredConstructors()</a>：获取所有声明的构造方法</li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructors--\" target=\"_blank\" rel=\"noopener\">getConstructors()</a>：获取所有的public构造方法</li>\n</ol>\n<p>我们可以使用反射来创建对象</p>\n<ol>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#newInstance-java.lang.Object...-\" target=\"_blank\" rel=\"noopener\">java.lang.reflect.Constructor.newInstance()</a></li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#newInstance--\" target=\"_blank\" rel=\"noopener\">Class.newInstance()</a></li>\n</ol>\n<p>这两中方法的异同之处</p>\n<ol>\n<li>Class.newInstance()仅可用来调用无参的构造方法；Constructor.newInstance()可以调用任意参数的构造方法。</li>\n<li>Class.newInstance()会将构造方法中抛出的异常不作处理原样抛出;Constructor.newInstance()会将构造方法中抛出的异常都包装成InvocationTargetException抛出。</li>\n<li>Class.newInstance()需要拥有构造方法的访问权限;Constructor.newInstance()可以通过setAccessible(true)方法绕过访问权限访问private构造方法。</li>\n</ol>\n<p>利用反射初始化数组<br><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html\" target=\"_blank\" rel=\"noopener\">java.lang.reflect.Array</a></p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建数组， 参数componentType为数组元素的类型，后面不定项参数的个数代表数组的维度，参数值为数组长度</span></span><br><span class=\"line\">Array.newInstance(Class&lt;?&gt; componentType, <span class=\"keyword\">int</span>... dimensions)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置数组值，array为数组对象，index为数组的下标，value为需要设置的值</span></span><br><span class=\"line\">Array.set(Object array, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取数组的值，array为数组对象，index为数组的下标</span></span><br><span class=\"line\">Array.get(Object array, <span class=\"keyword\">int</span> index)</span><br></pre></td></tr></table></figure>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object array = Array.newInstance(<span class=\"keyword\">int</span>.class, <span class=\"number\">2</span>);</span><br><span class=\"line\">Array.setInt(array , <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">Array.setInt(array , <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>反射支持数组自动变宽，但不能自动变窄,你可以理解为set方法在int类型数组中可以set short类型的数据，但是不能set long类型的数据，否则会报IllegalArgumentException</p>\n<h3 id=\"反射的缺点\"><a href=\"#反射的缺点\" class=\"headerlink\" title=\"反射的缺点\"></a>反射的缺点</h3><ul>\n<li>内部曝光：反射允许代码执行一些在正常情况下不被允许的操作，比如私有属性的访问，破坏抽象性</li>\n<li>安全限制：使用反射技术要求程序必须在一个没有安全限制的环境中运行，</li>\n<li>性能开销：反射涉及类型动态解析，所以其效率比较低</li>\n</ul>\n<p>原则：如果使用常规方法能够实现，那么就尽量不要使用反射</p>\n","categories":["JAVA"],"tags":["REFLECT"]},{"title":"探究synchronized和Lock","url":"https://feifaninternet.github.io/2018/06/28/探究synchronized和Lock/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>我们在JAVA中常常是使用synchronized 和 Lock 来实现线程同步，为何有两种方式，肯定是他们之间各自存在优劣，这两者之间有什么区别，在不同的场景下我们又该如何取舍呢，带着这样的问题，我开始了研究</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><p>我用一张表来大概展示下两者之间的区别</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>synchronized</th>\n<th>Lock</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存在层次</td>\n<td>Java关键字，在JVM层面上</td>\n<td>是一个类</td>\n</tr>\n<tr>\n<td>锁的释放</td>\n<td>1.获取锁的线程执行完同步代码释放锁；2.线程执行发生异常JVM会让线程释放锁</td>\n<td>在finally中必须释放锁，不然容易造成线程死锁</td>\n</tr>\n<tr>\n<td>锁的获取</td>\n<td>假设A线程获得锁，B线程等待，如果A线程阻塞，B线程会一直等待</td>\n<td>分情况而定，Lock有多个锁的获取方式，可以尝试获得锁，线程不用一直等待</td>\n</tr>\n<tr>\n<td>锁的状态</td>\n<td>无法判断</td>\n<td>可以判断</td>\n</tr>\n<tr>\n<td>锁的类型</td>\n<td>可重入，不可中断，非公平</td>\n<td>可重入，可判断，可公平</td>\n</tr>\n<tr>\n<td>性能比较</td>\n<td>少量同步</td>\n<td>大量同步</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"synchronized-原理\"><a href=\"#synchronized-原理\" class=\"headerlink\" title=\"synchronized 原理\"></a>synchronized 原理</h3><p>对于 synchronized 关键字我们重点了解一下它的原理和可重入性</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>我们利用反编译来看下 synchronized 是如何来进行同步的</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedDemo</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Method 1 start\"</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>反编译结果<br><img src=\"/picture/javaSynchronized.png\" alt=\"反编译结果\"></p>\n<p>这里我们引入Java对象头概念<br>每个对象有一个监视器锁(monitor),当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权</p>\n<ol>\n<li>如果monitor的进入数为0，则该线程进入monitor，然后进入数设置为1，该线程即为monitor所有者</li>\n<li>如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1</li>\n<li>如果其他线程已经占有率monitor，则该线程进入的等待(阻塞)状态，直到monitor的进入数为0，再尝试重新获取monitor的所有权</li>\n</ol>\n<p>线程执行monitorexit</p>\n<ol>\n<li>执行该指令的线程必须是monitor的所有者</li>\n<li>指令执行时monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不在是所有者，其他被这个monitor阻塞的线程可以尝试获取所有权</li>\n</ol>\n<p>synchronized的底层是通过monitor对象来完成的，wait/notify方法也依赖于monitor，这就是为什么只有在同步的块或者方法中才能调用wait/notify<br>我们来看下同步方法反编译</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedMethod</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>反编译结果<br><img src=\"/picture/synchronizedMethod.png\" alt=\"方法反编译\"></p>\n<p>同步方法的synchronized实现并没有通过指令monitorenter和monitorexit来完成，对于普通方法，其常量池中多了ACC_SYNCHRONIZED标示符，JVM根据该标识符来实现同步:当方法调用时，调用指令将会检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，执行线程将先获取monitor，获取成功之后才能执行方法体，方法执行完后再释放monitor。在方法执行期间，其他任何线程都无法再获得同一个monitor对象。 其实本质上没有区别，只是方法的同步是一种隐式的方式来实现，无需通过字节码来完成。</p>\n<h4 id=\"可重入性\"><a href=\"#可重入性\" class=\"headerlink\" title=\"可重入性\"></a>可重入性</h4><p>前面已经提到了synchronized的锁的获取，当一个线程拥有锁之后，其他的线程会阻塞，但是当拥有锁的这个线程再次请求自己持有的对象锁的临界资源时，这种情况就属于重入锁，synchronized是具有可重入性的，允许一个线程得到一个对象锁后再次请求该对象锁</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountingSync</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> AccountingSync instance=<span class=\"keyword\">new</span> AccountingSync();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">1000000</span>;j++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//this,当前实例对象锁</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                increase();<span class=\"comment\">//synchronized的可重入性</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread t1=<span class=\"keyword\">new</span> Thread(instance);</span><br><span class=\"line\">        Thread t2=<span class=\"keyword\">new</span> Thread(instance);</span><br><span class=\"line\">        t1.start();t2.start();</span><br><span class=\"line\">        t1.join();t2.join();</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当子类继承父类时，子类也可以通过重入锁调用父类的同步方法，每次重入monitor计数器都会加1。</p>\n<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><p>Lock是一个接口</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Lock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lockInterruptibly</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">(<span class=\"keyword\">long</span> time, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</span><br><span class=\"line\">    <span class=\"comment\">//释放锁</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Condition <span class=\"title\">newCondition</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.lock(): 这是平时使用最多的一个方法，用来获取锁，如果锁已经被其他线程获取，则进行等待。<br>使用Lock必须要主动释放锁，即使发生异常锁也不会自动释放，因此，使用Lock必须在try,catch块中进行，并且释放锁的操作放在finally块进行，以保证所一定被释放，防止死锁的发生</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lock lock = ...;</span><br><span class=\"line\">lock.lock();</span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理任务</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(Exception ex)&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    lock.unlock();   <span class=\"comment\">//释放锁</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.tryLock(): 这个方式是有返回值的它表示用来尝试获取锁，如果获取成功则返回true，如果获取失败则返回false，即使获取不到锁也会立即返回，不会一直等待</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lock lock = ...;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(lock.tryLock()) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">//处理任务</span></span><br><span class=\"line\">     &#125;<span class=\"keyword\">catch</span>(Exception ex)&#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">     &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">         lock.unlock();   <span class=\"comment\">//释放锁</span></span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果不能获取锁，则直接做其他事情</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.lockInterruptibly(): 通过这个方法获取锁时，线程可以中断等待状态，由于lockInterruptibly()的声明中抛出了异常，所以lock.lockInterruptibly()必须放在try块中或者在调用lockInterruptibly()的方法外声明抛出InterruptedException。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    lock.lockInterruptibly();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">     <span class=\"comment\">//.....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>interrupt()方法只能中断阻塞中的线程，不能中断正在运行过程中的线程。</p>\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><p>可重入锁。ReentrantLock是唯一实现了Lock接口的类，下面我们来看看运用<br>我们需要将lock声明为类的属性，这样才是正确的使用方法</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;Integer&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();    <span class=\"comment\">//注意这个地方</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Test test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                test.insert(Thread.currentThread());</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                test.insert(Thread.currentThread());</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Thread thread)</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(thread.getName()+<span class=\"string\">\"得到了锁\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">                arrayList.add(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(thread.getName()+<span class=\"string\">\"释放了锁\"</span>);</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面我们来看一下tryLock()的使用方法</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;Integer&gt; arrayList = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Test test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                test.insert(Thread.currentThread());</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                test.insert(Thread.currentThread());</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Thread thread)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lock.tryLock()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(thread.getName()+<span class=\"string\">\"得到了锁\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">                    arrayList.add(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                System.out.println(thread.getName()+<span class=\"string\">\"释放了锁\"</span>);</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(thread.getName()+<span class=\"string\">\"获取锁失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>lockInterruptibly()中断等待状态</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</span><br><span class=\"line\">        Test test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">        MyThread thread1 = <span class=\"keyword\">new</span> MyThread(test);</span><br><span class=\"line\">        MyThread thread2 = <span class=\"keyword\">new</span> MyThread(test);</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        thread2.interrupt();</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Thread thread)</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</span><br><span class=\"line\">        lock.lockInterruptibly();   <span class=\"comment\">//注意，如果需要正确中断等待锁的线程，必须将获取锁放在外面，然后将InterruptedException抛出</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            System.out.println(thread.getName()+<span class=\"string\">\"得到了锁\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(    ;     ;) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(System.currentTimeMillis() - startTime &gt;= Integer.MAX_VALUE)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">//插入数据</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"执行finally\"</span>);</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">            System.out.println(thread.getName()+<span class=\"string\">\"释放了锁\"</span>);</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Test test = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread</span><span class=\"params\">(Test test)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.test = test;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            test.insert(Thread.currentThread());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"被中断\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReentrantReadWriteLock\"><a href=\"#ReentrantReadWriteLock\" class=\"headerlink\" title=\"ReentrantReadWriteLock\"></a>ReentrantReadWriteLock</h3><p>ReentrantReadWriteLock实现了ReadWriteLock接口，可以通过readLock()获取读锁和writeLock()获取写锁<br>相对于synchronized，它可以使2个线程同时进行读操作，大大提高了效率，而synchronized只能等待一个线程的读操作结束另一个线程的读操作才能开始</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReentrantReadWriteLock rwl = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Test test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                test.get(Thread.currentThread());</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                test.get(Thread.currentThread());</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(Thread thread)</span> </span>&#123;</span><br><span class=\"line\">        rwl.readLock().lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">             </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(System.currentTimeMillis() - start &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.println(thread.getName()+<span class=\"string\">\"正在进行读操作\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(thread.getName()+<span class=\"string\">\"读操作完毕\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            rwl.readLock().unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"synchronized-和-lock-的选择\"><a href=\"#synchronized-和-lock-的选择\" class=\"headerlink\" title=\"synchronized 和 lock 的选择\"></a>synchronized 和 lock 的选择</h3><p>最后我们来总结一下如何取舍 :<br>在性能上来说，如果资源竞争不激烈，两者的性能是差不多的，而当线程之间的竞争非常激烈时，此时Lock的性能优势就会展现出来，所以结果显而易见。如果需要仔细了解线程相关知识，我推荐大家去看一下人手一本的《JAVA并发编程实战》</p>\n","categories":["JAVA"],"tags":["Thread Pool"]},{"title":"JAVA图片合成","url":"https://feifaninternet.github.io/2018/06/27/JAVA图片合成/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>先说一下我遇到的场景和需求，因为之前一直没有遇到过这种需求，所以在此记录一下，并扩展延伸。<br>需求如下：</p>\n<ul>\n<li>有两张图片，一张大图，一张小图，图片都为链接形式(当然也可以是文件)</li>\n<li>大图为不同的模板，小图为每个用户特定的二维码(每个用户二维码都不一样)</li>\n<li>需要将小图缩放到指定大小，然后嵌入在大图的指定位置，大小和位置参数已知。</li>\n<li>最后合成一张图片上传并返回</li>\n</ul>\n<h3 id=\"图片合成方法\"><a href=\"#图片合成方法\" class=\"headerlink\" title=\"图片合成方法\"></a>图片合成方法</h3><p>直接上代码，在注释中说明</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.canplay.common.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.image.codec.jpeg.ImageFormatException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> xfan</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> Created on 2018/6/27 -- 15:57</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> 图片相关工具类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PictureUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 二维码图片合成工具</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> x 二维码图片嵌入处X坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> y 二维码图片嵌入处Y坐标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> backPicUrl 背景模板图链接</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> qrCodePicUrl 二维码链接</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> qrCodeHeight 二维码高度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> qrCodeWidth 二维码宽度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> byte 数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] overlapImage(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, String backPicUrl, String qrCodePicUrl, <span class=\"keyword\">int</span> qrCodeHeight, <span class=\"keyword\">int</span> qrCodeWidth) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        ByteArrayOutputStream out = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">        BufferedImage big = ImageIO.read(<span class=\"keyword\">new</span> URL(backPicUrl));</span><br><span class=\"line\">        <span class=\"comment\">//缩放二维码到指定宽高</span></span><br><span class=\"line\">        BufferedImage small = resize(qrCodeWidth, </span><br><span class=\"line\">                                     qrCodeHeight, </span><br><span class=\"line\">                                     ImageIO.read(<span class=\"keyword\">new</span> URL(qrCodePicUrl)));</span><br><span class=\"line\"></span><br><span class=\"line\">        Graphics2D g = big.createGraphics();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将二维码嵌入到坐标位置</span></span><br><span class=\"line\">        g.drawImage(small, </span><br><span class=\"line\">                    x,</span><br><span class=\"line\">                    y, </span><br><span class=\"line\">                    small.getWidth(), </span><br><span class=\"line\">                    small.getHeight(), </span><br><span class=\"line\">                    <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        g.dispose();</span><br><span class=\"line\">        ImageIO.write(big, <span class=\"string\">\"jpg\"</span>, out);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * 当然，你也可以直接写出一张图片</span></span><br><span class=\"line\"><span class=\"comment\">        * ImageIO.write(big, \"jpg\", new File(\"config/resource/BigSmall.jpg\"));</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        big.flush();</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> out.toByteArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  将Image的宽度,高度缩放到指定width、height</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> width 缩放的宽度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> height 缩放的高度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetImage 即将缩放的目标图片</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ImageFormatException 图片转换异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, Image targetImage)</span> <span class=\"keyword\">throws</span> ImageFormatException</span>&#123;</span><br><span class=\"line\">        width = Math.max(width, <span class=\"number\">1</span>);</span><br><span class=\"line\">        height = Math.max(height, <span class=\"number\">1</span>);</span><br><span class=\"line\">        BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(width, </span><br><span class=\"line\">                                                height, </span><br><span class=\"line\">                                                BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\">        <span class=\"comment\">//按照指定大小重新构造图片</span></span><br><span class=\"line\">        image.getGraphics().drawImage(targetImage, </span><br><span class=\"line\">                                      <span class=\"number\">0</span>, </span><br><span class=\"line\">                                      <span class=\"number\">0</span>, </span><br><span class=\"line\">                                      width, </span><br><span class=\"line\">                                      height, </span><br><span class=\"line\">                                      <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        image.flush();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将Image的宽度、高度缩放到指定width、height，并保存在savePath目录</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法就是上面缩放图片方法的另一个版本，写出文件，上面的业务没有用到这个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> width 缩放的宽度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> height 缩放的高度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> savePath 保存目录</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targetImage 即将缩放的目标图片</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 图片保存路径、名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ImageFormatException 图片转换异常</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException IO异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, String savePath, Image targetImage)</span> <span class=\"keyword\">throws</span> ImageFormatException, IOException </span>&#123;</span><br><span class=\"line\">        width = Math.max(width, <span class=\"number\">1</span>);</span><br><span class=\"line\">        height = Math.max(height, <span class=\"number\">1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\">        image.getGraphics().drawImage(targetImage, <span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    \t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(savePath)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//自己定义的默认位置</span></span><br><span class=\"line\">            savePath = <span class=\"string\">\"D:\\\\new_pic.jpg\"</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//输出流</span></span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(savePath));</span><br><span class=\"line\">        JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(fos);</span><br><span class=\"line\">        encoder.encode(image);</span><br><span class=\"line\">     </span><br><span class=\"line\">        image.flush();</span><br><span class=\"line\">        fos.flush();</span><br><span class=\"line\">        fos.close();</span><br><span class=\"line\">    \t\t</span><br><span class=\"line\">        <span class=\"keyword\">return</span> savePath; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//下面为延伸...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Expand"],"tags":["JAVA"]},{"title":"线程池原理","url":"https://feifaninternet.github.io/2018/06/26/线程池原理/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>需要使用线程池的场景还是比较常见的，所以对线程池的了解还是很有必要的。</p>\n<h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><p>ThreadPoolExecutor中的四个构造方法：</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExecutorService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            BlockingQueue&lt;Runnable&gt; workQueue)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            BlockingQueue&lt;Runnable&gt; workQueue,RejectedExecutionHandler handler)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参数含义 :</p>\n<ul>\n<li>corePoolSize : 核心池的大小，创建线程池后，线程池中没有任何线程(当然也有方法让线程池创建之后就拥有一个或者coreSize个线程，比如prestartAllCoreThreads()/prestartCoreThreads())，而是等待任务到来时再去创建线程，当线程池中的线程数达到coreSize的时候，就会把到达的任务放到缓存队列中去。</li>\n<li>maximumPoolSize : 线程池最大线程数，它表示线程池中最多可以创建多少个线程。当线程池满后，再创建线程就会被我们的拒绝策略所拒绝，而非阻塞</li>\n<li>keepAliveTime : 线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，它才会起作用，如果调用了allowCoreThreadTimeOut(boolean)方法，将会在线程数不大于corePoolSize的时候也会起作用</li>\n<li>unit : 参数keepAliveTime的时间单位，具体可以自行查阅</li>\n<li>workQueue : 一个阻塞队列，用来存储等待执行的任务，阻塞队列一般有LinkedBlockingQueue和Synchronous</li>\n<li>threadFactory : 线程工厂，用来创建线程</li>\n<li>handle : 拒绝任务时的策略：</li>\n</ul>\n<ol>\n<li>ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。 </li>\n<li>ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 </li>\n<li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</li>\n<li>ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 </li>\n</ol>\n<h3 id=\"线程池中重要的方法\"><a href=\"#线程池中重要的方法\" class=\"headerlink\" title=\"线程池中重要的方法\"></a>线程池中重要的方法</h3><p>我们来看下ThreadPoolExecutor继承的AbstractExecutorService的实现</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractExecutorService</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExecutorService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">RunnableFuture&lt;T&gt; <span class=\"title\">newTaskFor</span><span class=\"params\">(Runnable runnable, T value)</span> </span>&#123; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">RunnableFuture&lt;T&gt; <span class=\"title\">newTaskFor</span><span class=\"params\">(Callable&lt;T&gt; callable)</span> </span>&#123; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Future&lt;?&gt; submit(Runnable task) &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Future&lt;T&gt; <span class=\"title\">submit</span><span class=\"params\">(Runnable task, T result)</span> </span>&#123; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Future&lt;T&gt; <span class=\"title\">submit</span><span class=\"params\">(Callable&lt;T&gt; task)</span> </span>&#123; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">doInvokeAny</span><span class=\"params\">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"keyword\">boolean</span> timed, <span class=\"keyword\">long</span> nanos)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">invokeAny</span><span class=\"params\">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">invokeAny</span><span class=\"params\">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span><br><span class=\"line\">                                         <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们看下ExecutorService</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ExecutorService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Executor</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isShutdown</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isTerminated</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">awaitTermination</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> InterruptedException</span>;</span><br><span class=\"line\">    &lt;T&gt; <span class=\"function\">Future&lt;T&gt; <span class=\"title\">submit</span><span class=\"params\">(Callable&lt;T&gt; task)</span></span>;</span><br><span class=\"line\">    &lt;T&gt; <span class=\"function\">Future&lt;T&gt; <span class=\"title\">submit</span><span class=\"params\">(Runnable task, T result)</span></span>;</span><br><span class=\"line\">    Future&lt;?&gt; submit(Runnable task);</span><br><span class=\"line\">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span><br><span class=\"line\">                                  <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &lt;T&gt; <span class=\"function\">T <span class=\"title\">invokeAny</span><span class=\"params\">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class=\"line\">    &lt;T&gt; <span class=\"function\">T <span class=\"title\">invokeAny</span><span class=\"params\">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    <span class=\"keyword\">long</span> timeout, TimeUnit unit)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来是Executor</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Executor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Executor是一个顶层接口，在它里面只声明了一个方法execute(Runnable)，返回值为void，参数为Runnable类型，从字面意思可以理解，就是用来执行传进去的任务的；然后ExecutorService接口继承了Executor接口，并声明了一些方法：submit、invokeAll、invokeAny以及shutDown等；抽象类AbstractExecutorService实现了ExecutorService接口，基本实现了ExecutorService中声明的所有方法；然后ThreadPoolExecutor继承了类AbstractExecutorService。<br>在ThreadPoolExecutor类中有几个非常重要的方法：</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execute()</span><br><span class=\"line\">submit()</span><br><span class=\"line\">shutdown()</span><br><span class=\"line\">shutdownNow()</span><br></pre></td></tr></table></figure>\n<ol>\n<li>execute()方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，通过这个方法向线程池中提交一个任务，交由线程池去处理</li>\n<li>submit()方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，去看submit()方法的实现，会发现它实际上还是调用的execute()方法，只不过它利用了Future来获取任务执行结果</li>\n<li>shutdown()和shutdownNow()是用来关闭线程池的。</li>\n</ol>\n<h3 id=\"线程池的状态\"><a href=\"#线程池的状态\" class=\"headerlink\" title=\"线程池的状态\"></a>线程池的状态</h3><p>在ThreadPoolExecutor中定义了一个volatile变量 runState，表示当前线程的状态，用来保证线程之间的可见性。   </p>\n<ol>\n<li>当创建线程池后，初始时，线程池处于RUNNING状态</li>\n<li>如果调用了shutdown()方法，则线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕</li>\n<li>如果调用了shutdownNow()方法，则线程池处于STOP状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务</li>\n<li>当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态</li>\n</ol>\n<h3 id=\"任务的执行\"><a href=\"#任务的执行\" class=\"headerlink\" title=\"任务的执行\"></a>任务的执行</h3><p>ThreadPoolExecutor类中其他的一些比较重要成员变量</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> BlockingQueue&lt;Runnable&gt; workQueue;              <span class=\"comment\">//任务缓存队列，用来存放等待执行的任务</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReentrantLock mainLock = <span class=\"keyword\">new</span> ReentrantLock();   <span class=\"comment\">//线程池的主要状态锁，对线程池状态（比如线程池大小</span></span><br><span class=\"line\">                                                             <span class=\"comment\">//、runState等）的改变都要使用这个锁</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashSet&lt;Worker&gt; workers = <span class=\"keyword\">new</span> HashSet&lt;Worker&gt;();  <span class=\"comment\">//用来存放工作集</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span>  keepAliveTime;    <span class=\"comment\">//线程存货时间   </span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> allowCoreThreadTimeOut;   <span class=\"comment\">//是否允许为核心线程设置存活时间</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span>   corePoolSize;     <span class=\"comment\">//核心池的大小（即线程池中的线程数目大于这个参数时，提交的任务会被放进任务缓存队列）</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span>   maximumPoolSize;   <span class=\"comment\">//线程池最大能容忍的线程数</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span>   poolSize;       <span class=\"comment\">//线程池中当前的线程数</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> RejectedExecutionHandler handler; <span class=\"comment\">//任务拒绝策略</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> ThreadFactory threadFactory;   <span class=\"comment\">//线程工厂，用来创建线程</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> largestPoolSize;   <span class=\"comment\">//用来记录线程池中曾经出现过的最大线程数</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> completedTaskCount;   <span class=\"comment\">//用来记录已经执行完毕的任务个数</span></span><br></pre></td></tr></table></figure>\n<p>我们来看下任务从提交到执行完毕所经历的过程:<br>任务的提交的核心方法是executor()</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (command == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (poolSize &gt;= corePoolSize || !addIfUnderCorePoolSize(command)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runState == RUNNING &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (runState != RUNNING || poolSize == <span class=\"number\">0</span>)</span><br><span class=\"line\">                ensureQueuedTaskHandled(command);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addIfUnderMaximumPoolSize(command))</span><br><span class=\"line\">            reject(command); <span class=\"comment\">// is shutdown or saturated</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来看下里面的2个关键方法:</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addIfUnderCorePoolSize</span><span class=\"params\">(Runnable firstTask)</span> </span>&#123;</span><br><span class=\"line\">    Thread t = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock mainLock = <span class=\"keyword\">this</span>.mainLock;</span><br><span class=\"line\">    mainLock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (poolSize &lt; corePoolSize &amp;&amp; runState == RUNNING)</span><br><span class=\"line\">            t = addThread(firstTask);        <span class=\"comment\">//创建线程去执行firstTask任务   </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        mainLock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    t.start();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Thread <span class=\"title\">addThread</span><span class=\"params\">(Runnable firstTask)</span> </span>&#123;</span><br><span class=\"line\">    Worker w = <span class=\"keyword\">new</span> Worker(firstTask);</span><br><span class=\"line\">    Thread t = threadFactory.newThread(w);  <span class=\"comment\">//创建一个线程，执行任务   </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        w.thread = t;            <span class=\"comment\">//将创建的线程的引用赋值为w的成员变量       </span></span><br><span class=\"line\">        workers.add(w);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nt = ++poolSize;     <span class=\"comment\">//当前线程数加1       </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nt &gt; largestPoolSize)</span><br><span class=\"line\">            largestPoolSize = nt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Worker类的实现</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReentrantLock runLock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Runnable firstTask;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> completedTasks;</span><br><span class=\"line\">    Thread thread;</span><br><span class=\"line\">    Worker(Runnable firstTask) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstTask = firstTask;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> runLock.isLocked();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">interruptIfIdle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ReentrantLock runLock = <span class=\"keyword\">this</span>.runLock;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runLock.tryLock()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (thread != Thread.currentThread())</span><br><span class=\"line\">        thread.interrupt();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                runLock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">interruptNow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        thread.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">runTask</span><span class=\"params\">(Runnable task)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ReentrantLock runLock = <span class=\"keyword\">this</span>.runLock;</span><br><span class=\"line\">        runLock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (runState &lt; STOP &amp;&amp;</span><br><span class=\"line\">                Thread.interrupted() &amp;&amp;</span><br><span class=\"line\">                runState &gt;= STOP)</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> ran = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            beforeExecute(thread, task);   <span class=\"comment\">//beforeExecute方法是ThreadPoolExecutor类的一个方法，没有具体实现，用户可以根据</span></span><br><span class=\"line\">            <span class=\"comment\">//自己需要重载这个方法和后面的afterExecute方法来进行一些统计信息，比如某个任务的执行时间等           </span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                task.run();</span><br><span class=\"line\">                ran = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                afterExecute(task, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                ++completedTasks;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RuntimeException ex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!ran)</span><br><span class=\"line\">                    afterExecute(task, ex);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            runLock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Runnable task = firstTask;</span><br><span class=\"line\">            firstTask = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (task != <span class=\"keyword\">null</span> || (task = getTask()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                runTask(task);</span><br><span class=\"line\">                task = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            workerDone(<span class=\"keyword\">this</span>);   <span class=\"comment\">//当任务队列中没有任务时，进行清理工作       </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从run()方法我们可以看出需要通过getTask()不断去任务缓存队列中取新的任务，下面我们来看下getTask()方法的实现</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Runnable <span class=\"title\">getTask</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> state = runState;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state &gt; SHUTDOWN)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            Runnable r;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (state == SHUTDOWN)  <span class=\"comment\">// Help drain queue</span></span><br><span class=\"line\">                r = workQueue.poll();</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (poolSize &gt; corePoolSize || allowCoreThreadTimeOut) <span class=\"comment\">//如果线程数大于核心池大小或者允许为核心池线程设置空闲时间，</span></span><br><span class=\"line\">                <span class=\"comment\">//则通过poll取任务，若等待一定的时间取不到任务，则返回null</span></span><br><span class=\"line\">                r = workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                r = workQueue.take();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (workerCanExit()) &#123;    <span class=\"comment\">//如果没取到任务，即r为null，则判断当前的worker是否可以退出</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (runState &gt;= SHUTDOWN) <span class=\"comment\">// Wake up others</span></span><br><span class=\"line\">                    interruptIdleWorkers();   <span class=\"comment\">//中断处于空闲状态的worker</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// Else retry</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException ie) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// On interruption, re-check runState</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["JAVA"],"tags":["Thread Pool"]},{"title":"HashMap 源码","url":"https://feifaninternet.github.io/2018/06/08/HashMap-源码/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>HashMap的源码是很有代表性的，涉及的方面也很多，我们需要仔细的学习。<br>关于HashMap的几个知识点：</p>\n<ol>\n<li>HashMap是根据键值对存储的，并且存储时数据的键不能相同，如果相同，该键对应的值会被覆盖，如果想要保证HashMap能够正确的存储数据，要确保作为键的类已经正确覆写了equals()方法。</li>\n<li>HashMap存储数据的位置与添加数据的键的hashCode()返回值有关。所以在元素使用HashMap存储的时候要确保已经正确重写了hashCode()。</li>\n<li>HashMap最多只允许一条数据的键为null，可允许多条数据的值为null。</li>\n<li>HashMap存储数据的顺序是不确定的，并且可能因为扩容导致存储的位置改变，因此遍历顺序是不确定的。</li>\n<li>HashMap是线程不安全的，如果需要多线程的情况下使用，可以用Collections.synchronizedMap(Map map)方法使hashMap具有线程安全能力，或者使用ConcurrentHashMap。</li>\n</ol>\n<h3 id=\"HashMap-的存储结构\"><a href=\"#HashMap-的存储结构\" class=\"headerlink\" title=\"HashMap 的存储结构\"></a>HashMap 的存储结构</h3><p>HashMap的存储结构在JDK 1.7和1.8之间有很大的变化，JDK1.7中先添加的元素总是放在数组相应的角标位置，而原来处于该角标位置的节点作为next节点放到新节点的后面，在JDK1.8之后解决hash冲突就不单单是使用数组加上单链表的组合了，因为如果hash值冲突较多，链表的长度就会越来越长，时间复杂度会达到0(n)，在1.8之后，新增节点导致链表长度超过TREEIFY_THRESHOLD = 8的时候，就会在添加元素的同时将原来的单链表转化为红黑树。</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/HashMapRedBlankTree.jpg\" alt=\"HashMap的红黑树\" title=\"HashMap的红黑树\"><br></div>\n\n<h3 id=\"HashMap-的重要参数\"><a href=\"#HashMap-的重要参数\" class=\"headerlink\" title=\"HashMap 的重要参数\"></a>HashMap 的重要参数</h3><h4 id=\"1-哈希桶-buckets\"><a href=\"#1-哈希桶-buckets\" class=\"headerlink\" title=\"1.哈希桶(buckets)\"></a>1.哈希桶(buckets)</h4><p>在 HashMap 的注释里使用哈希桶来形象的表示数组中每个地址位置。注意这里并不是数组本身，数组是装哈希桶的，他可以被称为哈希表。</p>\n<h4 id=\"2-初始容量-initial-capacity\"><a href=\"#2-初始容量-initial-capacity\" class=\"headerlink\" title=\"2.初始容量(initial capacity)\"></a>2.初始容量(initial capacity)</h4><p>哈希表中哈希桶的初始数量。如果没有通过构造方法修改，这个容量值默认为DEFAULT_INITIAL_CAPACITY = 1&lt;&lt;4(即16)。值得注意的是为了保证 HashMap 添加和查找的高效性，HashMap 的容量总是 2^n 的形式。</p>\n<h4 id=\"3-加载因子-load-factor\"><a href=\"#3-加载因子-load-factor\" class=\"headerlink\" title=\"3.加载因子(load factor)\"></a>3.加载因子(load factor)</h4><p>加载因子是哈希表（散列表）在其容量自动增加之前被允许获得的最大数量的度量。当哈希表中的条目数量超过负载因子和当前容量的乘积时，散列表就会被重新映射（即重建内部数据结构），重新创建的散列表容量大约是之前散列表哈系统桶数量的两倍。默认加载因子（0.75）在时间和空间成本之间提供了良好的折中。加载因子过大会导致很容易链表过长，加载因子很小又容易导致频繁的扩容。所以不要轻易试着去改变这个默认值。</p>\n<h4 id=\"4-扩容阈值（threshold）\"><a href=\"#4-扩容阈值（threshold）\" class=\"headerlink\" title=\"4.扩容阈值（threshold）\"></a>4.扩容阈值（threshold）</h4><p>扩容阈值 = 哈希表容量 * 加载因子。哈希表的键值对总数 = 所有哈希桶中所有链表节点数的总和，扩容阈值比较的是是键值对的个数而不是哈希表的数组中有多少个位置被占了。</p>\n<h4 id=\"5-树化阀值-TREEIFY-THRESHOLD\"><a href=\"#5-树化阀值-TREEIFY-THRESHOLD\" class=\"headerlink\" title=\"5.树化阀值(TREEIFY_THRESHOLD)\"></a>5.树化阀值(TREEIFY_THRESHOLD)</h4><p>哈希桶中的节点个数大于该值（默认为8）的时候将会被转为红黑树行存储结构。</p>\n<h4 id=\"6-非树化阀值-UNTREEIFY-THRESHOLD\"><a href=\"#6-非树化阀值-UNTREEIFY-THRESHOLD\" class=\"headerlink\" title=\"6.非树化阀值(UNTREEIFY_THRESHOLD)\"></a>6.非树化阀值(UNTREEIFY_THRESHOLD)</h4><p>当一个已经转化为树形存储结构的哈希桶中节点数量小于该值（默认为 6）的时候将再次改为单链表的格式存储。导致这种操作的原因可能有删除节点或者扩容。</p>\n<h4 id=\"7-最小树化容量-MIN-TREEIFY-CAPACITY\"><a href=\"#7-最小树化容量-MIN-TREEIFY-CAPACITY\" class=\"headerlink\" title=\"7.最小树化容量(MIN_TREEIFY_CAPACITY)\"></a>7.最小树化容量(MIN_TREEIFY_CAPACITY)</h4><p>当链表的节点数超过8的时候就会转化为树化存储，其实对于转化还有一个要求就是哈希表的数量超过最小树化容量的要求（默认要求是 64）,且为了避免进行扩容、树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD);在达到该有求之前优先选择扩容。扩容因为因为容量的变化可能会使单链表的长度改变。</p>\n<h3 id=\"HashMap-的基本存储单元\"><a href=\"#HashMap-的基本存储单元\" class=\"headerlink\" title=\"HashMap 的基本存储单元\"></a>HashMap 的基本存储单元</h3><p>HashMap在JDK1.7中只有Entry一种存储单元，而在JDK1.8中由于有了红黑树，就多了一种存储单元，而Entry也随之应景的改为Node。<br>单链表节点的表现方法：<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 内部类 Node 实现基类的内部接口 Map.Entry&lt;K,V&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//此值是在数组索引位置</span></span><br><span class=\"line\">   <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\">   <span class=\"comment\">//节点的键</span></span><br><span class=\"line\">   <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">   <span class=\"comment\">//节点的值</span></span><br><span class=\"line\">   V value;</span><br><span class=\"line\">   <span class=\"comment\">//单链表中下一个节点</span></span><br><span class=\"line\">   Node&lt;K,V&gt; next;</span><br><span class=\"line\">    </span><br><span class=\"line\">   Node(<span class=\"keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.hash = hash;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span>        </span>&#123; <span class=\"keyword\">return</span> key; &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span>      </span>&#123; <span class=\"keyword\">return</span> value; &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> key + <span class=\"string\">\"=\"</span> + value; &#125;</span><br><span class=\"line\">    <span class=\"comment\">//节点的 hashCode 值通过 key 的哈希值和 value 的哈希值异或得到，没发现在源码中中有用到。</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//更新相同 key 对应的 Value 值</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">setValue</span><span class=\"params\">(V newValue)</span> </span>&#123;</span><br><span class=\"line\">       V oldValue = value;</span><br><span class=\"line\">       value = newValue;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> <span class=\"comment\">//equals 方法，键值同时相同才节点才相同</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (o == <span class=\"keyword\">this</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> Map.Entry) &#123;</span><br><span class=\"line\">           Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class=\"line\">               Objects.equals(value, e.getValue()))</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>JDK1.8新增的红黑树节点 :<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">LinkedHashMap</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">   TreeNode&lt;K,V&gt; parent;  <span class=\"comment\">// red-black tree links</span></span><br><span class=\"line\">   TreeNode&lt;K,V&gt; left;</span><br><span class=\"line\">   TreeNode&lt;K,V&gt; right;</span><br><span class=\"line\">   TreeNode&lt;K,V&gt; prev;    <span class=\"comment\">// needed to unlink next upon deletion</span></span><br><span class=\"line\">   <span class=\"keyword\">boolean</span> red;</span><br><span class=\"line\">   TreeNode(<span class=\"keyword\">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>(hash, key, val, next);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"HashMap-的构造方法\"><a href=\"#HashMap-的构造方法\" class=\"headerlink\" title=\"HashMap 的构造方法\"></a>HashMap 的构造方法</h3><h4 id=\"1-可以指定期望初始容量和加载因子的构造函数\"><a href=\"#1-可以指定期望初始容量和加载因子的构造函数\" class=\"headerlink\" title=\"1.可以指定期望初始容量和加载因子的构造函数\"></a>1.可以指定期望初始容量和加载因子的构造函数</h4>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 指定期望初始容量小于0将会抛出非法参数异常</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal initial capacity: \"</span> +</span><br><span class=\"line\">                                          initialCapacity);</span><br><span class=\"line\">   <span class=\"comment\">// 期望初始容量不可以大于最大值 2^30  实际上我们也不会用到这么大的容量                                      </span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">       initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">  <span class=\"comment\">// 加载因子必须大于0 不能为无穷大   </span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal load factor: \"</span> +</span><br><span class=\"line\">                                          loadFactor);</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.loadFactor = loadFactor;<span class=\"comment\">//初始化全局加载因子变量</span></span><br><span class=\"line\">   <span class=\"keyword\">this</span>.threshold = tableSizeFor(initialCapacity);<span class=\"comment\">//根据初始容量计算计算扩容阈值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数没有初始化Node<k,v>[] table，事实上真正指定哈希表容量总是在第一次添加元素的时候，这点和ArrayList的机制不同<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据期望容量返回一个 &gt;= cap 的扩容阈值，并且这个阈值一定是 2^n </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">tableSizeFor</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> n = cap - <span class=\"number\">1</span>;</span><br><span class=\"line\">   n |= n &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">   n |= n &gt;&gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">   n |= n &gt;&gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">   n |= n &gt;&gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">   n |= n &gt;&gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">   <span class=\"comment\">//经过上述面的 或和位移 运算， n 最终各位都是1 </span></span><br><span class=\"line\">   <span class=\"comment\">//最终结果 +1 也就保证了返回的肯定是 2^n </span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></k,v></p>\n<h4 id=\"2-仅指定期望初始容量的构造函数\"><a href=\"#2-仅指定期望初始容量的构造函数\" class=\"headerlink\" title=\"2.仅指定期望初始容量的构造函数\"></a>2.仅指定期望初始容量的构造函数</h4><p>这里比较简单，就是将指定的初始容量和默认加载因子传递给上述构造方法</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-无参数构造函数\"><a href=\"#3-无参数构造函数\" class=\"headerlink\" title=\"3.无参数构造函数\"></a>3.无参数构造函数</h4>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class=\"comment\">// all other fields defaulted</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这也是我们最常用的一个构造函数，该方法初始化了加载因子为默认值，并没有调动其他的构造方法，跟我们之前说的一样，哈希表的大小以及其他参数都会在第一次调用扩容函数的时候初始化为默认值。</p>\n<h4 id=\"4-传入一个-Map-集合的构造参数\"><a href=\"#4-传入一个-Map-集合的构造参数\" class=\"headerlink\" title=\"4.传入一个 Map 集合的构造参数\"></a>4.传入一个 Map 集合的构造参数</h4><p>这个构造函数比较复杂，在初始化的时候就涉及了添加元素，扩容这两大重要的方法。<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class=\"line\">   putMapEntries(m, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"HashMap-添加元素位置的确定\"><a href=\"#HashMap-添加元素位置的确定\" class=\"headerlink\" title=\"HashMap 添加元素位置的确定\"></a>HashMap 添加元素位置的确定</h3><p>我们都知道HashMap的底层是哈希表，哈希表依靠hash值去确定元素存储位置，我们来看下HashMap的实现</p>\n<p>JDK 1.7中我们得到hash值的扰动函数(键的 hashCode 函数返回值不一定满足哈希表长度的要求,所以要进行扰动处理)<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//4次位运算 + 5次异或运算 </span></span><br><span class=\"line\"><span class=\"comment\">//这种算法可以防止低位不变，高位变化时，造成的 hash 冲突</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object k)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> h = <span class=\"number\">0</span>;</span><br><span class=\"line\">   h ^= k.hashCode(); </span><br><span class=\"line\">   h ^= (h &gt;&gt;&gt; <span class=\"number\">20</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">12</span>);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> h ^ (h &gt;&gt;&gt; <span class=\"number\">7</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>JDK 1.8中得到hash值的函数优化<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 把 key 的 hashCode 方法返回值右移16位，即丢弃低16位，高16位全为0 ，</span></span><br><span class=\"line\"><span class=\"comment\">* 然后在于 hashCode 返回值做异或运算，即高 16 位与低 16 位进行异或运算，</span></span><br><span class=\"line\"><span class=\"comment\">* 这么做可以在数组 table 的 length 比较小的时候，也能保证考虑到高低Bit</span></span><br><span class=\"line\"><span class=\"comment\">* 都参与到 hash 的计算中，同时不会有太大的开销，扰动处理次数也从 4次位</span></span><br><span class=\"line\"><span class=\"comment\">* 运算 + 5次异或运算 降低到 1次位运算 + 1次异或运算</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的扰动函数只是得到了hash的值，还没有确定在Node []数组中的角标，下面这个函数在JDK1.7中，JDK1.8中将这步运算放在了put函数中<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexFor</span><span class=\"params\">(<span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 与运算 优化取模运算(hash % length)</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> h &amp; (length-<span class=\"number\">1</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此函数确定最终元素储存的哈希桶角标位置</p>\n<h3 id=\"HashMap-添加元素\"><a href=\"#HashMap-添加元素\" class=\"headerlink\" title=\"HashMap 添加元素\"></a>HashMap 添加元素</h3><p>puy(K key,V value)函数</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以看到具体的添加行为在 putVal 方法中进行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于 putVal 前三个参数很好理解，第4个参数 onlyIfAbsent 表示只有当对应 key 的位置为空的时候替换元素，一般传 false，第 5 个参数 evict 如果是 false。那么表示是在初始化时调用的:</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">              </span><br><span class=\"line\">   Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">   <span class=\"comment\">//如果是第一添加元素 table = null 则需要扩容</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">       n = (tab = resize()).length;<span class=\"comment\">// n 表示扩容后数组的长度</span></span><br><span class=\"line\">   <span class=\"comment\">//  i = (n - 1) &amp; hash 即上边讲得元素存储在 map 中的数组角标计算</span></span><br><span class=\"line\">   <span class=\"comment\">// 如果对应数组没有元素没发生 hash 碰撞 则直接赋值给数组中 index 位置   </span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">       tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">   <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 发生 hash 碰撞了</span></span><br><span class=\"line\">       Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">        <span class=\"comment\">//如果对应位置有已经有元素了 且 key 是相同的则覆盖元素</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">           ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">           e = p;</span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)<span class=\"comment\">//如果添加当前节点已经为红黑树，则需要转为红黑树中的节点</span></span><br><span class=\"line\">           e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">       <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// hash 值计算出的数组索引相同，但 key 并不同的时候，        // 循环整个单链表</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//遍历到尾部</span></span><br><span class=\"line\">                    <span class=\"comment\">// 创建新的节点，拼接到链表尾部</span></span><br><span class=\"line\">                   p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>); </span><br><span class=\"line\">                   <span class=\"comment\">// 如果添加后 bitCount 大于等于树化阈值后进行哈希桶树化操作</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                       treeifyBin(tab, hash);</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">//如果遍历过程中找到链表中有个节点的 key 与 当前要插入元素的 key 相同，此时 e 所指的节点为需要替换 Value 的节点，并结束循环</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                   ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               <span class=\"comment\">//移动指针    </span></span><br><span class=\"line\">               p = e;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//如果循环完后 e!=null 代表需要替换e所指节点 Value</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">           V oldValue = e.value<span class=\"comment\">//保存原来的 Value 作为返回值</span></span><br><span class=\"line\">           <span class=\"comment\">// onlyIfAbsent 一般为 false 所以替换原来的 Value</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">               e.value = value;</span><br><span class=\"line\">            <span class=\"comment\">//这个方法在 HashMap 中是空实现，在 LinkedHashMap 中有关系   </span></span><br><span class=\"line\">           afterNodeAccess(e);</span><br><span class=\"line\">           <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//操作数增加</span></span><br><span class=\"line\">   ++modCount;</span><br><span class=\"line\">   <span class=\"comment\">//如果 size 大于扩容阈值则表示需要扩容</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">       resize();</span><br><span class=\"line\">   afterNodeInsertion(evict);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以详细的分析一下添加元素的过程:</p>\n<p><img src=\"/picture/HashMapInsert.jpg\" alt=\"HashMap的红黑树\"></p>\n<ol>\n<li>如果 Node[] table 为null，则表示第一次添加元素，需要首次扩容</li>\n<li>计算对应的键值在table表中的索引位置，通过i = (n-1) &amp; hash获得</li>\n<li>判断索引位置是否有元素，没有则直接插入到数组中。如果有元素且key相同，则覆盖value值，这里判断是用的是equals，这也体现了想要正确插入元素就要正确覆写equals的重要性</li>\n<li>如果索引位置的 key 不相同，则需要遍历单链表，如果遍历过如果有与 key 相同的节点，则保存索引，替换 Value；如果没有相同节点，则在但单链表尾部插入新节点。</li>\n<li>插入节点后，链表的长度大于树化阀值，则需要将单链表转换为红黑树</li>\n<li>成功加入节点(添加元素)后，判断是否大约扩容阀值，如果大于则需要扩容</li>\n</ol>\n<h3 id=\"HashMap-的扩容过程\"><a href=\"#HashMap-的扩容过程\" class=\"headerlink\" title=\"HashMap 的扩容过程\"></a>HashMap 的扩容过程</h3><p>再添加元素的时候我们多次提及扩容，下面我们来仔细了解一下HashMap的扩容过程。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">   <span class=\"comment\">// oldTab 指向旧的 table 表</span></span><br><span class=\"line\">   Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">   <span class=\"comment\">// oldCap 代表扩容前 table 表的数组长度，oldTab 第一次添加元素的时候为 null </span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">   <span class=\"comment\">// 旧的扩容阈值</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">   <span class=\"comment\">// 初始化新的阈值和容量</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 如果 oldCap &gt; 0 则会将新容量扩大到原来的2倍，扩容阈值也将扩大到原来阈值的两倍</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 如果旧的容量已经达到最大容量 2^30 那么就不在继续扩容直接返回，将扩容阈值设置到 Integer.MAX_VALUE，并不代表不能装新元素，只是数组长度将不会变化</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">           threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">       &#125;<span class=\"comment\">//新容量扩大到原来的2倍，扩容阈值也将扩大到原来阈值的两倍</span></span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">           newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//oldThr 不为空，代表我们使用带参数的构造方法指定了加载因子并计算了</span></span><br><span class=\"line\">   <span class=\"comment\">//初始初始阈值 会将扩容阈值 赋值给初始容量这里不再是期望容量，</span></span><br><span class=\"line\">   <span class=\"comment\">//但是 &gt;= 指定的期望容量</span></span><br><span class=\"line\">   <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">       newCap = oldThr;</span><br><span class=\"line\">   <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 空参数构造会走这里初始化容量，和扩容阈值 分别是 16 和 12</span></span><br><span class=\"line\">       newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">       newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//如果新的扩容阈值是0，对应的是当前 table 为空，但是有阈值的情况</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算新的扩容阈值</span></span><br><span class=\"line\">       <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">       <span class=\"comment\">// 如果新的容量不大于 2^30 且 ft 不大于 2^30 的时候赋值给 newThr </span></span><br><span class=\"line\">       <span class=\"comment\">//否则 使用 Integer.MAX_VALUE</span></span><br><span class=\"line\">       newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                 (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//更新全局扩容阈值</span></span><br><span class=\"line\">   threshold = newThr;</span><br><span class=\"line\">   <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"rawtypes\"</span>,<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">    <span class=\"comment\">//使用新的容量创建新的哈希表的数组</span></span><br><span class=\"line\">   Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">   table = newTab;</span><br><span class=\"line\">   <span class=\"comment\">//如果老的数组不为空将进行重新插入操作否则直接返回</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历老数组中每个位置的链表或者红黑树重新计算节点位置，插入新数组</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">           Node&lt;K,V&gt; e;<span class=\"comment\">//用来存储对应数组位置链表头节点</span></span><br><span class=\"line\">           <span class=\"comment\">//如果当前数组位置存在元素</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 释放原来数组中的对应的空间</span></span><br><span class=\"line\">               oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">               <span class=\"comment\">// 如果链表只有一个节点，</span></span><br><span class=\"line\">               <span class=\"comment\">//则使用新的数组长度计算节点位于新数组中的角标并插入</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                   newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">               <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)<span class=\"comment\">//如果当前节点为红黑树则需要进一步确定树中节点位于新数组中的位置。</span></span><br><span class=\"line\">                   ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">               <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></span><br><span class=\"line\">                   <span class=\"comment\">//因为扩容是容量翻倍，</span></span><br><span class=\"line\">                   <span class=\"comment\">//原链表上的每个节点 现在可能存放在原来的下标，即low位，</span></span><br><span class=\"line\">                   <span class=\"comment\">//或者扩容后的下标，即high位</span></span><br><span class=\"line\">              <span class=\"comment\">//低位链表的头结点、尾节点</span></span><br><span class=\"line\">              Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">              <span class=\"comment\">//高位链表的头节点、尾节点</span></span><br><span class=\"line\">              Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">              Node&lt;K,V&gt; next;<span class=\"comment\">//用来存放原链表中的节点</span></span><br><span class=\"line\">              <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                  next = e.next;</span><br><span class=\"line\">                  <span class=\"comment\">// 利用哈希值 &amp; 旧的容量，可以得到哈希值去模后，</span></span><br><span class=\"line\">                  <span class=\"comment\">//是大于等于 oldCap 还是小于 oldCap，</span></span><br><span class=\"line\">                  <span class=\"comment\">//等于 0 代表小于 oldCap，应该存放在低位，</span></span><br><span class=\"line\">                  <span class=\"comment\">//否则存放在高位（稍后有图片说明）</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                      <span class=\"comment\">//给头尾节点指针赋值</span></span><br><span class=\"line\">                      <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                          loHead = e;</span><br><span class=\"line\">                      <span class=\"keyword\">else</span></span><br><span class=\"line\">                          loTail.next = e;</span><br><span class=\"line\">                      loTail = e;</span><br><span class=\"line\">                  &#125;<span class=\"comment\">//高位也是相同的逻辑</span></span><br><span class=\"line\">                  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                          hiHead = e;</span><br><span class=\"line\">                      <span class=\"keyword\">else</span></span><br><span class=\"line\">                          hiTail.next = e;</span><br><span class=\"line\">                      hiTail = e;</span><br><span class=\"line\">                  &#125;<span class=\"comment\">//循环直到链表结束</span></span><br><span class=\"line\">              &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">              <span class=\"comment\">//将低位链表存放在原index处，</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                  loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                  newTab[j] = loHead;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"comment\">//将高位链表存放在新index处</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                  hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                  newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整个扩容过程可以概括为两点：</p>\n<ol>\n<li>寻找扩容后数组的大小以及新的扩容阀值</li>\n<li>将原有哈希表拷贝到新的哈希表中</li>\n</ol>\n<h3 id=\"其他添加元素的方法\"><a href=\"#其他添加元素的方法\" class=\"headerlink\" title=\"其他添加元素的方法\"></a>其他添加元素的方法</h3><p>1.批量添加元素，默认加载因子</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class=\"line\">   putMapEntries(m, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>真正批量添加元素的方法为putAll()</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">putAll</span><span class=\"params\">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">   putMapEntries(m, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//同样第二参数代表是否初次创建 table </span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">putMapEntries</span><span class=\"params\">(Map&lt;? extends K, ? extends V&gt; m, <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> s = m.size();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (s &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果哈希表为空则初始化参数扩容阈值</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (table == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// pre-size</span></span><br><span class=\"line\">           <span class=\"keyword\">float</span> ft = ((<span class=\"keyword\">float</span>)s / loadFactor) + <span class=\"number\">1.0F</span>;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> t = ((ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class=\"line\">                    (<span class=\"keyword\">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (t &gt; threshold)</span><br><span class=\"line\">               threshold = tableSizeFor(t);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s &gt; threshold)<span class=\"comment\">//构造方法没有计算 threshold 默认为0 所以会走扩容函数</span></span><br><span class=\"line\">           resize();</span><br><span class=\"line\">        <span class=\"comment\">//将参数中的 map 键值对依次添加到 HashMap 中</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class=\"line\">           K key = e.getKey();</span><br><span class=\"line\">           V value = e.getValue();</span><br><span class=\"line\">           putVal(hash(key), key, value, <span class=\"keyword\">false</span>, evict);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"HashMap-查询元素\"><a href=\"#HashMap-查询元素\" class=\"headerlink\" title=\"HashMap 查询元素\"></a>HashMap 查询元素</h3><p>put和get往往是成对存在的，下面我们来看看hashMap的get方法</p>\n<p>1.根据键值对的key去获取对应的value</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">   Node&lt;K,V&gt; e;</span><br><span class=\"line\">   <span class=\"comment\">//通过 getNode寻找 key 对应的 Value 如果没找到，或者找到的结果为 null 就会返回null 否则会返回对应的 Value</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> (e = getNode(hash(key), key)) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key)</span> </span>&#123;</span><br><span class=\"line\">   Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class=\"keyword\">int</span> n; K k;</span><br><span class=\"line\">   <span class=\"comment\">//现根据 key 的 hash 值去找到对应的链表或者红黑树</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">       (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 如果第一个节点就是,那么直接返回</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp; <span class=\"comment\">// always check first node</span></span><br><span class=\"line\">           ((k = first.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">           <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">        <span class=\"comment\">//如果 对应的位置为红黑树调用红黑树的方法去寻找节点   </span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">               <span class=\"keyword\">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">            <span class=\"comment\">//遍历单链表找到对应的 key 和 Value   </span></span><br><span class=\"line\">           <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                   ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.JDK 1.8新增get方法，在未找到key对应的value值时返回默认值</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">getOrDefault</span><span class=\"params\">(Object key, V defaultValue)</span> </span>&#123;</span><br><span class=\"line\">   Node&lt;K,V&gt; e;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (e = getNode(hash(key), key)) == <span class=\"keyword\">null</span> ? defaultValue : e.value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"HashMap-的删操作\"><a href=\"#HashMap-的删操作\" class=\"headerlink\" title=\"HashMap 的删操作\"></a>HashMap 的删操作</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">   Node&lt;K,V&gt; e;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (e = removeNode(hash(key), key, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>)) == <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">       <span class=\"keyword\">null</span> : e.value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object key, Object value)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//这里传入了value 同时matchValue为true</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> removeNode(hash(key), key, value, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>删除时有两个需要注意的参数</p>\n<ul>\n<li>matchValue : 如果这个值为true则表示只有当Value与第三个Value相同的时候才删除一个节点</li>\n<li><p>movable : 按树的方式删除时的参数</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">removeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key, Object value,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               <span class=\"keyword\">boolean</span> matchValue, <span class=\"keyword\">boolean</span> movable)</span> </span>&#123;</span><br><span class=\"line\">   Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, index;</span><br><span class=\"line\">   <span class=\"comment\">//判断哈希表是否为空，长度是否大于0 对应的位置上是否有元素</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">       (p = tab[index = (n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// node 用来存放要移除的节点， e 表示下个节点 k ，v 每个节点的键值</span></span><br><span class=\"line\">       Node&lt;K,V&gt; node = <span class=\"keyword\">null</span>, e; K k; V v;</span><br><span class=\"line\">       <span class=\"comment\">//如果第一个节点就是我们要找的直接赋值给 node</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">           ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">           node = p;</span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((e = p.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 遍历红黑树找到对应的节点</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">               node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class=\"line\">           <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//遍历对应的链表找到对应的节点</span></span><br><span class=\"line\">               <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                       ((k = e.key) == key ||</span><br><span class=\"line\">                        (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class=\"line\">                       node = e;</span><br><span class=\"line\">                       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   p = e;</span><br><span class=\"line\">               &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 如果找到了节点</span></span><br><span class=\"line\">       <span class=\"comment\">// !matchValue 是否不删除节点</span></span><br><span class=\"line\">       <span class=\"comment\">// (v = node.value) == value ||</span></span><br><span class=\"line\">                            (value != <span class=\"keyword\">null</span> &amp;&amp; value.equals(v))) 节点值是否相同，</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class=\"line\">                            (value != <span class=\"keyword\">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//删除节点                 </span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">               ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class=\"keyword\">this</span>, tab, movable);</span><br><span class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node == p)</span><br><span class=\"line\">               tab[index] = node.next;</span><br><span class=\"line\">           <span class=\"keyword\">else</span></span><br><span class=\"line\">               p.next = node.next;</span><br><span class=\"line\">           ++modCount;</span><br><span class=\"line\">           --size;</span><br><span class=\"line\">           afterNodeRemoval(node);</span><br><span class=\"line\">           <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["Origin Code"],"tags":["HashMap"]},{"title":"String 源码","url":"https://feifaninternet.github.io/2018/06/07/String-源码/","content":"<h3 id=\"String-类\"><a href=\"#String-类\" class=\"headerlink\" title=\"String 类\"></a>String 类</h3><p>String 类被 final 所修饰，为不可变量，并发程序对不可变量非常友好，String 类实现了Serializable,Comparable<stirng>,CharSequence接口。</stirng></p>\n<h3 id=\"String-属性\"><a href=\"#String-属性\" class=\"headerlink\" title=\"String 属性\"></a>String 属性</h3><p>String类中包含一个不可变的char[]数组来存放字符串，一个int型的hash用来存放计算后的哈希值。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** The value is used for character storage. */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span>[] value;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Cache the hash code for the string */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hash; <span class=\"comment\">// Default to 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">6849794470754667710L</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"String-构造函数\"><a href=\"#String-构造函数\" class=\"headerlink\" title=\"String 构造函数\"></a>String 构造函数</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不含参数的构造函数，一般没什么用，因为value是不可变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//参数为String类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(String original)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = original.value;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hash = original.hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//参数为char数组，使用java.utils包中的Arrays类复制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">char</span> value[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从bytes数组中的offset位置开始，将长度为length的字节，以charsetName格式编码，拷贝到value</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">byte</span> bytes[], <span class=\"keyword\">int</span> offset, <span class=\"keyword\">int</span> length, String charsetName)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (charsetName == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"charsetName\"</span>);</span><br><span class=\"line\">    checkBounds(bytes, offset, length);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = StringCoding.decode(charsetName, bytes, offset, length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用public String(byte bytes[], int offset, int length, String charsetName)构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">byte</span> bytes[], String charsetName)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(bytes, <span class=\"number\">0</span>, bytes.length, charsetName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"String-常用方法\"><a href=\"#String-常用方法\" class=\"headerlink\" title=\"String 常用方法\"></a>String 常用方法</h3><h3 id=\"1-equals-方法\"><a href=\"#1-equals-方法\" class=\"headerlink\" title=\"1.equals 方法\"></a>1.equals 方法</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果引用的是同一个对象，直接返回真</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == anObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果不是String类型的数据，返回假</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        String anotherString = (String) anObject;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = value.length;</span><br><span class=\"line\">        <span class=\"comment\">//如果char数组长度不相等，返回假</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> v1[] = value;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">//从后往前单个字符判断，如果有不相等，返回假</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1[i] != v2[i])</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//每个字符都相等，返回真</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码中可以看出是逐一比较字符的，对于超级长的字符串的比较还是非常费时间的。</p>\n<h3 id=\"2-compareTo方法\"><a href=\"#2-compareTo方法\" class=\"headerlink\" title=\"2.compareTo方法\"></a>2.compareTo方法</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(String anotherString)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(String anotherString)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//自身对象字符串长度len1</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = value.length;</span><br><span class=\"line\">    <span class=\"comment\">//被比较对象字符串长度len2</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = anotherString.value.length;</span><br><span class=\"line\">    <span class=\"comment\">//取两个字符串长度的最小值lim</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> lim = Math.min(len1, len2);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v1[] = value;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//从value的第一个字符开始到最小长度lim处为止，如果字符不相等，返回自身（对象不相等处字符-被比较对象不相等字符）</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &lt; lim) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c1 = v1[k];</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c2 = v2[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c1 != c2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c1 - c2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果前面都相等，则返回（自身长度-被比较对象长度）</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> len1 - len2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-hashCode-方法\"><a href=\"#3-hashCode-方法\" class=\"headerlink\" title=\"3.hashCode 方法\"></a>3.hashCode 方法</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hash;</span><br><span class=\"line\">    <span class=\"comment\">//如果hash没有被计算过，并且字符串不为空，则进行hashCode计算</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (h == <span class=\"number\">0</span> &amp;&amp; value.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> val[] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//计算过程</span></span><br><span class=\"line\">        <span class=\"comment\">//s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; value.length; i++) &#123;</span><br><span class=\"line\">            h = <span class=\"number\">31</span> * h + val[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//hash赋值</span></span><br><span class=\"line\">        hash = h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>String类重写了hashCode方法，Object中的hashCode方法是一个Native调用。String类的hashCode是通过多项式计算来的，我们可以通过不同的字符串得到相同的hashCode，所以两个String对象的hashCode相同，并不代表两个String是一样的。</p>\n<h3 id=\"4-startsWith-与-endsWith-方法\"><a href=\"#4-startsWith-与-endsWith-方法\" class=\"headerlink\" title=\"4. startsWith 与 endsWith 方法\"></a>4. startsWith 与 endsWith 方法</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startsWith</span><span class=\"params\">(String prefix,<span class=\"keyword\">int</span> toffset)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startsWith</span><span class=\"params\">(String prefix, <span class=\"keyword\">int</span> toffset)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ta[] = value;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> to = toffset;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> pa[] = prefix.value;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> po = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pc = prefix.value.length;</span><br><span class=\"line\">    <span class=\"comment\">// Note: toffset might be near -1&gt;&gt;&gt;1.</span></span><br><span class=\"line\">    <span class=\"comment\">//如果起始地址小于0或者（起始地址+所比较对象长度）大于自身对象长度，返回假</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((toffset &lt; <span class=\"number\">0</span>) || (toffset &gt; value.length - pc)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//从所比较对象的末尾开始比较</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (--pc &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ta[to++] != pa[po++]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// startsWith 与 endsWith 已巧妙实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startsWith</span><span class=\"params\">(String prefix)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> startsWith(prefix, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">endsWith</span><span class=\"params\">(String suffix)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> startsWith(suffix, value.length - suffix.value.length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>起始比较和末尾比较比较常用，例如在判断一个字符串是不是http协议或者初步判断一个文件是不是mp3文件。</p>\n<h3 id=\"5-concat-方法\"><a href=\"#5-concat-方法\" class=\"headerlink\" title=\"5.concat 方法\"></a>5.concat 方法</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">concat</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">concat</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> otherLen = str.length();</span><br><span class=\"line\">    <span class=\"comment\">//如果被添加的字符串为空，返回对象本身</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (otherLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = value.length;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class=\"line\">    str.getChars(buf, len);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(buf, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>字符串拼接，创建新字符串存储。</p>\n<h3 id=\"6-replace-方法\"><a href=\"#6-replace-方法\" class=\"headerlink\" title=\"6.replace 方法\"></a>6.replace 方法</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">replace</span><span class=\"params\">(<span class=\"keyword\">char</span> oldChar,<span class=\"keyword\">char</span> newChar)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">replace</span><span class=\"params\">(<span class=\"keyword\">char</span> oldChar, <span class=\"keyword\">char</span> newChar)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//新旧值先对比</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldChar != newChar) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = value.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] val = value; <span class=\"comment\">/* avoid getfield opcode */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//找到旧值最开始出现的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (++i &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (val[i] == oldChar) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//从那个位置开始，直到末尾，用新值代替出现的旧值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> buf[] = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[len];</span><br><span class=\"line\">            <span class=\"comment\">//复制从0到旧值最开始出现位置的值</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">                buf[j] = val[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//替换从旧值最开始到字符串最后的所有符合条件的字符</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; len) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> c = val[i];</span><br><span class=\"line\">                buf[i] = (c == oldChar) ? newChar : c;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(buf, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-trim-方法\"><a href=\"#7-trim-方法\" class=\"headerlink\" title=\"7.trim 方法\"></a>7.trim 方法</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">trim</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">trim</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = value.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> st = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] val = value;    <span class=\"comment\">/* avoid getfield opcode */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//找到字符串前段没有空格的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((st &lt; len) &amp;&amp; (val[st] &lt;= <span class=\"string\">' '</span>)) &#123;</span><br><span class=\"line\">        st++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//找到字符串末尾没有空格的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((st &lt; len) &amp;&amp; (val[len - <span class=\"number\">1</span>] &lt;= <span class=\"string\">' '</span>)) &#123;</span><br><span class=\"line\">        len--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果前后都没有出现空格，返回字符串本身</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((st &gt; <span class=\"number\">0</span>) || (len &lt; value.length)) ? substring(st, len) : <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"String-中一些简单的常用方法\"><a href=\"#String-中一些简单的常用方法\" class=\"headerlink\" title=\"String 中一些简单的常用方法\"></a>String 中一些简单的常用方法</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.length == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">charAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((index &lt; <span class=\"number\">0</span>) || (index &gt;= value.length)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> StringIndexOutOfBoundsException(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解释2个String对象内存地址相同\"><a href=\"#解释2个String对象内存地址相同\" class=\"headerlink\" title=\"解释2个String对象内存地址相同\"></a>解释2个String对象内存地址相同</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stringTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String a = <span class=\"string\">\"ab1\"</span>;</span><br><span class=\"line\">    String b = <span class=\"string\">\"ab1\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//结果是true</span></span><br><span class=\"line\">    System.out.println(a == b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原因如下：字符串a为常量，a所指向的地址来自常量池，b所指向的字符串常量会默认调用intern()方法(在方法区中的常量池里通过equals方法寻找等值的对象，如果没有找到则在常量池中开辟一片空间存放字符串并返回该对应String的引用，否则直接返回常量池中已存在String对象的引用。)显而易见，b所指向的地址直接是取的常量池中a的地址，所以会出现相同的情况。</p>\n","categories":["Origin Code"],"tags":["String"]},{"title":"Elasticsearch","url":"https://feifaninternet.github.io/2018/05/24/Elasticsearch/","content":"<h3 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h3><p>找了很久找到了一个很不错的学习资源  <a href=\"https://es.xiaoleilu.com/010_Intro/25_Tutorial_Indexing.html\" target=\"_blank\" rel=\"noopener\">GitBook – Elasticsearch</a><br>springBoot的整合非常简单，就不说了。我们可以了解一下spring data 对elasticsearch 的整合<a href=\"https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#repositories.query-methods\" target=\"_blank\" rel=\"noopener\">Spring date – Elasticsearch</a><br>整合时建议使用5.5.0左右的版本，要特别注意框架版本引起的兼容问题。</p>\n<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Elasticsearch 是一个高度可扩展的开源全文搜索和分析引擎。它可以快速，实时地存储，搜索和分析大量数据。它通常用作支持具有复杂搜索功能和需求的应用程序的底层引擎/技术。</p>\n<p>案例：</p>\n<ul>\n<li>你运营一家在线网上商店，让您的客户可以搜索您销售的产品。在这种情况下，您可以使用Elasticsearch来存储您的整个产品目录和库存，并为其提供搜索和自动填充建议。</li>\n<li>你希望收集日志或交易数据，并且想要分析和挖掘此数据以查找趋势，统计数据，汇总或异常情况。在这种情况下，您可以使用Logstash（Elasticsearch/Logstash/Kibana堆栈的一部分）来收集，汇总和分析数据，然后使用Logstash将此数据提供给Elasticsearch。一旦数据在Elasticsearch中，您就可以运行搜索和聚合来挖掘您感兴趣的任何信息。</li>\n<li>您需要分析/商业智能需求，并且希望快速调查，分析，可视化并针对大量数据提出临时问题（可以考虑数百万或数十亿条记录）。在这种情况下，您可以使用Elasticsearch存储数据，然后使用Kibana（Elasticsearch/Logstash/Kibana堆栈的一部分）来构建自定义仪表板，以便可视化数据对您很重要的各个方面。另外，您可以使用Elasticsearch聚合功能对数据执行复杂的商业智能查询。</li>\n</ul>\n<h3 id=\"Elasticsearch-的基本概念\"><a href=\"#Elasticsearch-的基本概念\" class=\"headerlink\" title=\"Elasticsearch 的基本概念\"></a>Elasticsearch 的基本概念</h3><p>理解 Elasticsearch 的基本概念可以极大的帮助我们简化学习过程</p>\n<ul>\n<li><p>近实时(NRT)<br>Elasticsearch是一个接近实时的搜索平台，这意味着从索引文档的时间到可搜索的时间之间存在轻微的延迟(通常为1秒)。</p>\n</li>\n<li><p>集群<br>集群是一个或者多个节点(服务器)的集合，他们一起保存整个数据，并提供所有节点的联合索引和搜索功能。集群由默认名称为”elasticsearch”的唯一名称标识。此名称很重要，因为如果节点设置为通过名称加入集群，则节点只能成为集群的一部分。<br>确保不要在不同的环境中重复使用相同的集群名称，否则可能会导致节点加入错误的集群。例如，您可以使用logging-dev，logging-stage以及logging-prod 开发，分段和生产集群。<br>请注意，有一个只有一个节点的集群是完全正确的。此外，您还可能拥有多个独立的群集，每个群集都有自己的唯一群集名称。</p>\n</li>\n<li><p>节点<br>节点是属于集群一部分的单个服务器，存储数据并参数集群的索引和搜索功能。每个节点也有一个名称来标识，默认情况下，该名称是在启动时分配给节点的随机通用唯一标识符(UUID)，可以将节点配置为按集群名称加入特定集群，默认情况下每个节点都加入集群elasticsearch。<br>在单个群集中，您可以拥有任意数量的节点。此外，如果网络上当前没有其他Elasticsearch节点正在运行，则默认情况下启动单个节点将形成名为的新单节点群集elasticsearch。</p>\n</li>\n<li><p>索引<br>索引是一些具有相似特征的文档集合。例如，您可以拥有客户数据的索引，产品目录的另一个索引以及订单数据的另一个索引。索引由名称（必须全部为小写）标识，并且此名称用于在对其中的文档执行索引，搜索，更新和删除操作时引用索引。在单个群集中，您可以根据需要定义多个索引。<br>索引相当于mongo 数据库中的集合或者关系型数据库中的库。es 建立索引时的 mapping 字段则相当于mongo 数据库中的表。<br>以 MongoDB 为例，mongo 数据库中有 order 集合，order 下有 info， 其中order_id 为 info 表的索引。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//mongo 数据</span><br><span class=\"line\">use order</span><br><span class=\"line\">db.info.find()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;did&quot;: 490873,</span><br><span class=\"line\">   &quot;order_id&quot;: 3</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//es 数据</span><br><span class=\"line\">&#123;                                                </span><br><span class=\"line\"> &quot;_index&quot;: &quot;order&quot;,                         </span><br><span class=\"line\"> &quot;_type&quot;: &quot;info&quot;,</span><br><span class=\"line\"> &quot;_source&quot;: &#123;</span><br><span class=\"line\">   &quot;did&quot;: 490873,</span><br><span class=\"line\">   &quot;order_id&quot;: 3</span><br><span class=\"line\">   ....</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文档<br>文档是可被索引的基本信息单位。在索引/类型中，您可以根据需要存储任意数量的文档。请注意，尽管文档实际上驻留在索引中，但实际上文档必须被索引/分配给索引内的类型。</p>\n</li>\n<li><p>分片和副本<br>1)索引可能潜在地存储大量数据，这些数据可能会超出单个节点的硬件限制。例如，占用1TB磁盘空间的十亿份文档的单个索引可能不适合单个节点的磁盘，或者可能太慢而无法单独向单个节点提供搜索请求。为了解决这个问题，Elasticsearch提供了将索引细分为多个碎片的能力。当您创建索引时，您可以简单地定义所需的碎片数量。每个分片本身都是一个功能齐全且独立的“索引”，可以在集群中的任何节点上进行托管。<br>当数据量达到单机物理极限时，可以使用分片进行水平扩展，即将数据分割为更小的单元，存储在不同的服务器上，每一个分片负责一部分数据的处理，总的查询将在各个分片查询结束后，汇总结果返回给调用方。因此一个索引的数据会分布在不同的物理机上。<br>分片很重要，主要有两个原因：<br>1.它允许水平分割/缩放内容量<br>2.它允许跨越分片（可能在多个节点上）分发和并行化操作，从而提高性能/吞吐量。<br>在任何时候都可能出现故障的网络/云环境中，非常有用并且强烈建议拥有故障切换机制，以防碎片/节点以某种方式脱机或因任何原因而消失。为此，Elasticsearch允许您将索引碎片的一个或多个副本制作为简称为副本碎片或副本。<br>2)副本集主要用于数据容灾和提高查询的吞吐量，每个分片可以有多个副本集，副本集只是分片的一个复制，可以认为存储了几份相同的数据。分片和其对应的副本集之间，有一个主分片对外提供服务，当主分片故障或其他原因不可用时，将会从副本集中选择一个作为主分片，继续对外提供服务<br>副本很重要，主要有两个原因：<br>1.它在碎片/节点失败的情况下提供高可用性。由于这个原因，需要注意的是，副本分片永远不会分配到与从中复制的原始/主分片相同的节点上。<br>2.它允许您扩展搜索量/吞吐量，因为搜索可以在所有副本上并行执行。<br>如果不指定，es 将默认使用 5 个分片和 1个副本。<br><div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n  webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n  moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n  o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>  <img src=\"/picture/Elasticsearch01.png\" alt=\"分片与副本的关系结构图\" title=\"分片与副本的关系结构图\"><br></div><br>总而言之，每个索引可以分成多个分片。索引也可以被复制为零（意味着没有副本）或更多次。一旦复制，每个索引将具有主分片（从中复制的原始分片）和副本分片（主分片的副本）。在创建索引时，可以为每个索引定义分片和副本的数量。在创建索引之后，您可以随时更改动态副本的数量，但您无法在事后更改碎片的数量。<br>默认情况下，Elasticsearch中的每个索引都分配了5个主分片和1个副本，这意味着如果群集中至少有两个节点，则索引将包含5个主分片和另外5个副本分片（1个完整副本），总共每个索引10个碎片。</p>\n</li>\n</ul>\n<h3 id=\"简单的索引和查询\"><a href=\"#简单的索引和查询\" class=\"headerlink\" title=\"简单的索引和查询\"></a>简单的索引和查询</h3><p>1.创建一个索引</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /customer?pretty</span><br><span class=\"line\">GET / _cat / indices？v</span><br></pre></td></tr></table></figure>\n<p>2.将文档编入索引，id 为 1</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT / customer / _doc / 1?pretty</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;：&quot;John Doe&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在没有显式 ID 的情况下将文档编入索引，将返回实际 ID，Elasticsearch生成</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST  / customer / _doc?pretty</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;：&quot;John Doe&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>响应：</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_index&quot; : &quot;customer&quot;,</span><br><span class=\"line\">  &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class=\"line\">  &quot;_id&quot; : &quot;1&quot;,</span><br><span class=\"line\">  &quot;_version&quot; : 1,</span><br><span class=\"line\">  &quot;result&quot; : &quot;created&quot;,</span><br><span class=\"line\">  &quot;_shards&quot; : &#123;</span><br><span class=\"line\">    &quot;total&quot; : 2,</span><br><span class=\"line\">    &quot;successful&quot; : 1,</span><br><span class=\"line\">    &quot;failed&quot; : 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;_seq_no&quot; : 0,</span><br><span class=\"line\">  &quot;_primary_term&quot; : 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.检索编入索引的文档</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET / customer / _doc / 1?pretty</span><br></pre></td></tr></table></figure>\n<p>响应：</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_index&quot; : &quot;customer&quot;,</span><br><span class=\"line\">  &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class=\"line\">  &quot;_id&quot; : &quot;1&quot;,</span><br><span class=\"line\">  &quot;_version&quot; : 1,</span><br><span class=\"line\">  &quot;found&quot; : true,</span><br><span class=\"line\">  &quot;_source&quot; : &#123; &quot;name&quot;: &quot;John Doe&quot; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Elasticsearch-的数据复制模型\"><a href=\"#Elasticsearch-的数据复制模型\" class=\"headerlink\" title=\"Elasticsearch 的数据复制模型\"></a>Elasticsearch 的数据复制模型</h3><p>每个碎片中的副本被称为复制组，并且在文档增加删除时必须保持同步，这是为了保证从一个副本读取与从另一个副本读取的结果相同。保持分片副本同步并提供读取操作同步的过程就是数据复制模型。</p>\n<p>Elasticsearch的数据复制模型基于主要备份模型，在微软研究院的<a href=\"https://www.microsoft.com/en-us/research/publication/pacifica-replication-in-log-based-distributed-storage-systems/\" target=\"_blank\" rel=\"noopener\">PacificA论文</a>中有很好的描述。该模型基于具有充当主碎片的复制组中的单个副本。其他副本称为副本碎片。主要作为所有索引操作的主要入口点。它负责验证它们并确保它们是正确的。一旦索引操作被主服务器接受，主服务器也负责将操作复制到其他副本。</p>\n<h4 id=\"基本写入模型\"><a href=\"#基本写入模型\" class=\"headerlink\" title=\"基本写入模型\"></a>基本写入模型</h4><p>Elasticsearch中的每个索引操作首先使用路由（通常基于文档ID）解析到复制组。一旦确定了复制组，操作就会在内部转发到组的当前主分片。主分片负责验证操作并将其转发给其他副本。由于副本可以脱机，因此主节点不需要复制到所有副本。相反，Elasticsearch维护应该接收操作的分片副本列表。该列表称为同步副本并由主节点维护。顾名思义，这是一组“好”的分片副本，保证已经处理了已经向用户确认的所有索引和删除操作。主要负责维护此不变量，因此必须将所有操作复制到此集合中的每个副本。</p>\n<p>主要碎片遵循以下基本流程：</p>\n<ol>\n<li>如果结构无效，验证传入操作并拒绝它（例如：有一个对象字段，其中数字是预期的）</li>\n<li>在本地执行操作，即索引或删除相关文档。这也将验证字段的内容并在需要时拒绝（例如：关键字值在Lucene中索引太长）。</li>\n<li>将操作转发到当前同步副本集中的每个副本。如果有多个副本，这是并行完成的。</li>\n<li>一旦所有副本都成功执行操作并响应主服务器，主服务器就会确认向客户端成功完成请求。</li>\n</ol>\n<h4 id=\"基本读取模型\"><a href=\"#基本读取模型\" class=\"headerlink\" title=\"基本读取模型\"></a>基本读取模型</h4><p>Elasticsearch中的读取操作可以通过ID进行非常轻量级的查找，也可以通过复杂的聚合进行繁重的搜索请求，这些请求会占用不重要的CPU功率。主要备份模型的一个优点是它可以保持所有分片副本一致（除飞行操作外）。因此，单个同步副本足以满足读取请求。</p>\n<p>当节点收到读取请求时，该节点负责将其转发到保存相关分片的节点，整理响应并响应客户端。我们称该节点为该请求的协调节点。基本流程如下：</p>\n<ol>\n<li>将读取请求解析为相关的分片。请注意，由于大多数搜索将被发送到一个或多个索引，它们通常需要从多个碎片中读取，每个碎片表示不同的数据子集。</li>\n<li>从分片复制组中选择每个相关分片的活动副本。这可以是主要的或副本。默认情况下，Elasticsearch只会在分片之间循环。</li>\n<li>将碎片级读取请求发送到选定的副本。</li>\n<li>结合结果并做出回应。请注意，在通过ID查找得到的情况下，只有一个分片是相关的，并且该步骤可以被跳过。</li>\n</ol>\n","categories":["Expand"],"tags":["Elastic"]},{"title":"JQuery zTree树插件","url":"https://feifaninternet.github.io/2018/05/24/JQuery-zTree树插件/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>zTree是一个依靠JQuery实现的多功能树插件。优异的性能，灵活的配置，多功能的组合是zTree的优点。</p>\n<ul>\n<li>特点：</li>\n</ul>\n<ol>\n<li>zTree 3.x 将核心代码按照功能进行分割，不需要的代码可以不用加载</li>\n<li>采用延迟加载技术，上万节点轻松加载</li>\n<li>兼容IE,Chrome,Safari等浏览器</li>\n<li>支持静态和Ajax异步加载节点数据</li>\n<li>支持任意更换皮肤，自定义图标</li>\n<li>支持及其灵活的checkbox或radio选择功能</li>\n<li>提供多种事件响应回调</li>\n<li>灵活的编辑功能，可随意拖拽节点，还可以多节点拖拽</li>\n<li>在一个页面内同时生成多个Tree实例   </li>\n<li>简单的参数配置实现灵活多变的功能</li>\n</ol>\n<p><a href=\"http://www.treejs.cn/v3/api.php\" target=\"_blank\" rel=\"noopener\">zTree官方文档</a></p>\n<h3 id=\"zTree-的使用\"><a href=\"#zTree-的使用\" class=\"headerlink\" title=\"zTree 的使用\"></a>zTree 的使用</h3><ul>\n<li>引入资源：向页面中引入JQuery的js文件，zTree的js文件和CSS文件</li>\n<li><p>页面添加zTree的容器，class属性为ztree</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"treeDemo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ztree\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引入数据：zTree可以解析json格式的数据，有两种方式可以把数据传给zTree组件来生成树状结构。</p>\n</li>\n</ul>\n<p>1.直接把json数据传给组件</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $.fn.zTree.init($(<span class=\"string\">\"#treeDemo\"</span>), setting, zNodes);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>2.异步获取json格式数据，第三个参数传null或者空着</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $.fn.zTree.init($(<span class=\"string\">\"#treeDemo\"</span>), setting, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用 Demo</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> setting = &#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        key : &#123;</span><br><span class=\"line\">            title : <span class=\"string\">\"c01name\"</span>, <span class=\"comment\">//鼠标悬停显示的信息</span></span><br><span class=\"line\">            name : <span class=\"string\">\"c01name\"</span> <span class=\"comment\">//网页上显示出节点的名称</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        simpleData: &#123;</span><br><span class=\"line\">            enable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            idKey: <span class=\"string\">\"c01id\"</span>, <span class=\"comment\">//修改默认的ID为自己的ID</span></span><br><span class=\"line\">            pIdKey: <span class=\"string\">\"c01parentid\"</span>,<span class=\"comment\">//修改默认父级ID为自己数据的父级ID</span></span><br><span class=\"line\">            rootPId: <span class=\"number\">000</span>     <span class=\"comment\">//根节点的ID</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>有时候异步处理得到的数据并不是一个单纯的jsonArray数据，我们需要对它进行一个简单的提取操作：</p>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> setting = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span>: &#123;</span><br><span class=\"line\">        enable: <span class=\"literal\">true</span>,<span class=\"comment\">//采用异步加载</span></span><br><span class=\"line\">        dataFilter: ajaxDataFilter,    <span class=\"comment\">//预处理数据</span></span><br><span class=\"line\">        url : <span class=\"string\">\"http://127.0.0.1/WeChat/admin/C01Action_listC01.action\"</span>,</span><br><span class=\"line\">        dataType : <span class=\"string\">\"json\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data : &#123;</span><br><span class=\"line\">        key : &#123;</span><br><span class=\"line\">            title : <span class=\"string\">\"c01name\"</span>,    </span><br><span class=\"line\">            name : <span class=\"string\">\"c01name\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        simpleData : &#123;</span><br><span class=\"line\">            enable : <span class=\"literal\">true</span>,</span><br><span class=\"line\">            idKey : <span class=\"string\">\"c01id\"</span>,</span><br><span class=\"line\">            pIdKey : <span class=\"string\">\"c01parentid\"</span>,</span><br><span class=\"line\">            rootPid : <span class=\"number\">000</span> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    callback : &#123;</span><br><span class=\"line\">        beforeClick: zTreeBeforeClick,</span><br><span class=\"line\">        onClick : zTreeOnClick,</span><br><span class=\"line\">        onAsyncSuccess: zTreeOnAsyncSuccess <span class=\"comment\">//异步加载完成调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/* 获取返回的数据，进行预操作 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajaxDataFilter</span>(<span class=\"params\">treeId, parentNode, responseData</span>) </span>&#123;</span><br><span class=\"line\">    responseData = responseData.jsonArray;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> responseData;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//异步加载完成时运行，此方法将所有的节点打开</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zTreeOnAsyncSuccess</span>(<span class=\"params\">event, treeId, msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> treeObj = $.fn.zTree.getZTreeObj(<span class=\"string\">\"treeDemo\"</span>);</span><br><span class=\"line\">    treeObj.expandAll(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用案例：</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">HTML</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">HEAD</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TITLE</span>&gt;</span> zTree Demo <span class=\"tag\">&lt;/<span class=\"name\">TITLE</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"zTreeStyle/zTreeStyle.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery-1.4.2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.ztree.core-3.x.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SCRIPT</span> <span class=\"attr\">LANGUAGE</span>=<span class=\"string\">\"JavaScript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> zTreeObj;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> setting = &#123;&#125;; <span class=\"comment\">// zTree 的参数配置，后面详解</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> zNodes = [ <span class=\"comment\">// zTree 的数据属性，此处使用标准json格式</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">\"test1\"</span>, <span class=\"attr\">open</span>: <span class=\"literal\">true</span>, <span class=\"attr\">children</span>: [</span></span><br><span class=\"line\"><span class=\"javascript\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"test1_1\"</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"test1_2\"</span> &#125;]</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    name: <span class=\"string\">\"test2\"</span>, <span class=\"attr\">open</span>: <span class=\"literal\">true</span>, <span class=\"attr\">children</span>: [</span></span><br><span class=\"line\"><span class=\"javascript\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"test2_1\"</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"test2_2\"</span> &#125;]</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125; ];</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    zTreeObj = $.fn.zTree.init($(<span class=\"string\">\"#treeDemo\"</span>), setting, zNodes); <span class=\"comment\">//初始化zTree，三个参数一次分别是容器(zTree 的容器 className 别忘了设置为 \"ztree\")、参数配置、数据源</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">SCRIPT</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">HEAD</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">BODY</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"treeDemo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ztree\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">BODY</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果图如下：</p>\n<p><img src=\"/picture/zTree.png\" alt=\"菜单示例图\"></p>\n<p>详细应用请参考<a href=\"http://www.treejs.cn/v3/api.php\" target=\"_blank\" rel=\"noopener\">zTree官方文档</a></p>\n","categories":["Expand"],"tags":["zTree"]},{"title":"Gradle版本控制","url":"https://feifaninternet.github.io/2018/05/14/Gradle版本控制/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Gradle是一个基于Maven概念的项目自动化构建工具，它使用一个基于Groovy的特定域语言(DSL)来声明项目设置，抛弃了基于xml的繁琐配置，支持传递性依赖，支持多工程构建。</p>\n<h3 id=\"Gradle-构建脚本\"><a href=\"#Gradle-构建脚本\" class=\"headerlink\" title=\"Gradle 构建脚本\"></a>Gradle 构建脚本</h3><p>可以通过指定一个快捷键（&lt;&lt;符号表示）到 doLast 语句来简化 helloword 任务。 如果将快捷方式添加到上述 helloword 任务，它看起来如下面脚本。</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task helloword &lt;&lt; &#123;</span><br><span class=\"line\">   println <span class=\"string\">'Yiibai gradle qick start'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <figure class=\"highlight gradle\"><figcaption><span>-q helloword``` 执行上面的脚本，打印字符串\"Yiibai gradle qick start\";</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 依赖任务</span><br><span class=\"line\"></span><br><span class=\"line\">   ```groovy</span><br><span class=\"line\">    <span class=\"keyword\">task</span> hello &lt;&lt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">println</span> <span class=\"string\">'Hello world!'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">task</span> intro(dependsOn: hello) &lt;&lt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">println</span> <span class=\"string\">\"I'm Gradle\"</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行 intro 任务，输出如下 :</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:/worksp/yiibai.com/gradle-3.1/study/script&gt;gradle -q intro</span><br><span class=\"line\">Hello world!</span><br><span class=\"line\">I&apos;m Gradle</span><br></pre></td></tr></table></figure>\n<p>通过闭包添加任务依赖 :</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task taskX &lt;&lt; &#123;</span><br><span class=\"line\">   println <span class=\"string\">'taskX'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">taskX.dependsOn &#123;</span><br><span class=\"line\">   tasks.findAll &#123; </span><br><span class=\"line\">     task -&gt; task.name.startsWith(<span class=\"string\">'lib'</span>) </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task lib1 &lt;&lt; &#123;</span><br><span class=\"line\">   println <span class=\"string\">'lib1'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task lib2 &lt;&lt; &#123;</span><br><span class=\"line\">   println <span class=\"string\">'lib2'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">task notALib &lt;&lt; &#123;</span><br><span class=\"line\">   println <span class=\"string\">'notALib'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行taskX,可得一下结果</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:/worksp/yiibai.com/gradle-3.1/study/script&gt;gradle -q taskX</span><br><span class=\"line\">lib1</span><br><span class=\"line\">lib2</span><br><span class=\"line\">taskX</span><br></pre></td></tr></table></figure>\n<p>使用关键字description向任务添加描述 :</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task copy(<span class=\"string\">type:</span> Copy) &#123;</span><br><span class=\"line\">   description <span class=\"string\">'Copies the resource directory to the target directory.'</span></span><br><span class=\"line\">   from <span class=\"string\">'resources'</span></span><br><span class=\"line\">   into <span class=\"string\">'target'</span></span><br><span class=\"line\">   include(<span class=\"string\">'**/*.txt'</span>, <span class=\"string\">'**/*.xml'</span>, <span class=\"string\">'**/*.properties'</span>)</span><br><span class=\"line\">   println(<span class=\"string\">\"description applied\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Gradle-依赖管理\"><a href=\"#Gradle-依赖管理\" class=\"headerlink\" title=\"Gradle 依赖管理\"></a>Gradle 依赖管理</h3><h4 id=\"1-外部依赖\"><a href=\"#1-外部依赖\" class=\"headerlink\" title=\"1.外部依赖\"></a>1.外部依赖</h4><p>Gradle遵循一些特殊语法来定义依赖关系。 以下脚本定义了两个依赖项，一个是Hibernate core 3.6.7，第二个是Junit 4.0和更高版本。如下面的代码所示，可在build.gradle文件中使用此代码。</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'java'</span></span><br><span class=\"line\"></span><br><span class=\"line\">repositories&#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies&#123;</span><br><span class=\"line\">    compile <span class=\"string\">group:</span> <span class=\"string\">'org.hibernate'</span>,<span class=\"string\">name:</span> <span class=\"string\">'hibernate-core'</span>,<span class=\"string\">version:</span> <span class=\"string\">'3.6.7.Final'</span></span><br><span class=\"line\">    testCompile <span class=\"string\">group:</span> <span class=\"string\">'junit'</span>,<span class=\"string\">name:</span> <span class=\"string\">'junit'</span>,<span class=\"string\">version:</span> <span class=\"string\">'4.+'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"存储库\"><a href=\"#存储库\" class=\"headerlink\" title=\"存储库\"></a>存储库</h4><p>在添加外部依赖关系时， Gradle在存储库中查找它们。 存储库只是文件的集合，按分组，名称和版本来组织构造。 默认情况下，Gradle不定义任何存储库。 我们必须至少明确地定义一个存储库。 下面的代码片段定义了如何定义 maven 仓库。 在build.gradle文件中使用此代码。</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories&#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面的代码是定义远程maven</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories&#123;</span><br><span class=\"line\">    maven&#123;</span><br><span class=\"line\">        url <span class=\"string\">\"http://repo.mycompany.com/maven2\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"发布文件\"><a href=\"#发布文件\" class=\"headerlink\" title=\"发布文件\"></a>发布文件</h4><p>依赖关系配置也可用于发布文件，这些已经发布的文件成为工件。但是需要告诉Gradle在哪里发布文件。可以通过将存储库附加到上传存档任务来实现此目的。 请查看以下用于发布Maven存储库的语法。 执行时，Gradle将根据项目需求生成并上传Pom.xml。</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'maven'</span></span><br><span class=\"line\"></span><br><span class=\"line\">uploadArchives&#123;</span><br><span class=\"line\">    repositories&#123;</span><br><span class=\"line\">        mavenDeployer&#123;</span><br><span class=\"line\">            repository(<span class=\"string\">url:</span> <span class=\"string\">\"file://localhost/tmp/myRepo/\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>Gradle 中有2种插件：脚本插件和二进制插件。脚本插件是一个额外的构建脚本，它提供了一种声明性方法来操作构建，通常在构建中使用。二进制插件是实现插进接口并采用编程方法来操作构建的类。二进制插件可以驻留在插件JAR中的一个构建脚本和项目层次结构或外部</p>\n<h4 id=\"脚本插件\"><a href=\"#脚本插件\" class=\"headerlink\" title=\"脚本插件\"></a>脚本插件</h4><p>脚本插件可以从本地文件系统上的脚本或远程位置应用。文件系统位置相对于项目目录，而远程脚本位置指定HTTP URL。看看下面的代码片段。它将other.gradle插件用于构建脚本。</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">from:</span> <span class=\"string\">'other.gradle'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"二进制插件\"><a href=\"#二进制插件\" class=\"headerlink\" title=\"二进制插件\"></a>二进制插件</h4><p>每个插件由插件标识。一些核心插件是使用短名称来应用它，一些社区插件是使用插件ID的完全限定名称。有时它允许指定一个插件类。</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> javaPlugin</span><br></pre></td></tr></table></figure>\n<p>使用短名称应用核心插件<br>   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins&#123;</span><br><span class=\"line\">    id  <span class=\"string\">'java'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用短名称应用社区插件<br>   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">   id <span class=\"string\">\"com.yiibai.bintray\"</span> version <span class=\"string\">\"0.1.0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"执行多个任务\"><a href=\"#执行多个任务\" class=\"headerlink\" title=\"执行多个任务\"></a>执行多个任务</h3><p>Gradle可以从单个构建文件执行多个任务。使用Gradle命令处理构建文件，此命令将按照顺序编译每个命令，并使用不同的选项执行每个任务以及依赖关系。<br>如图所示的任务关系</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/GradleRefer.png\" alt=\"相互依赖的任务\" title=\"相互依赖的任务\"><br></div>\n\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task task1 &lt;&lt; &#123;</span><br><span class=\"line\">   println <span class=\"string\">'compiling source #1'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task task2(<span class=\"string\">dependsOn:</span> task1) &lt;&lt; &#123;</span><br><span class=\"line\">   println <span class=\"string\">'compiling unit tests #2'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task task3(<span class=\"string\">dependsOn:</span> [task1, task2]) &lt;&lt; &#123;</span><br><span class=\"line\">   println <span class=\"string\">'running unit tests #3'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task task4(<span class=\"string\">dependsOn:</span> [task1, task3]) &lt;&lt; &#123;</span><br><span class=\"line\">   println <span class=\"string\">'building the distribution #4'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"排除任务\"><a href=\"#排除任务\" class=\"headerlink\" title=\"排除任务\"></a>排除任务</h4><p>使用 -X 命令排除某任务的编译执行,比如排除任务1：</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle task4 -x task1</span><br></pre></td></tr></table></figure>\n<h4 id=\"发生故障时继续构建\"><a href=\"#发生故障时继续构建\" class=\"headerlink\" title=\"发生故障时继续构建\"></a>发生故障时继续构建</h4><p>Gradle将在任何任务失败时立即终止执行。我们可以使用 -continue 命令来使Gradle发生故障时继续执行，假设一个任务失败，那么相关的后续依赖任务也不会被执行。</p>\n<h3 id=\"列出项目\"><a href=\"#列出项目\" class=\"headerlink\" title=\"列出项目\"></a>列出项目</h3>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:/worksp/yiibai.com/gradle-3.1/study/script&gt;gradle -q projects</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">Root project</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Root project &apos;script&apos;</span><br><span class=\"line\">No sub-projects</span><br><span class=\"line\">    </span><br><span class=\"line\">To see a list of the tasks of a project, run gradle &lt;project-path&gt;:tasks</span><br><span class=\"line\">For example, try running gradle :tasks</span><br></pre></td></tr></table></figure>\n<h3 id=\"列出任务\"><a href=\"#列出任务\" class=\"headerlink\" title=\"列出任务\"></a>列出任务</h3>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle -q tasks --all</span><br></pre></td></tr></table></figure>\n<h3 id=\"Gradle-构建-JAVA-项目\"><a href=\"#Gradle-构建-JAVA-项目\" class=\"headerlink\" title=\"Gradle 构建 JAVA 项目\"></a>Gradle 构建 JAVA 项目</h3><p>首先我们要添加JAVA插件</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'java'</span></span><br></pre></td></tr></table></figure>\n<p>SourceSets可用于指定不同的项目结构。例如，指定源代码存储在src文件夹中，而不是在src/main/java中。 看看下面的目录结构。</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;java&apos;</span><br><span class=\"line\">sourceSets &#123;</span><br><span class=\"line\">   main &#123;</span><br><span class=\"line\">      java &#123;</span><br><span class=\"line\">         srcDir &apos;src&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   test &#123;</span><br><span class=\"line\">      java &#123;</span><br><span class=\"line\">         srcDir &apos;test&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化任务执行\"><a href=\"#初始化任务执行\" class=\"headerlink\" title=\"初始化任务执行\"></a>初始化任务执行</h3><p>Gradle还不支持多个项目模板。但它提供了一个init来初始化任务来创建一个新的Gradle项目的结构。如果没有指定其他参数，任务将创建一个Gradle项目，其中包含gradle包装器文件，build.gradle和settings.gradle文件。当使用java-library作为值并添加–type参数时，将创建一个java项目结构，build.gradle文件包含带有Junit的某个Java模板。 看看下面build.gradle文件的代码</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'java'</span></span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">   jcenter()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">   compile <span class=\"string\">'org.slf4j:slf4j-api:1.7.12'</span></span><br><span class=\"line\">   testCompile <span class=\"string\">'junit:junit:4.12'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在仓库(repositories)这部分中，它定义了要从哪里找到依赖。Jcenter是为了解决依赖问题。 依赖关系（dependencies）部分用于提供有关外部依赖关系的信息。</p>\n<h3 id=\"指定-JAVA-版本\"><a href=\"#指定-JAVA-版本\" class=\"headerlink\" title=\"指定 JAVA 版本\"></a>指定 JAVA 版本</h3><p>version和sourceCompatibility属性用于设置JAVA的版本和目标JRE</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version = 0.1.1</span><br><span class=\"line\">sourceCompatibility = 1.8</span><br></pre></td></tr></table></figure>\n<h3 id=\"Gradle-构建多模块项目\"><a href=\"#Gradle-构建多模块项目\" class=\"headerlink\" title=\"Gradle 构建多模块项目\"></a>Gradle 构建多模块项目</h3>","categories":["Expand"],"tags":["Gradle"]},{"title":"消息队列之 Kafka","url":"https://feifaninternet.github.io/2018/04/04/消息队列之-Kafka/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Kafka是一个分布式、支持分区的（partition）、多副本的（replica），基于zookeeper协调的分布式消息系统，它的最大的特性就是可以实时的处理大量数据以满足各种需求场景：比如基于hadoop的批处理系统、低延迟的实时系统、storm/Spark流式处理引擎，web/nginx日志、访问日志，消息服务等等。<br>详见<a href=\"http://kafka.apache.org/intro\" target=\"_blank\" rel=\"noopener\">Apache 官方 Kafka 文档</a></p>\n<h3 id=\"Kafka-的特性\"><a href=\"#Kafka-的特性\" class=\"headerlink\" title=\"Kafka 的特性\"></a>Kafka 的特性</h3><ul>\n<li>高吞吐量、低延迟：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒，每个topic可以分多个partition, consumer group 对partition进行consume操作。</li>\n<li>可扩展性：kafka集群支持热扩展</li>\n<li>持久性、可靠性：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失</li>\n<li>容错性：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）</li>\n<li>高并发：支持数千个客户端同时读写</li>\n</ul>\n<h3 id=\"Kafka-使用场景\"><a href=\"#Kafka-使用场景\" class=\"headerlink\" title=\"Kafka 使用场景\"></a>Kafka 使用场景</h3><ul>\n<li>日志收集：一个公司可以用Kafka可以收集各种服务的log，通过kafka以统一接口服务的方式开放给各种consumer，例如hadoop、Hbase、Solr等。</li>\n<li>消息系统：解耦和生产者和消费者、缓存消息等。</li>\n<li>用户活动跟踪：Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖掘。</li>\n<li>运营指标：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告。</li>\n<li>流式处理：比如spark streaming和storm</li>\n<li>事件源</li>\n</ul>\n<h3 id=\"Kafka-设计思想\"><a href=\"#Kafka-设计思想\" class=\"headerlink\" title=\"Kafka 设计思想\"></a>Kafka 设计思想</h3><h4 id=\"Broker-Leader的选举\"><a href=\"#Broker-Leader的选举\" class=\"headerlink\" title=\"Broker Leader的选举\"></a>Broker Leader的选举</h4><p>Kakfa Broker集群受Zookeeper管理。所有的Kafka Broker节点一起去Zookeeper上注册一个临时节点，因为只有一个Kafka Broker会注册成功，其他的都会失败，所以这个成功在Zookeeper上注册临时节点的这个Kafka Broker会成为Kafka Broker Controller，其他的Kafka broker叫Kafka Broker follower。（这个过程叫Controller在ZooKeeper注册Watch）。这个Controller会监听其他的Kafka Broker的所有信息，如果这个kafka broker controller宕机了，在zookeeper上面的那个临时节点就会消失，此时所有的kafka broker又会一起去Zookeeper上注册一个临时节点，因为只有一个Kafka Broker会注册成功，其他的都会失败，所以这个成功在Zookeeper上注册临时节点的这个Kafka Broker会成为Kafka Broker Controller，其他的Kafka broker叫Kafka Broker follower。例如：一旦有一个broker宕机了，这个kafka broker controller会读取该宕机broker上所有的partition在zookeeper上的状态，并选取ISR列表中的一个replica作为partition leader（如果ISR列表中的replica全挂，选一个幸存的replica作为leader; 如果该partition的所有的replica都宕机了，则将新的leader设置为-1，等待恢复，等待ISR中的任一个Replica“活”过来，并且选它作为Leader；或选择第一个“活”过来的Replica（不一定是ISR中的）作为Leader），这个broker宕机的事情，kafka controller也会通知zookeeper，zookeeper就会通知其他的kafka broker。</p>\n<h4 id=\"Consumergroup\"><a href=\"#Consumergroup\" class=\"headerlink\" title=\"Consumergroup\"></a>Consumergroup</h4><p>各个consumer（consumer 线程）可以组成一个组（Consumer group），partition中的每个message只能被组（Consumer group）中的一个consumer（consumer 线程）消费，如果一个message可以被多个consumer（consumer 线程）消费的话，那么这些consumer必须在不同的组。Kafka不支持一个partition中的message由两个或两个以上的同一个consumer group下的consumer thread来处理，除非再启动一个新的consumer group。所以如果想同时对一个topic做消费的话，启动多个consumer group就可以了，但是要注意的是，这里的多个consumer的消费都必须是顺序读取partition里面的message，新启动的consumer默认从partition队列最头端最新的地方开始阻塞的读message。它不能像AMQ那样可以多个BET作为consumer去互斥的（for update悲观锁）并发处理message，这是因为多个BET去消费一个Queue中的数据的时候，由于要保证不能多个线程拿同一条message，所以就需要行级别悲观所（for update）,这就导致了consume的性能下降，吞吐量不够。而kafka为了保证吞吐量，只允许同一个consumer group下的一个consumer线程去访问一个partition。如果觉得效率不高的时候，可以加partition的数量来横向扩展，那么再加新的consumer thread去消费。如果想多个不同的业务都需要这个topic的数据，起多个consumer group就好了，大家都是顺序的读取message，offsite的值互不影响。这样没有锁竞争，充分发挥了横向的扩展性，吞吐量极高。这也就形成了分布式消费的概念。</p>\n","categories":["Expand"],"tags":["MQ"]},{"title":"JAVA设计模式","url":"https://feifaninternet.github.io/2018/04/03/JAVA设计模式/","content":"<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>创建型模式(5种)：工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式。</li>\n<li>结构型模式(7种)：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式。</li>\n<li>行为性模式(11种)：策略模式，模板方法模式，观察者模式，迭代子模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，中介者模式，解释器模式。</li>\n</ul>\n<h3 id=\"设计模式遵循的原则\"><a href=\"#设计模式遵循的原则\" class=\"headerlink\" title=\"设计模式遵循的原则\"></a>设计模式遵循的原则</h3><ol>\n<li>开闭原则：对扩展开放，对修改关闭</li>\n<li>里氏代换原则：只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</li>\n<li>依赖倒转原则：这个是开闭原则的基础，对接口编程，依赖于抽象而不依赖于具体。</li>\n<li>接口隔离原则：使用多个隔离的接口来降低耦合度。</li>\n<li>迪米特法则(最少知道原则)：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立</li>\n<li>合成复用原则：原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。</li>\n</ol>\n<h3 id=\"1-工厂模式\"><a href=\"#1-工厂模式\" class=\"headerlink\" title=\"1.工厂模式\"></a>1.工厂模式</h3><p>常用的工厂模式是静态工厂，利用static方法，作为一种类似于常见的工具类Utils等辅助效果，一般情况下工厂类不需要实例化。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">food</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">implements</span> <span class=\"title\">food</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">implements</span> <span class=\"title\">food</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">implements</span> <span class=\"title\">food</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">StaticFactory</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> food <span class=\"title\">getA</span><span class=\"params\">()</span></span>&#123;  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> A(); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> food <span class=\"title\">getB</span><span class=\"params\">()</span></span>&#123;  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> B(); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> food <span class=\"title\">getC</span><span class=\"params\">()</span></span>&#123;  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> C(); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//客户端代码只需要将相应的参数传入即可得到对象</span></span><br><span class=\"line\">    <span class=\"comment\">//用户不需要了解工厂类内部的逻辑。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        food x = <span class=\"keyword\">null</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( name.equals(<span class=\"string\">\"A\"</span>)) &#123;</span><br><span class=\"line\">            x = StaticFactory.getA();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( name.equals(<span class=\"string\">\"B\"</span>))&#123;</span><br><span class=\"line\">            x = StaticFactory.getB();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            x = StaticFactory.getC();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-抽象工厂模式\"><a href=\"#2-抽象工厂模式\" class=\"headerlink\" title=\"2.抽象工厂模式\"></a>2.抽象工厂模式</h3><p>一个基础接口定义了功能，每个实现接口的子类就是产品，然后定义一个工厂接口，实现了工厂接口的就是工厂，这时候，接口编程的优点就出现了，我们可以新增产品类，只需要同时新增一个工厂类，客户端就可以轻松调用新产品的代码。<br>抽象工厂的灵活性就体现在，无需改动原有的代码就可以轻松的新增扩展类。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">food</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">implements</span> <span class=\"title\">food</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">implements</span> <span class=\"title\">food</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">produce</span></span>&#123; <span class=\"function\">food <span class=\"title\">get</span><span class=\"params\">()</span></span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryForA</span> <span class=\"keyword\">implements</span> <span class=\"title\">produce</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> food <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryForB</span> <span class=\"keyword\">implements</span> <span class=\"title\">produce</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> food <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ClientCode</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        food x= <span class=\"keyword\">new</span> FactoryForA().get();</span><br><span class=\"line\">        x = <span class=\"keyword\">new</span> FactoryForB().get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-单例模式\"><a href=\"#3-单例模式\" class=\"headerlink\" title=\"3.单例模式\"></a>3.单例模式</h3><p>在内部创建一个实例，构造器设置为private，所有方法均在该实例上改动，在创建上要注意类的实例化只能执行一次，可以使用Synchronized关键字或者内部类的机制来实现。</p>\n<h4 id=\"懒汉单例模式\"><a href=\"#懒汉单例模式\" class=\"headerlink\" title=\"懒汉单例模式\"></a>懒汉单例模式</h4><p>在类记载时不初始化，类加载快，获取对象速度慢。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo1 instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo1</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 去掉 synchronized 后线程不安全 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> SingletonDemo1 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> SingletonDemo1();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"饿汉单例模式\"><a href=\"#饿汉单例模式\" class=\"headerlink\" title=\"饿汉单例模式\"></a>饿汉单例模式</h4><p>在类加载时就完成了初始化，类加载慢，获取对象速度快，基于classLoader机制避免了多线程的同步问题。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo2 instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        instance = <span class=\"keyword\">new</span> SingletonDemo4();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo2</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo2 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDemo3 instance = <span class=\"keyword\">new</span> SingletonDemo3();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo3</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDemo3 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonDemo5 instance = <span class=\"keyword\">new</span> SingletonDemo5();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDemo5</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonDemo5 <span class=\"title\">getInsatance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-建造者模式\"><a href=\"#4-建造者模式\" class=\"headerlink\" title=\"4.建造者模式\"></a>4.建造者模式</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">        String name = <span class=\"keyword\">null</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> number = -<span class=\"number\">1</span> ;</span><br><span class=\"line\">        String sex = <span class=\"keyword\">null</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> age = -<span class=\"number\">1</span> ;</span><br><span class=\"line\">        String school = <span class=\"keyword\">null</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//构建器，利用构建器作为参数来构建Student对象</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentBuilder</span></span>&#123;</span><br><span class=\"line\">            String name = <span class=\"keyword\">null</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> number = -<span class=\"number\">1</span> ;</span><br><span class=\"line\">            String sex = <span class=\"keyword\">null</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> age = -<span class=\"number\">1</span> ;</span><br><span class=\"line\">            String school = <span class=\"keyword\">null</span> ;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> StudentBuilder <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>  <span class=\"keyword\">this</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> StudentBuilder <span class=\"title\">setNumber</span><span class=\"params\">(<span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.number = number;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>  <span class=\"keyword\">this</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> StudentBuilder <span class=\"title\">setSex</span><span class=\"params\">(String sex)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>  <span class=\"keyword\">this</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> StudentBuilder <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>  <span class=\"keyword\">this</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> StudentBuilder <span class=\"title\">setSchool</span><span class=\"params\">(String school)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.school = school;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>  <span class=\"keyword\">this</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Student(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(StudentBuilder builder)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.age = builder.age;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = builder.name;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.number = builder.number;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.school = builder.school ;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.sex = builder.sex ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( String[] args )</span></span>&#123;</span><br><span class=\"line\">        Student a = <span class=\"keyword\">new</span> Student.StudentBuilder().setAge(<span class=\"number\">13</span>).setName(<span class=\"string\">\"LiHua\"</span>).build();</span><br><span class=\"line\">        Student b = <span class=\"keyword\">new</span> Student.StudentBuilder().setSchool(<span class=\"string\">\"sc\"</span>).setSex(<span class=\"string\">\"Male\"</span>).setName(<span class=\"string\">\"ZhangSan\"</span>).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-原型模式\"><a href=\"#5-原型模式\" class=\"headerlink\" title=\"5. 原型模式\"></a>5. 原型模式</h3><p>原型模式就是将一个对象作为原型，使用clone()方法来创建新的实例</p>\n<h4 id=\"浅克隆-浅拷贝\"><a href=\"#浅克隆-浅拷贝\" class=\"headerlink\" title=\"浅克隆/浅拷贝\"></a>浅克隆/浅拷贝</h4>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span>   </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span> <span class=\"params\">( String[] args)</span></span>&#123;</span><br><span class=\"line\">        Prototype pro = <span class=\"keyword\">new</span> Prototype();</span><br><span class=\"line\">        Prototype pro1 = (Prototype)pro.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只克隆了对象，克隆的对象仍然保留了原有对象的引用，值随着改变而改变</p>\n<h4 id=\"深克隆-深拷贝\"><a href=\"#深克隆-深拷贝\" class=\"headerlink\" title=\"深克隆/深拷贝\"></a>深克隆/深拷贝</h4>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">       <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   </span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span>   </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               Object obj = <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">               Prototype p = (Prototype) obj;</span><br><span class=\"line\">               p.name = <span class=\"keyword\">this</span>.name.clone();</span><br><span class=\"line\">               <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">               e.printStackTrace();</span><br><span class=\"line\">           &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span> <span class=\"params\">( String[] args)</span></span>&#123;</span><br><span class=\"line\">           Prototype pro = <span class=\"keyword\">new</span> Prototype();         </span><br><span class=\"line\">           Prototype pro1 = (Prototype)pro.clone();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>克隆对象，并且把该对象的所有属性也克隆出一份新的，克隆的对象的属性不会随着改变而改变。</p>\n<h3 id=\"6-适配器模式\"><a href=\"#6-适配器模式\" class=\"headerlink\" title=\"6.适配器模式\"></a>6.适配器模式</h3><p>适配器模式的作用就是在原来的类上提供新功能,主要可分为3种：</p>\n<ul>\n<li><p>类适配：创建新类，继承源类，并实现新接口</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">oldClass</span>  <span class=\"keyword\">implements</span> <span class=\"title\">newFunc</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>对象适配：创建新类持源类的实例，并实现新接口</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">adapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">newFunc</span> </span>&#123; <span class=\"keyword\">private</span> oldClass oldInstance ;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>接口适配：创建新的抽象类实现旧接口方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">adapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">oldClassFunc</span> </span>&#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">newFunc</span><span class=\"params\">()</span></span>;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"7-装饰模式\"><a href=\"#7-装饰模式\" class=\"headerlink\" title=\"7.装饰模式\"></a>7.装饰模式</h3><p>给一类对象增加新的功能，装饰方法与具体的内部逻辑无关</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Source</span></span>&#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Source</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Source source ;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decotate1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"decorate\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        decotate1();</span><br><span class=\"line\">        source.method();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>代理模式<br>客户端通过代理类访问，代理类实现具体的实现细节，客户只需要使用代理类即可实现操作，这种模式可以对旧功能进行代理，用一个代理类调用原有的方法，且对产生的结果进行控制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Source</span></span>&#123;<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OldClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">Source</span></span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Source</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Source source = <span class=\"keyword\">new</span> OldClass();</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">new</span> Class1().Func1();</span><br><span class=\"line\">       source.method();</span><br><span class=\"line\">       <span class=\"keyword\">new</span> Class2().Func2();</span><br><span class=\"line\">       doSomething();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>外观模式<br>为子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口时的这一子系统更加容易使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Facade</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> subSystem1 subSystem1 = <span class=\"keyword\">new</span> subSystem1();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> subSystem2 subSystem2 = <span class=\"keyword\">new</span> subSystem2();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> subSystem3 subSystem3 = <span class=\"keyword\">new</span> subSystem3();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startSystem</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        subSystem1.start();</span><br><span class=\"line\">        subSystem2.start();</span><br><span class=\"line\">        subSystem3.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stopSystem</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        subSystem1.stop();</span><br><span class=\"line\">        subSystem2.stop();</span><br><span class=\"line\">        subSystem3.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>10.桥接模式<br>桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DrawAPI</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">int</span> radius, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedCircle</span> <span class=\"keyword\">implements</span> <span class=\"title\">DrawAPI</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">int</span> radius, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Drawing Circle[ color: red, radius: \"</span></span><br><span class=\"line\">                + radius +<span class=\"string\">\", x: \"</span> +x+<span class=\"string\">\", \"</span>+ y +<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreenCircle</span> <span class=\"keyword\">implements</span> <span class=\"title\">DrawAPI</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">int</span> radius, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Drawing Circle[ color: green, radius: \"</span></span><br><span class=\"line\">                + radius +<span class=\"string\">\", x: \"</span> +x+<span class=\"string\">\", \"</span>+ y +<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> DrawAPI drawAPI;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Shape</span><span class=\"params\">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.drawAPI = drawAPI;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x, y, radius;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> radius, DrawAPI drawAPI)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(drawAPI);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        drawAPI.drawCircle(radius,x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//客户端使用代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">         Shape redCircle = <span class=\"keyword\">new</span> Circle(<span class=\"number\">100</span>,<span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"keyword\">new</span> RedCircle());</span><br><span class=\"line\">         Shape greenCircle = <span class=\"keyword\">new</span> Circle(<span class=\"number\">100</span>,<span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"keyword\">new</span> GreenCircle());</span><br><span class=\"line\">         redCircle.draw();</span><br><span class=\"line\">         greenCircle.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>组合模式<br>组合模式是为了表示那些层次结构，同时部分和整体也可能是一样的结构，常见的如文件或者树。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">component</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">File</span> <span class=\"keyword\">extends</span> <span class=\"title\">component</span></span>&#123;String filename;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Folder</span> <span class=\"keyword\">extends</span>  <span class=\"title\">component</span></span>&#123;</span><br><span class=\"line\">    component[] files ;  <span class=\"comment\">//既可以放文件File类，也可以放文件夹Folder类。Folder类下又有子文件或子文件夹。</span></span><br><span class=\"line\">    String foldername ;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Folder</span><span class=\"params\">(component[] source)</span></span>&#123; files = source ;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scan</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( component f:files)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( f <span class=\"keyword\">instanceof</span> File)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"File \"</span>+((File) f).filename);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(f <span class=\"keyword\">instanceof</span> Folder)&#123;</span><br><span class=\"line\">                Folder e = (Folder)f ;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Folder \"</span>+e.foldername);</span><br><span class=\"line\">                e.scan();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>享元模式<br>使用共享对象的方法，用来尽可能减少内存使用量以及分享资讯。通常使用工厂类辅助，例子中使用一个HashMap类进行辅助判断，数据池中是否已经有了目标实例，如果有，直接返回，不需要多次创建重复实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">flywei</span></span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flyweight</span> <span class=\"keyword\">extends</span> <span class=\"title\">flywei</span></span>&#123;</span><br><span class=\"line\">    Object obj ;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Flyweight</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obj = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">FlyweightFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;Object,Flyweight&gt; data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FlyweightFactory</span><span class=\"params\">()</span></span>&#123; data = <span class=\"keyword\">new</span> HashMap&lt;&gt;();&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Flyweight <span class=\"title\">getFlyweight</span><span class=\"params\">(Object object)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( data.containsKey(object))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data.get(object);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Flyweight flyweight = <span class=\"keyword\">new</span> Flyweight(object);</span><br><span class=\"line\">            data.put(object,flyweight);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> flyweight;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":["Expand"],"tags":["JAVA"]},{"title":"消息队列","url":"https://feifaninternet.github.io/2018/04/03/消息队列/","content":"<h3 id=\"消息队列的特性\"><a href=\"#消息队列的特性\" class=\"headerlink\" title=\"消息队列的特性\"></a>消息队列的特性</h3><p>普适性质的消息队列不需考虑上层的业务模型，只需要负责消息的分发，上层业务的不同模块需要依赖消息队列所定义的规范进行通信。<br>FIFO 先投递先到达的保证是一个消息队列和一个buffer的本质区别。<br>容灾，对于普适的消息队列组件来说，节点的动态增删和消息的持久化，都是支持其容灾能力的重要基本特性。当然，这个特性对于游戏服务器中大部分应用中的消息队列来说不是必须的，这个也是跟应用情景有关的，很多时候没有这种持久化的需求。</p>\n<h3 id=\"为什么要使用消息队列\"><a href=\"#为什么要使用消息队列\" class=\"headerlink\" title=\"为什么要使用消息队列?\"></a>为什么要使用消息队列?</h3><p>当生产和消费的速度和稳定性不一致的时候，需要消息队列作为抽象层，来弥合双方的差异。消息可以理解为两台计算机间传送的数据的单位，它可能只是一个字符串，也可能非常的复杂，消息队列是在消息传送过程中的容器。<br>从下面的例子中可以很形象的理解消息队列：</p>\n<ol>\n<li>业务系统触发短信发送申请，但短信发送模块速度跟不上，需要将来不及处理的消息暂存一下，缓冲压力。就可以把短信发送申请丢到消息队列，直接返回用户成功(假装成功ing)，短信发送模块再可以慢慢去消息队列中取消息进行处理。</li>\n<li>调远程系统下订单成本较高，且因为网络等因素，不稳定，攒一批一起发送。</li>\n<li>任务处理类的系统，先把用户发起的任务请求接收过来存到消息队列中，然后后端开启多个应用程序从队列中取任务进行处理。</li>\n</ol>\n<h3 id=\"消息队列的好处\"><a href=\"#消息队列的好处\" class=\"headerlink\" title=\"消息队列的好处\"></a>消息队列的好处</h3><p>异步化，解耦，消除峰值。</p>\n<ol>\n<li>提高系统的响应速度</li>\n<li>提高系统的稳定性</li>\n<li>提高用户的体验性</li>\n</ol>\n<h3 id=\"常见的MQ\"><a href=\"#常见的MQ\" class=\"headerlink\" title=\"常见的MQ\"></a>常见的MQ</h3><h3 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h3><p>是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正是如此，使的它变的非常重量级，更适合于企业级的开发。同时实现了一个经纪人(Broker)构架，这意味着消息在发送给客户端时先在中心队列排队。对路由(Routing)，负载均衡(Load balance)或者数据持久化都有很好的支持。</p>\n<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><p>是一个Key-Value的NoSQL数据库，开发维护很活跃，虽然它是一个Key-Value数据库存储系统，但它本身支持MQ功能，所以完全可以当做一个轻量级的队列服务来使用。对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</p>\n<h3 id=\"ZeroMQ\"><a href=\"#ZeroMQ\" class=\"headerlink\" title=\"ZeroMQ\"></a>ZeroMQ</h3><p>号称最快的消息队列系统，尤其针对大吞吐量的需求场景。ZMQ能够实现RabbitMQ不擅长的高级/复杂的队列，但是开发人员需要自己组合多种技术框架，技术上的复杂度是对这MQ能够应用成功的挑战。ZeroMQ具有一个独特的非中间件的模式，你不需要安装和运行一个消息服务器或中间件，因为你的应用程序将扮演了这个服务角色。你只需要简单的引用ZeroMQ程序库，可以使用NuGet安装，然后你就可以愉快的在应用程序之间发送消息了。但是ZeroMQ仅提供非持久性的队列，也就是说如果down机，数据将会丢失。其中，Twitter的Storm中使用ZeroMQ作为数据流的传输。</p>\n<h3 id=\"ActiveMQ\"><a href=\"#ActiveMQ\" class=\"headerlink\" title=\"ActiveMQ\"></a>ActiveMQ</h3><p>是Apache下的一个子项目。 类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。RabbitMQ、ZeroMQ、ActiveMQ均支持常用的多种语言客户端 C++、Java、.Net,、Python、 Php、 Ruby等。</p>\n<h3 id=\"RocketMQ\"><a href=\"#RocketMQ\" class=\"headerlink\" title=\"RocketMQ\"></a>RocketMQ</h3><p>阿里贡献给Apache的消息队列框架。 是一款低延迟、高可靠、可伸缩、易于使用的消息中间件。具有以下特性：</p>\n<ol>\n<li>支持发布/订阅（Pub/Sub）和点对点（P2P）消息模型</li>\n<li>在一个队列中可靠的先进先出（FIFO）和严格的顺序传递</li>\n<li>支持拉（pull）和推（push）两种消息模式</li>\n<li>单一队列百万消息的堆积能力</li>\n<li>支持多种消息协议，如 JMS、MQTT 等</li>\n<li>分布式高可用的部署架构,满足至少一次消息传递语义</li>\n<li>提供 docker 镜像用于隔离测试和云集群部署</li>\n<li>提供配置、指标和监控等功能丰富的 Dashboard</li>\n</ol>\n<h3 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h3><p>目前最火的消息队列,<a href=\"https://feifaninternet.github.io/2018/04/04/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B9%8B-Kafka/\">消息队列之 Kafka</a>会详细介绍</p>\n","categories":["Expand"],"tags":["MQ"]},{"title":"Dubbo框架","url":"https://feifaninternet.github.io/2018/04/03/Dubbo框架/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Dubbo是Alibaba开源的分布式服务框架，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合。从服务模型的角度来看，Dubbo采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方和服务消费方两个角色。<br>详细框架介绍可见<a href=\"http://dubbo.io/books/dubbo-dev-book/design.html\" target=\"_blank\" rel=\"noopener\">Alibba官方Dubbo文档</a></p>\n<h3 id=\"总体架构\"><a href=\"#总体架构\" class=\"headerlink\" title=\"总体架构\"></a>总体架构</h3><div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/DubboArchitecture.png\" alt=\"Dubbo总体架构\" title=\"Dubbo总体架构\"><br></div>\n\n<p>Dubbo框架设计一共划分了10个层，而最上面的Service层是留给实际想要使用Dubbo开发分布式服务的开发者实现业务逻辑的接口层。</p>\n<ol>\n<li>服务接口层(Service)：该层是与实际业务逻辑相关的，根据服务提供方和服务消费方的业务设计对应的接口和实现。</li>\n<li>配置层（Config）：对外配置接口，以ServiceConfig和ReferenceConfig为中心，可以直接new配置类，也可以通过spring解析配置生成配置类。</li>\n<li>服务代理层（Proxy）：服务接口透明代理，生成服务的客户端Stub和服务器端Skeleton，以ServiceProxy为中心，扩展接口为ProxyFactory。</li>\n<li>服务注册层（Registry）：封装服务地址的注册与发现，以服务URL为中心，扩展接口为RegistryFactory、Registry和RegistryService。可能没有服务注册中心，此时服务提供方直接暴露服务。</li>\n<li>集群层（Cluster）：封装多个提供者的路由及负载均衡，并桥接注册中心，以Invoker为中心，扩展接口为Cluster、Directory、Router和LoadBalance。将多个服务提供方组合为一个服务提供方，实现对服务消费方来透明，只需要与一个服务提供方进行交互。</li>\n<li>监控层（Monitor）：RPC调用次数和调用时间监控，以Statistics为中心，扩展接口为MonitorFactory、Monitor和MonitorService。</li>\n<li>远程调用层（Protocol）：封将RPC调用，以Invocation和Result为中心，扩展接口为Protocol、Invoker和Exporter。Protocol是服务域，它是Invoker暴露和引用的主功能入口，它负责Invoker的生命周期管理。Invoker是实体域，它是Dubbo的核心模型，其它模型都向它靠扰，或转换成它，它代表一个可执行体，可向它发起invoke调用，它有可能是一个本地的实现，也可能是一个远程的实现，也可能一个集群实现。</li>\n<li>信息交换层（Exchange）：封装请求响应模式，同步转异步，以Request和Response为中心，扩展接口为Exchanger、ExchangeChannel、ExchangeClient和ExchangeServer。</li>\n<li>网络传输层（Transport）：抽象mina和netty为统一接口，以Message为中心，扩展接口为Channel、Transporter、Client、Server和Codec。</li>\n<li>数据序列化层（Serialize）：可复用的一些工具，扩展接口为Serialization、 ObjectInput、ObjectOutput和ThreadPool。</li>\n</ol>\n<p>各层之间的关系：</p>\n<ul>\n<li>在 RPC 中，Protocol 是核心层，也就是只要有 Protocol + Invoker + Exporter 就可以完成非透明的 RPC 调用，然后在 Invoker 的主过程上 Filter 拦截点。</li>\n<li>图中的 Consumer 和 Provider 是抽象概念，只是想让看图者更直观的了解哪些类分属于客户端与服务器端，不用 Client 和 Server 的原因是 Dubbo 在很多场景下都使用 Provider, Consumer, Registry, Monitor 划分逻辑拓普节点，保持统一概念。</li>\n<li>而 Cluster 是外围概念，所以 Cluster 的目的是将多个 Invoker 伪装成一个 Invoker，这样其它人只要关注 Protocol 层 Invoker 即可，加上 Cluster 或者去掉 Cluster 对其它层都不会造成影响，因为只有一个提供者时，是不需要 Cluster 的。</li>\n<li>Proxy 层封装了所有接口的透明化代理，而在其它层都以 Invoker 为中心，只有到了暴露给用户使用时，才用 Proxy 将 Invoker 转成接口，或将接口实现转成 Invoker，也就是去掉 Proxy 层 RPC 是可以 Run 的，只是不那么透明，不那么看起来像调本地服务一样调远程服务。</li>\n<li>而 Remoting 实现是 Dubbo 协议的实现，如果你选择 RMI 协议，整个 Remoting 都不会用上，Remoting 内部再划为 Transport 传输层和 Exchange 信息交换层，Transport 层只负责单向消息传输，是对 Mina, Netty, Grizzly 的抽象，它也可以扩展 UDP 传输，而 Exchange 层是在传输层之上封装了 Request-Response 语义。</li>\n<li>Registry 和 Monitor 实际上不算一层，而是一个独立的节点，只是为了全局概览，用层的方式画在一起。</li>\n</ul>\n<h3 id=\"模块分包\"><a href=\"#模块分包\" class=\"headerlink\" title=\"模块分包\"></a>模块分包</h3><div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/dubboModules.jpg\" alt=\"Dubbo模块分包\" title=\"Dubbo模块分包\"><br></div>\n\n<p>模块说明：</p>\n<ul>\n<li>dubbo-common 公共逻辑模块：包括 Util 类和通用模型。</li>\n<li>dubbo-remoting 远程通讯模块：相当于 Dubbo 协议的实现，如果 RPC 用 RMI协议则不需要使用此包。</li>\n<li>dubbo-rpc 远程调用模块：抽象各种协议，以及动态代理，只包含一对一的调用，不关心集群的管理。</li>\n<li>dubbo-cluster 集群模块：将多个服务提供方伪装为一个提供方，包括：负载均衡, 容错，路由等，集群的地址列表可以是静态配置的，也可以是由注册中心下发。</li>\n<li>dubbo-registry 注册中心模块：基于注册中心下发地址的集群方式，以及对各种注册中心的抽象。</li>\n<li>dubbo-monitor 监控模块：统计服务调用次数，调用时间的，调用链跟踪的服务。</li>\n<li>dubbo-config 配置模块：是 Dubbo 对外的 API，用户通过 Config 使用D ubbo，隐藏 Dubbo 所有细节。</li>\n<li>dubbo-container 容器模块：是一个 Standlone 的容器，以简单的 Main 加载 Spring 启动，因为服务通常不需要 Tomcat/JBoss 等 Web 容器的特性，没必要用 Web 容器去加载服务。</li>\n</ul>\n<p>按照分层结构进行分包，与分层的不同点在于：</p>\n<ul>\n<li>container 为服务容器，用于部署运行服务，没有在层中画出。</li>\n<li>protocol 层和 proxy 层都放在 rpc 模块中，这两层是 rpc 的核心，在不需要集群也就是只有一个提供者时，可以只使用这两层完成 rpc 调用。</li>\n<li>transport 层和 exchange 层都放在 remoting 模块中，为 rpc 调用的通讯基础。</li>\n<li>serialize 层放在 common 模块中，以便更大程度复用。</li>\n</ul>\n<h3 id=\"服务定义\"><a href=\"#服务定义\" class=\"headerlink\" title=\"服务定义\"></a>服务定义</h3><p>服务是围绕服务提供方和服务消费方的，服务提供方实现服务，而服务消费方调用服务。可以先了解一下java设计模式的生产者消费者模式。</p>\n<h3 id=\"服务注册\"><a href=\"#服务注册\" class=\"headerlink\" title=\"服务注册\"></a>服务注册</h3><p>对于服务提供方，他需要发布服务，而且由于用系统的复杂性，服务的数量、类型也不断膨胀；对于服务消费方，它最关心如何获取到它所需要的服务，而面对复杂的应用系统，需要管理大量的服务调用。而且，对于服务提供方和服务消费方来说，他们还有可能兼具这两种角色，即既需要提供服务，有需要消费服务。通过将服务统一管理起来，可以有效地优化内部应用对服务发布/使用的流程和管理。服务注册中心可以通过特定协议来完成服务对外的统一。<br>Dubbo提供的注册中心有如下几种类型可供选择：</p>\n<ul>\n<li>Multicast注册中心</li>\n<li>Zookeeper注册中心</li>\n<li>Redis注册中心</li>\n<li>Simple注册中心</li>\n<li>目前官网文档已经支持SpringCloud注册</li>\n</ul>\n<h3 id=\"服务监控\"><a href=\"#服务监控\" class=\"headerlink\" title=\"服务监控\"></a>服务监控</h3><p>无论是服务提供方，还是服务消费方，他们都需要对服务调用的实际状态进行有效的监控，从而改进服务质量</p>\n<h4 id=\"远程通信与信息交换\"><a href=\"#远程通信与信息交换\" class=\"headerlink\" title=\"远程通信与信息交换\"></a>远程通信与信息交换</h4><p>远程通信需要指定通信双方所约定的协议，在保证通信双方理解协议语义的基础上，还要保证高效、稳定的消息传输。Dubbo继承了当前主流的网络通信框架，主要包括如下几个：</p>\n<ul>\n<li>Mina</li>\n<li>Netty</li>\n<li>Grizzly</li>\n</ul>\n<h3 id=\"依赖关系\"><a href=\"#依赖关系\" class=\"headerlink\" title=\"依赖关系\"></a>依赖关系</h3><div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/dubboRefer.jpg\" alt=\"Dubbo依赖关系\" title=\"Dubbo依赖关系\"><br></div>\n\n<p>业务调用流程</p>\n<ol>\n<li>服务提供方发布服务到服务注册中心</li>\n<li>服务消费方从服务注册中心订阅服务</li>\n<li>服务消费方调用已经注册的可用服务</li>\n</ol>\n<h3 id=\"调用链\"><a href=\"#调用链\" class=\"headerlink\" title=\"调用链\"></a>调用链</h3><div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/DubboInvok.jpg\" alt=\"Dubbo调用链\" title=\"Dubbo调用链\"><br></div>\n","categories":["Frame"],"tags":["Dubbo"]},{"title":"Docker","url":"https://feifaninternet.github.io/2018/03/31/Docker/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的，可移植的自给自足的容器，开发者可以打包应用以及依赖包到这个容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>\n<h3 id=\"Docker通常用于如下场景\"><a href=\"#Docker通常用于如下场景\" class=\"headerlink\" title=\"Docker通常用于如下场景\"></a>Docker通常用于如下场景</h3><ul>\n<li>web应用的自动化打包和发布</li>\n<li>自动化测试和持续集成，发布</li>\n<li>在服务型环境中部署和调整数据库或者其他的后台应用</li>\n<li>从头编译或者扩展现有的OpenShift 或 Cloud Foundry平台来搭建自己的PaaS环境</li>\n</ul>\n<h3 id=\"Docker-的优点\"><a href=\"#Docker-的优点\" class=\"headerlink\" title=\"Docker 的优点\"></a>Docker 的优点</h3><ol>\n<li>简化程序：打包应用和依赖到Docker容器中进行管理，方便快捷，而且更新简单，可以轻松迁移和扩展。</li>\n<li>简化部署多种应用实例工作，web应用，后台应用，数据库应用，大数据应用比如hadoop集群，消息队列等都可以打包成一个镜像部署，快速的交付和部署。</li>\n<li>节省开支。</li>\n<li>高效的资源利用。</li>\n</ol>\n<h3 id=\"Docker-的核心\"><a href=\"#Docker-的核心\" class=\"headerlink\" title=\"Docker 的核心\"></a>Docker 的核心</h3><h4 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h4><p>镜像类似于虚拟机镜像，可以理解为一个面向docker引擎的只读模板，包含了系统文件。<br>镜像是流行的Linux系统的(CentOS,Ubuntu),然后在上面安装应用程序。<br>镜像是创建容器的基础，通过版本管理和增量的文件系统，docker可以简单的创建和更新现有的镜像，也可以直接使用网上下载的镜像。</p>\n<h4 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h4><p>容器相当于一个轻量级的沙箱，用来运行和隔离应用。<br>容器是从镜像创建的应用运行实例，可以将其启动，开始，停止，删除，这些容器是相互隔离，互不可见的。<br>镜像自身是只读的，容器从镜像启动的时候，Docker会在镜像的最上层创建一个可写层，镜像本身将保持不变。</p>\n<h4 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h4><p>仓库类似于代码仓库，是docker集中存放镜像文件的场所。<br>docker仓库和注册服务器是不一样的，注册服务器是存放仓库的地方，可以包含很多个仓库 ，每个仓库集中存放某一类镜像，往往包含多个镜像文件，通过不同的标签区分。<br>仓库分为公共仓库和私有仓库，公共仓库是存放的共享镜像文件，目前最大的是Docker Hub，用户可以创建私有仓库在自己的局域网中。</p>\n<h3 id=\"Docker-使用\"><a href=\"#Docker-使用\" class=\"headerlink\" title=\"Docker 使用\"></a>Docker 使用</h3>","categories":["Server"],"tags":["Docker"]},{"title":"SpringCloud Ribbon","url":"https://feifaninternet.github.io/2018/03/30/SpringCloud-Ribbon/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>ribbon是一个负载均衡客户端，可以很好的控制http和tcp的一些行为，它是基于Netflix Ribbon实现的。它不像服务注册中心，API网关，配置中心那样独立部署，但是他几乎存在于每个微服务的基础设施中，主要功能是 提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起。Ribbon客户端组件提供一系列完善的配置，在配置文件中列出Load Balancer(LB)后面所有的机器，Ribbon会自动的帮助你基于某种规则去连接这种机器。</p>\n<h3 id=\"LB-方案分类\"><a href=\"#LB-方案分类\" class=\"headerlink\" title=\"LB 方案分类\"></a>LB 方案分类</h3><p>目前主流的LB方案可分为两类：一种是集中是LB，即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5，也可以是软件，如nginx)，由该设施负责把访问请求通过某种策略转发至服务的提供方；另一种是进程内LB，将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。Ribbon就属于后者，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p>\n<h3 id=\"Ribbon的主要组件与工作流程\"><a href=\"#Ribbon的主要组件与工作流程\" class=\"headerlink\" title=\"Ribbon的主要组件与工作流程\"></a>Ribbon的主要组件与工作流程</h3><p>Ribbon的核心组件 :   </p>\n<ul>\n<li>ServerList   </li>\n</ul>\n<p>用于获取地址列表，它既可以是静态的(提供一组固定的地址)，也可以是动态的(从注册中心中定期查询地址列表)</p>\n<ul>\n<li>ServerListFilter</li>\n</ul>\n<p>仅当使用动态ServerList时使用，用于在原始的服务列表中使用一定的策略过滤掉一部分地址。</p>\n<ul>\n<li>IRule</li>\n</ul>\n<p>选择一个最终的服务地址作为LB结果，选择策略有轮询，根据相应时间加权，断路器等。</p>\n<p>Ribbon在工作是首选会通过ServerList来获取所有可用的服务列表，然后通过ServerListFilter过滤掉一部分地址，最后在剩下的地址中通过IRule选择传一台服务器作为最终结果。</p>\n<h3 id=\"Ribbon-提供的主要负载均衡策略\"><a href=\"#Ribbon-提供的主要负载均衡策略\" class=\"headerlink\" title=\"Ribbon 提供的主要负载均衡策略\"></a>Ribbon 提供的主要负载均衡策略</h3><h4 id=\"1-简单轮询负载均衡\"><a href=\"#1-简单轮询负载均衡\" class=\"headerlink\" title=\"1. 简单轮询负载均衡\"></a>1. 简单轮询负载均衡</h4><p>以轮询的方式依次将请求调度到不同的服务器，即每次调度执行 i = (i + 1)mod n ，并选出第 i 台服务器。</p>\n<h4 id=\"2-随机负载均衡\"><a href=\"#2-随机负载均衡\" class=\"headerlink\" title=\"2. 随机负载均衡\"></a>2. 随机负载均衡</h4><p>随机选择状态为UP 的Server</p>\n<h4 id=\"3-加权响应时间负载均衡\"><a href=\"#3-加权响应时间负载均衡\" class=\"headerlink\" title=\"3. 加权响应时间负载均衡\"></a>3. 加权响应时间负载均衡</h4><p>根据相应时间分配一个weight，响应时间越长，weight越小，被选中的可能性越低。</p>\n<h4 id=\"4-区域感知轮询负载均衡\"><a href=\"#4-区域感知轮询负载均衡\" class=\"headerlink\" title=\"4. 区域感知轮询负载均衡\"></a>4. 区域感知轮询负载均衡</h4><p>符合判断server所在区域的性能和server的可用性选择server。</p>\n","categories":["Spring"],"tags":["SpringCloud"]},{"title":"SpringCloud Eureka","url":"https://feifaninternet.github.io/2018/03/30/SpringCloud-Eureka/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>Eureka是Netflix开发的服务发现框架，springCould将它集成在自己的子项目spring-cloud-netflix中，实现springCould的服务发现功能。<br>在一个完整的系统架构中，任何单点的服务都不能保证不会中断，因此我们需要服务发现机制，在某个节点中断后，其他的节点能够继续提供服务，从而保证整个系统是高可用的。这也是使用Eureka的原因。<br>服务发现有两种模式: 一种是客户端发现模式，一种是服务端发现模式。Eureka采用的是客户端发现模式。</p>\n<p>Eureka Server会提供服务注册服务，各个服务节点启动后，会在Eureka Server中进行注册，这样Eureka Server中就有了所有服务节点的信息，并且Eureka有监控页面，可以在页面中直观的看到所有注册的服务的情况。同时Eureka有心跳机制，当某个节点服务在规定时间内没有发送心跳信号时，Eureka会从服务注册表中把这个服务节点移除。Eureka还提供了客户端缓存的机制，即使所有的Eureka Server都挂掉，客户端仍可以利用缓存中的信息调用服务节点的服务。Eureka一般配合Ribbon进行使用，Ribbon提供了客户端负载均衡的功能，Ribbon利用从Eureka中读取到的服务信息，在调用服务节点提供的服务时，会合理的进行负载。<br>Eureka通过心跳检测、健康检查、客户端缓存等机制，保证了系统具有高可用和灵活性。</p>\n<h3 id=\"Eureka-程序构成\"><a href=\"#Eureka-程序构成\" class=\"headerlink\" title=\"Eureka 程序构成\"></a>Eureka 程序构成</h3><ol>\n<li>是纯正的servlet应用，需构建成war包部署</li>\n<li>使用了Jersey框架实现自身的Restful HTTP接口</li>\n<li>peer之间的同步与服务的注册全部通过 HTTP 协议实现</li>\n<li>定时任务(发送心跳/定时清理过期服务/节点同步等)通过JDK自带的Timer实现</li>\n<li>内存缓存使用Google的guava包实现</li>\n</ol>\n<h3 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h3><p>eureka-core模块包含了功能的核心实现：</p>\n<ol>\n<li>com.netflix.eureka.cluster – 与peer节点复制(replication)相关的功能</li>\n<li>com.netflix.eureka.lease – 即”租约”，用来控制注册信息的生命周期(添加/清除/续约)</li>\n<li>com.netflix.eureka.registry – 存储，查询服务注册信息</li>\n<li>com.netflix.eureka.resources – Restful 风格中的”R”,即资源。相当于SpringMVC中的Controller</li>\n<li>com.netflix.eureka.transport – 发送HTTP请求的客户端，如发送心跳</li>\n<li>com.netflix.eureka.aws – 与 amazon AWS 服务相关的类</li>\n</ol>\n<p>eureka-client模块：<br>Eureka客户端，微服务通过该客户端与Eureka进行通讯，屏蔽了通讯细节   </p>\n<p>eureka-server模块：<br>包含了servlet应用的基本配置，如web.xml。构建成功后在该模块下会生成可部署的war包。</p>\n<p>eureka代码入口：<br>由于是Servlet应用，所以Eureka需要通过servlet的相关监听器 ServletContextListener 嵌入到 Servlet 的生命周期中。EurekaBootStrap 类实现了该接口，在servlet标准的contextInitialized()方法中完成了初始化工作：</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    public void contextInitialized(ServletContextEvent event) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            // 读取配置信息</span><br><span class=\"line\">            initEurekaEnvironment(); </span><br><span class=\"line\">            // 初始化Eureka Client(用来与其它节点进行同步)</span><br><span class=\"line\">            // 初始化server</span><br><span class=\"line\">            initEurekaServerContext(); </span><br><span class=\"line\">            ServletContext sc = event.getServletContext();</span><br><span class=\"line\">            sc.setAttribute(EurekaServerContext.class.getName(), serverContext);</span><br><span class=\"line\">        &#125; catch (Throwable e) &#123;</span><br><span class=\"line\">            logger.error(&quot;Cannot bootstrap eureka server :&quot;, e);</span><br><span class=\"line\">            throw new RuntimeException(&quot;Cannot bootstrap eureka server :&quot;, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Spring Cloud的EurekaServerBootstrap类没有实现servlet接口,在Spring容器初始化该组件时，Spring调用其生命周期方法start()从而触发了Eureka的启动。</p>\n<h3 id=\"Eureka-和-Zookeeper\"><a href=\"#Eureka-和-Zookeeper\" class=\"headerlink\" title=\"Eureka 和 Zookeeper\"></a>Eureka 和 Zookeeper</h3><p>根据CAP理论，CAP不能同时满足，P(分区容错性)是分布式系统中必要保证的，因此我们只能在A和C之间进行权衡。Zookeeper保证的是CP，而Eureka保证的是AP。</p>\n<h4 id=\"Zookeeper-保证-CP\"><a href=\"#Zookeeper-保证-CP\" class=\"headerlink\" title=\"Zookeeper 保证 CP\"></a>Zookeeper 保证 CP</h4><p>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因网络问题使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。</p>\n<h4 id=\"Eureka-保证-AP\"><a href=\"#Eureka-保证-AP\" class=\"headerlink\" title=\"Eureka 保证 AP\"></a>Eureka 保证 AP</h4><p>Eureka看明白了这一点，因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：   </p>\n<ol>\n<li>Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务 </li>\n<li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用) </li>\n<li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中。</li>\n</ol>\n<p>因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像Zookeeper那样使整个注册服务瘫痪。</p>\n<h3 id=\"Eureka的一些概念\"><a href=\"#Eureka的一些概念\" class=\"headerlink\" title=\"Eureka的一些概念\"></a>Eureka的一些概念</h3><ul>\n<li>Register：服务注册 </li>\n</ul>\n<p>当Eureka客户端向Eureka Server注册时，它提供自身的元数据，比如IP地址、端口，运行状况指示符URL，主页等。</p>\n<ul>\n<li>Renew：服务续约</li>\n</ul>\n<p>Eureka客户会每隔30秒发送一次心跳来续约。 通过续约来告知Eureka Server该Eureka客户仍然存在，没有出现问题。 正常情况下，如果Eureka Server在90秒没有收到Eureka客户的续约，它会将实例从其注册表中删除。 建议不要更改续约间隔。</p>\n<ul>\n<li>Fetch Registries：获取注册列表信息 </li>\n</ul>\n<p>Eureka客户端从服务器获取注册表信息，并将其缓存在本地。客户端会使用该信息查找其他服务，从而进行远程调用。该注册列表信息定期（每30秒钟）更新一次。每次返回注册列表信息可能与Eureka客户端的缓存信息不同， Eureka客户端自动处理。如果由于某种原因导致注册列表信息不能及时匹配，Eureka客户端则会重新获取整个注册表信息。 Eureka服务器缓存注册列表信息，整个注册表以及每个应用程序的信息进行了压缩，压缩内容和没有压缩的内容完全相同。Eureka客户端和Eureka 服务器可以使用JSON / XML格式进行通讯。在默认的情况下Eureka客户端使用压缩JSON格式来获取注册列表的信息。</p>\n<ul>\n<li>Cancel：服务下线 </li>\n</ul>\n<p>Eureka客户端在程序关闭时向Eureka服务器发送取消请求。 发送请求后，该客户端实例信息将从服务器的实例注册表中删除。</p>\n<ul>\n<li>Eviction 服务剔除 </li>\n</ul>\n<p>在默认的情况下，当Eureka客户端连续90秒没有向Eureka服务器发送服务续约，即心跳，Eureka服务器会将该服务实例从服务注册列表删除，即服务剔除。</p>\n","categories":["Spring"],"tags":["SpringCloud"]},{"title":"Linux命令","url":"https://feifaninternet.github.io/2018/03/29/Linux命令/","content":"<h3 id=\"top-命令\"><a href=\"#top-命令\" class=\"headerlink\" title=\"top 命令\"></a>top 命令</h3><p>监控系统的运行状态，并且可以按照cpu，内存，执行时间进行排序。</p>\n<h3 id=\"pgrep-pkill-命令\"><a href=\"#pgrep-pkill-命令\" class=\"headerlink\" title=\"pgrep/pkill 命令\"></a>pgrep/pkill 命令</h3><p>根据名称或者其它属性查询（发送信号）进程信息。</p>\n<p>1.pgrep命令根据提供的条件查询进程的pid，查询条件是and方式的，对于同一个选项，使用”,”分隔可以按照or方式查询。</p>\n<p>查询进程名为sshd，并且属主是root的进程 </p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgrep -u root sshd</span><br></pre></td></tr></table></figure>\n<p>查询属主是root或者daemon的进程</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgrep -u root,daemon</span><br></pre></td></tr></table></figure>\n<p>2.pkill 使用与pgrep类似，不过它不是用来查询进程pid，而是给进程发送信号，默认会发送 SIGTERM信号。</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgrep -u root named # 查找named进程的pid</span><br><span class=\"line\">pkill -HUP syslogd  # 告诉syslogd重新读取配置文件</span><br></pre></td></tr></table></figure>\n<p>查看哪些信息可用可以使用<span> kill -l </span>列出所有的信号及数值</p>\n<h3 id=\"expect-命令\"><a href=\"#expect-命令\" class=\"headerlink\" title=\"expect 命令\"></a>expect 命令</h3><ul>\n<li>send 发送一个字符串给进程</li>\n<li>expect 等待来自进程返回的字符串</li>\n<li>spawn 开始一个命令</li>\n</ul>\n<p>实现控制台 ssh 直接登录Linux服务器</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!/usr/bin/expect</span><br><span class=\"line\"></span><br><span class=\"line\">set timeout 20</span><br><span class=\"line\"></span><br><span class=\"line\">set ip &quot;IP地址&quot;</span><br><span class=\"line\">set user &quot;用户名&quot;</span><br><span class=\"line\">set password &quot;密码&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">spawn ssh &quot;$user\\@$ip&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">expect &quot;$user@$ip&apos;s password:&quot;</span><br><span class=\"line\">send &quot;$password\\r&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">interact</span><br></pre></td></tr></table></figure>\n<h3 id=\"pstack-命令\"><a href=\"#pstack-命令\" class=\"headerlink\" title=\"pstack 命令\"></a>pstack 命令</h3><p>pstack是一个shell脚本，用于打印正在运行的进程的栈跟踪信息，它实际上是gstack的一个链接。<br>该命令只需要提供一个参数，进程的pid即可。</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pstack $(pgrep -uroot php-fpm)</span><br></pre></td></tr></table></figure>\n<p>pstack是gdb的一部分，如果系统没有pstack命令，使用yum搜索安装gdb即可。</p>\n<h3 id=\"strace-命令\"><a href=\"#strace-命令\" class=\"headerlink\" title=\"strace 命令\"></a>strace 命令</h3><p>strace命令用于跟踪系统调用和信息。主要用于诊断，调试程序，使用该命令能够打印出进程执行的系统调用信息。   </p>\n<h4 id=\"找出应用程序启动时读取的配置文件\"><a href=\"#找出应用程序启动时读取的配置文件\" class=\"headerlink\" title=\"找出应用程序启动时读取的配置文件\"></a>找出应用程序启动时读取的配置文件</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ strace php 2&gt;&amp;1 | grep php.ini</span><br></pre></td></tr></table></figure>\n<p>这里的2&gt;&amp;1是将标准错误输出重定向到标准输出</p>\n<h4 id=\"查找为什么程序没有打开指定文件\"><a href=\"#查找为什么程序没有打开指定文件\" class=\"headerlink\" title=\"查找为什么程序没有打开指定文件\"></a>查找为什么程序没有打开指定文件</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ strace -e open,access 2&gt;&amp;1 |grep your-filename</span><br></pre></td></tr></table></figure>\n<p>-e参数指定了一个限定表达式用于指定要跟踪的时间和如何跟踪他们。</p>\n<p>查看进程正在执行什么操作</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@dev:~# strace -c -p 11084</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看为什么xxx无法连接到服务器\"><a href=\"#查看为什么xxx无法连接到服务器\" class=\"headerlink\" title=\"查看为什么xxx无法连接到服务器\"></a>查看为什么xxx无法连接到服务器</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ strace -e poll,select,connect,recvfrom,sendto nc www.news.com 80</span><br></pre></td></tr></table></figure>\n<h3 id=\"nc-命令\"><a href=\"#nc-命令\" class=\"headerlink\" title=\"nc 命令\"></a>nc 命令</h3><p>该命令用于创建任意的tcp/udp连接或者是监听连接</p>\n<h4 id=\"建立一个基本的C-S模型-文件远程复制\"><a href=\"#建立一个基本的C-S模型-文件远程复制\" class=\"headerlink\" title=\"建立一个基本的C/S模型(文件远程复制)\"></a>建立一个基本的C/S模型(文件远程复制)</h4><p>在server1上使用nc命令创建一个服务端 :</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server1 $ nc -l 1234</span><br></pre></td></tr></table></figure>\n<p>在server2上，使用nc作为客户端连接到server1</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server2 $ nc server1的IP地址 1234</span><br></pre></td></tr></table></figure>\n<p>上面的例子可以改造实现文件远程发送</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server1 $ nc -l 1234 &gt; filename.out</span><br></pre></td></tr></table></figure>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server2 $ nc server1的IP地址 1234 &lt; filename.in</span><br></pre></td></tr></table></figure>\n<p>-l指定了nc应该作为server端监听指定的端口</p>\n<h4 id=\"模拟HTTP请求\"><a href=\"#模拟HTTP请求\" class=\"headerlink\" title=\"模拟HTTP请求\"></a>模拟HTTP请求</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># echo -n &quot;GET / HTTP/1.0\\r\\n\\r\\n&quot; | nc php.net 80</span><br><span class=\"line\">HTTP/1.1 400 Bad Request</span><br><span class=\"line\">Server: nginx/1.6.2</span><br><span class=\"line\">Date: Tue, 16 Dec 2014 08:09:35 GMT</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Content-Length: 172</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;</span><br><span class=\"line\">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class=\"line\">&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;/h1&gt;&lt;/center&gt;</span><br><span class=\"line\">&lt;hr&gt;&lt;center&gt;nginx/1.6.2&lt;/center&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h3><p>端口扫描的作用还是比较大的，使用nc可以方便的进行端口扫描</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nc -z letv.com 1-100</span><br></pre></td></tr></table></figure>\n<p>这里的1-100指定了扫描的端口范围，-z参数告诉nc命令只报告开放的端口。<br>默认nc命令发送的是tcp请求，通过指定参数-u可以发送udp请求。</p>\n<h4 id=\"目录传输\"><a href=\"#目录传输\" class=\"headerlink\" title=\"目录传输\"></a>目录传输</h4><p>将server2的phpredis-master目录拷贝到server1。</p>\n<p>server1 :</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nc -l 1234|tar zxvf -</span><br></pre></td></tr></table></figure>\n<p>server2 :</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tar zcvf - phpredis-master|nc server1的IP地址 1234</span><br></pre></td></tr></table></figure>\n<h3 id=\"pstree命令\"><a href=\"#pstree命令\" class=\"headerlink\" title=\"pstree命令\"></a>pstree命令</h3><p>该命令用于显示进程树，以树的形式显示在运行的进程，树的根节点是指定的pid</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@cdn ~]# pstree -p $(pgrep -uroot php-fpm)</span><br></pre></td></tr></table></figure>\n<h3 id=\"ss-命令\"><a href=\"#ss-命令\" class=\"headerlink\" title=\"ss 命令\"></a>ss 命令</h3><p>ss命令用于显示socket的统计信息。</p>\n<h4 id=\"显示socket的汇总信息\"><a href=\"#显示socket的汇总信息\" class=\"headerlink\" title=\"显示socket的汇总信息\"></a>显示socket的汇总信息</h4><p>-s选项用于显示汇总信息</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ss -s</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看所有打开的网络端口\"><a href=\"#查看所有打开的网络端口\" class=\"headerlink\" title=\"查看所有打开的网络端口\"></a>查看所有打开的网络端口</h4><p>-l选项用于列出当前正在监听的socket</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ss -l</span><br></pre></td></tr></table></figure>\n<p>使用ss -pl可以查看使用网络端口的进程名称，这里的-p选项用于显示进程信息</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ss -pl</span><br></pre></td></tr></table></figure>\n<h4 id=\"显示所有的TCP-UDP-Socket\"><a href=\"#显示所有的TCP-UDP-Socket\" class=\"headerlink\" title=\"显示所有的TCP/UDP Socket\"></a>显示所有的TCP/UDP Socket</h4><p>参数-a用于显示所有的socket，-t指定是TCP，-u是UDP，-w是RAW，-x是UNIX。</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ss -t -a</span><br><span class=\"line\"># ss -u -a</span><br><span class=\"line\"># ss -w -a</span><br><span class=\"line\"># ss -x -a</span><br></pre></td></tr></table></figure>\n<h3 id=\"w-who-命令\"><a href=\"#w-who-命令\" class=\"headerlink\" title=\"w/who 命令\"></a>w/who 命令</h3><p>w命令用于查看当前哪些用户登录到系统和他们正在做什么，who命令仅用于查看哪些用户登录系统</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># w</span><br></pre></td></tr></table></figure>\n<h3 id=\"iostat-命令\"><a href=\"#iostat-命令\" class=\"headerlink\" title=\"iostat 命令\"></a>iostat 命令</h3>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># iostat</span><br></pre></td></tr></table></figure>\n<p>通过指定 -d 参数可以设定自动按照指定时间间隔显示统计信息。<br>例如，下列命令每隔2s显示一次。</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># iostat -d 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"iptraf-命令\"><a href=\"#iptraf-命令\" class=\"headerlink\" title=\"iptraf 命令\"></a>iptraf 命令</h3><p>实时网络统计，交互式的IP网络实时监控工具，图形化界面，比较方便</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># iptraf</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看-Linux-的版本\"><a href=\"#查看-Linux-的版本\" class=\"headerlink\" title=\"查看 Linux 的版本\"></a>查看 Linux 的版本</h4><p>在RedHat和Cent OS下，查看当前系统的版本</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/centos-release</span><br></pre></td></tr></table></figure>\n<h3 id=\"time-命令\"><a href=\"#time-命令\" class=\"headerlink\" title=\"time 命令\"></a>time 命令</h3><p>统计程序执行时间，这些时间包括程序从被调用到终止的时间，用户CPU时间，系统CPU时间。</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ time ls</span><br></pre></td></tr></table></figure>\n<h3 id=\"tee-命令\"><a href=\"#tee-命令\" class=\"headerlink\" title=\"tee 命令\"></a>tee 命令</h3><p>用于将标准输入拷贝到标准输出</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &quot;hello,world&quot;|tee -a test.txt</span><br></pre></td></tr></table></figure>\n<p>上述命令将hello，world字符串输出到test.txt文件中，”-a”默认情况下，tee命令会使用”&gt;”覆盖输出到文件，使用”-a”属性，会使用”&gt;&gt;”追加方式</p>\n<h3 id=\"netstat-命令\"><a href=\"#netstat-命令\" class=\"headerlink\" title=\"netstat 命令\"></a>netstat 命令</h3><p>查看端口占用情况</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># netstat -apn</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-a：显示所有的socket信息</li>\n<li>-p：显示每个socket所属于的进程名称和pid</li>\n<li>-n：显示数字形式的地址而不是符号化的主机名/端口或者用户名</li>\n</ul>\n<h3 id=\"perf-命令\"><a href=\"#perf-命令\" class=\"headerlink\" title=\"perf 命令\"></a>perf 命令</h3><p>perf命令是随Linux内核代码一同发布和维护的性能诊断工具，它还可以用于内核代码的性能统计和分析<br>没有该命令的话，可以使用yum进行安装</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install perf</span><br></pre></td></tr></table></figure>\n<h4 id=\"perf-stat\"><a href=\"#perf-stat\" class=\"headerlink\" title=\"perf stat\"></a>perf stat</h4><p>perf stat通过概括精简的方式提供被调试程序运行的整体情况和汇总数据。</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ perf stat ./test</span><br></pre></td></tr></table></figure>\n<h4 id=\"perf-top\"><a href=\"#perf-top\" class=\"headerlink\" title=\"perf top\"></a>perf top</h4><p>用于实时显示当前系统的性能统计信息。该命令主要用来观察整个系统当前的状态，比如可以通过查看该命令的输出来查看当前系统最耗时的内核函数或某个用户进程。<br>执行该命令需要root权限。   </p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo perf top</span><br></pre></td></tr></table></figure>\n<h3 id=\"lsof-命令\"><a href=\"#lsof-命令\" class=\"headerlink\" title=\"lsof 命令\"></a>lsof 命令</h3><p>工具lsof是一个可以列出操作系统打开的文件的工具，常用参数：</p>\n<ul>\n<li>lsof filename 显示打开指定文件的所有进程</li>\n<li>lsof -a 表示两个参数都必须满足时才显示结果</li>\n<li>lsof -c string 显示COMMAND列中包含指定字符的进程所有打开的文件</li>\n<li>lsof -u username 显示所属user进程打开的文件</li>\n<li>lsof -g gid 显示归属gid的进程情况</li>\n<li>lsof +d /DIR/ 显示目录下被进程打开的文件</li>\n<li>lsof +D /DIR/ 同上，但是会搜索目录下的所有目录，时间相对较长</li>\n<li>lsof -d FD 显示指定文件描述符的进程</li>\n<li>lsof -n 不将IP转换为hostname，缺省是不加上-n参数</li>\n<li>lsof -i 用以显示符合条件的进程情况</li>\n<li>lsof -p PID 选择指定PID</li>\n<li><p>lsof -i[46] protocol[:service|port]</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">46: IPv4 or IPv6</span><br><span class=\"line\">protocol: TCP or UDP</span><br><span class=\"line\">hostname: Internet host name</span><br><span class=\"line\">hostaddr: IPv4地址</span><br><span class=\"line\">service: /etc/service中的 service name (可以不只一个)</span><br><span class=\"line\">port: 端口号 (可以不只一个)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"unzip-命令\"><a href=\"#unzip-命令\" class=\"headerlink\" title=\"unzip 命令\"></a>unzip 命令</h3><p>unzip命令用于解压.zip文件，常用参数：</p>\n<ul>\n<li>-f：只更新磁盘上已经存在的文件</li>\n<li>-u：更新磁盘上存在的文件，文件不存在则创建</li>\n<li>-o：如果文件已经存在则直接覆盖，不提示</li>\n<li>d：指定解压到的目录</li>\n</ul>\n<p>解压test.zip到/var/www目录，部署web站点</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># unzip -u -o -d /var/www test.zip</span><br><span class=\"line\"># chown -R www:www /var/www</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用pushd和popd命令快速切换目录\"><a href=\"#使用pushd和popd命令快速切换目录\" class=\"headerlink\" title=\"使用pushd和popd命令快速切换目录\"></a>使用pushd和popd命令快速切换目录</h3>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pwd</span><br><span class=\"line\">/Users/mylxsw/codes/php/lecloud/api</span><br><span class=\"line\">$ pushd .</span><br><span class=\"line\">~/codes/php/lecloud/api ~/codes/php/lecloud/api</span><br><span class=\"line\">$ cd ../album/</span><br><span class=\"line\">$ pwd</span><br><span class=\"line\">/Users/mylxsw/codes/php/lecloud/album</span><br><span class=\"line\">$ popd</span><br><span class=\"line\">~/codes/php/lecloud/api</span><br><span class=\"line\">$ pwd</span><br><span class=\"line\">/Users/mylxsw/codes/php/lecloud/api</span><br></pre></td></tr></table></figure>\n<h3 id=\"SCP-命令\"><a href=\"#SCP-命令\" class=\"headerlink\" title=\"SCP 命令\"></a>SCP 命令</h3><p>服务器和本地计算机之间传递文件。<br>从服务器下载文件</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp username@服务器地址:/path/文件名 本地保存路径</span><br></pre></td></tr></table></figure>\n<p>上传文件到服务器</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp 本地文件路径 username@服务器地址:/保存到服务器的路径</span><br></pre></td></tr></table></figure>\n","categories":["Expand"],"tags":["Linux"]},{"title":"MongoDB使用","url":"https://feifaninternet.github.io/2018/03/28/MongoDB使用/","content":"<h3 id=\"MongoDB-命令\"><a href=\"#MongoDB-命令\" class=\"headerlink\" title=\"MongoDB 命令\"></a>MongoDB 命令</h3><h4 id=\"数据库相关\"><a href=\"#数据库相关\" class=\"headerlink\" title=\"数据库相关\"></a>数据库相关</h4><ul>\n<li><p>创建数据库</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use database_name</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果数据库不存在则创建数据库，否则切换到指定数据库。</p>\n<ul>\n<li><p>切换到指定数据库</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switched to db xfan</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>查看所有数据库</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show dbs</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>刚创建的数据库并不会在数据库列表中，我们需要向其中插入一些数据后它才会显示。</p>\n<ul>\n<li><p>删除数据库</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.dropDatabase()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>先切换到需要删除的数据库，在执行这个操作。该命令为删除当前数据库，默认为test</p>\n<ul>\n<li><p>删除集合</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.drop()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"文档操作\"><a href=\"#文档操作\" class=\"headerlink\" title=\"文档操作\"></a>文档操作</h4><ul>\n<li><p>插入文档</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection_name.insert(document)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>示例：<br>将文档存储在xfan集合中</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.xfan.insert(&#123;</span><br><span class=\"line\">\t    title: &apos;MongoDB命令&apos;,</span><br><span class=\"line\">\t    by: &apos;xfan&apos;,</span><br><span class=\"line\">\t    url: &apos;http://www.mongodb.org.cn&apos;,</span><br><span class=\"line\">\t    tags: [&apos;mongodb&apos;,&apos;database&apos;,&apos;Nosql&apos;],</span><br><span class=\"line\">\t    likes: 100\t</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>如果数据库中不存在集合xfan，mongodb会自动创建集合并插入文档。</p>\n<p>我们也可以将数据定义为一个变量，然后再进行插入：</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document = (&#123;</span><br><span class=\"line\">    title: &apos;MongoDB命令&apos;,</span><br><span class=\"line\">    by: &apos;xfan&apos;,</span><br><span class=\"line\">    url: &apos;http://www.mongodb.org.cn&apos;,</span><br><span class=\"line\">    tags: [&apos;mongodb&apos;,&apos;database&apos;,&apos;Nosql&apos;],</span><br><span class=\"line\">    likes: 100\t</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.insert(document)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>查看已插入的文档</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.find()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>更新文档</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.update(    </span><br><span class=\"line\">        &lt;query&gt;, </span><br><span class=\"line\">        &lt;update&gt;, </span><br><span class=\"line\">        &#123;       </span><br><span class=\"line\">            upsert: &lt;boolean&gt;,   </span><br><span class=\"line\">            multi: &lt;boolean&gt;,  </span><br><span class=\"line\">            writeConcern: &lt;document&gt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> )</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>参数说明：   </p>\n<ul>\n<li>query: update的查询条件，类似 sql update查询内where后面的。</li>\n<li>update： updated的对象和一些更新的操作符等，也可以理解为sql update查询内set后面的。</li>\n<li>upsert： 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew</li>\n<li>multi： 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li>\n<li>writeConcern： 可选，抛出异常的级别。</li>\n</ul>\n<p>如：我们在集合col中插入如下数据：   </p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.insert(&#123;  </span><br><span class=\"line\">           title: &apos;xfan blog&apos;,  </span><br><span class=\"line\">           description: &apos;xfan blog have a nice party&apos;,   </span><br><span class=\"line\">           by: &apos;xfan&apos;,   </span><br><span class=\"line\">           url: &apos;http://www.mongodb.org.cn&apos;,   </span><br><span class=\"line\">           tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],  </span><br><span class=\"line\">           likes: 100  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.update(</span><br><span class=\"line\">           &#123;&apos;title&apos;:&apos;xfan blog&apos;&#125;,</span><br><span class=\"line\">           &#123;$set:&#123;&apos;title&apos;:&apos;xfan&apos;&#125;&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.find().pretty()</span><br><span class=\"line\">结果：&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),  </span><br><span class=\"line\">           &quot;title&quot; : &quot;xfan&quot;,   </span><br><span class=\"line\">           &quot;description&quot; : &quot;xfan blog have a nice party&quot;,  </span><br><span class=\"line\">           &quot;by&quot; : &quot;xfan&quot;,      </span><br><span class=\"line\">           &quot;url&quot; : &quot;http://www.mongodb.org.cn&quot;, </span><br><span class=\"line\">           &quot;tags&quot; : [   </span><br><span class=\"line\">               &quot;mongodb&quot;,   </span><br><span class=\"line\">               &quot;database&quot;,   </span><br><span class=\"line\">               &quot;NoSQL&quot;      </span><br><span class=\"line\">           ],      </span><br><span class=\"line\">           &quot;likes&quot; : 100  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现该文档已经更新，但是以上语句只会修改第一条发现的文档，如果需要修改多条相同的文档，则需要设置multi参数为true。<br>如：   </p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.update(&#123;</span><br><span class=\"line\">    &apos;title&apos;:&apos;xfan blog&apos;&#125;,</span><br><span class=\"line\">    &#123;$set:&#123;&apos;title&apos;:&apos;xfan&apos;&#125;&#125;，</span><br><span class=\"line\">    &#123;multi:true&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>save()更新文档</li>\n</ul>\n<p>我们也可以使用save()方法替换已有文档，来达到更新文档的目的。</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.save(    </span><br><span class=\"line\">    &lt;document&gt;,     </span><br><span class=\"line\">    &#123;      </span><br><span class=\"line\">\t      writeConcern: &lt;document&gt; </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li>document: 文档数据。</li>\n<li>writeConcern: 可选，抛出异常的级别。</li>\n</ul>\n<p>执行此命令，保存一个_id与需要更新的文档相同的文档，即可替换需要更新的文档达到目的。</p>\n<ul>\n<li><p>删除文档</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.remove(     </span><br><span class=\"line\">           &lt;query&gt;,     </span><br><span class=\"line\">           &#123;       </span><br><span class=\"line\">               justOne: &lt;boolean&gt;,</span><br><span class=\"line\">               writeConcern: &lt;document&gt; </span><br><span class=\"line\">           &#125; </span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>参数说明：</p>\n<ul>\n<li>query: 可选，删除文档的条件。</li>\n<li>justOne: 可选，如果设置为true或者1，则只删除一个文档。</li>\n<li>writeConcern: 可选，抛出异常的级别。</li>\n</ul>\n<p>移除 title 为 ‘xfan blog’ 的文档:</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.remove(&#123;&apos;title&apos;:&apos;MongoDB 教程&apos;&#125;)</span><br></pre></td></tr></table></figure>\n<p>只移除第一条找到的记录</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</span><br></pre></td></tr></table></figure>\n<p>删除集合中的所有数据</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"MongoDB-操作符\"><a href=\"#MongoDB-操作符\" class=\"headerlink\" title=\"MongoDB 操作符\"></a>MongoDB 操作符</h4><ul>\n<li>大于(&gt;) —- $gt  </li>\n<li>小于(&lt;) —- $lt</li>\n<li>大于等于(&gt;=) —- $gte</li>\n<li>小于等于(&lt;=) —- $lte</li>\n</ul>\n<p>如：db.xfan.find({“likes”:{$gt:100}})</p>\n<h4 id=\"MongoDB-type-操作符\"><a href=\"#MongoDB-type-操作符\" class=\"headerlink\" title=\"MongoDB $type 操作符\"></a>MongoDB $type 操作符</h4><p>每种类型对应的数字如下：  </p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th style=\"text-align:center\">数字</th>\n<th style=\"text-align:right\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Double</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>String</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>Object</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>Array</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>Binary data</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>Undefined</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:right\">已废弃</td>\n</tr>\n<tr>\n<td>Object id</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>Date</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>Null</td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>Regular Expression</td>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>JavaScript (with scope)</td>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>32-bit integer</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>Timestamp</td>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>64-bit integer</td>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>Min key</td>\n<td style=\"text-align:center\">255</td>\n<td style=\"text-align:right\">Query with -1</td>\n</tr>\n<tr>\n<td>Max key</td>\n<td style=\"text-align:center\">127</td>\n</tr>\n</tbody>\n</table>\n<p>如果想获取’xfan’集合中title为String的数据，可以使用<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.xfan.find(&#123;&quot;title&quot; : &#123;$type : 2&#125;&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"MongoDB-的-Limit-与-Skip-方法\"><a href=\"#MongoDB-的-Limit-与-Skip-方法\" class=\"headerlink\" title=\"MongoDB 的 Limit 与 Skip 方法\"></a>MongoDB 的 Limit 与 Skip 方法</h4><p>查询集合中的两条记录: </p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br></pre></td></tr></table></figure>\n<p>如果没有指定limit()方法中的参数则显示集合中的所有数据。</p>\n<p>使用 skip() 方法只显示第二条文档数据: </p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br></pre></td></tr></table></figure>\n<p>skip() 方法默认参数为0。</p>\n<h4 id=\"MongoDB-的排序\"><a href=\"#MongoDB-的排序\" class=\"headerlink\" title=\"MongoDB 的排序\"></a>MongoDB 的排序</h4><p>在MongoDB中使用使用sort()方法对数据进行排序，sort()方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而-1是用于降序排列。<br>语法如下:</p>\n<ul>\n<li><p>升序</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.COLLECTION_NAME.find().sort(&#123;KEY:1&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>降序</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.COLLECTION_NAME.find().sort(&#123;KEY:-1&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["database"],"tags":["MongoDB"]},{"title":"MongoDB 简介","url":"https://feifaninternet.github.io/2018/03/27/MongoDB/","content":"<h3 id=\"Nosql-简介\"><a href=\"#Nosql-简介\" class=\"headerlink\" title=\"Nosql 简介\"></a>Nosql 简介</h3><p>要学习MongoDB需要先了解NoSQL。<br>之前我们的数据库系统都是使用的关系模型，Nosql泛指非关系型的数据库。超大规模和高并发的SNS类型的web2.0纯动态网站传统的关系数据库已经显得力不从心，Nosql数据库的产生就是为了解决这些问题,Nosql用于超大规模数据的存储。   </p>\n<h4 id=\"关系型数据库遵循-ACID-规则\"><a href=\"#关系型数据库遵循-ACID-规则\" class=\"headerlink\" title=\"关系型数据库遵循 ACID 规则\"></a>关系型数据库遵循 ACID 规则</h4><p>事物的特性：</p>\n<p>1.A(Atomicity)原子性<br>原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。   </p>\n<p>2.C(Consistency)一致性<br>一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。</p>\n<p>3.I(Isolation)独立性<br>所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。</p>\n<p>4.D(Durability)持久性<br>持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</p>\n<h4 id=\"Nosql-的特性\"><a href=\"#Nosql-的特性\" class=\"headerlink\" title=\"Nosql 的特性\"></a>Nosql 的特性</h4><ol>\n<li>Not only sql，不仅仅是sql</li>\n<li>没有声明性的查询语言</li>\n<li>没有预定义的模式</li>\n<li>键-值对存储，列存储，文档存储，图形数据库</li>\n<li>最终一致性，而非 ACID 属性</li>\n<li>非结构化和不可预知的数据</li>\n<li>CAP定理</li>\n<li>高性能，高可用性和可伸缩性      </li>\n</ol>\n<h4 id=\"CAP-定理\"><a href=\"#CAP-定理\" class=\"headerlink\" title=\"CAP 定理\"></a>CAP 定理</h4><p>在计算机科学中，CAP定理又被称作布鲁尔定理，它指出一个分布式计算系统不可能同时满足的三点：</p>\n<ul>\n<li>一致性(Consistency),所有节点在同一时间具有相同的数据。</li>\n<li>可用性(Availability),保证每个请求不管成功失败都有响应</li>\n<li>分隔容忍(Partition tolerance),系统中任意信息的丢失或者失败不会影响系统的继续运作。</li>\n</ul>\n<p>CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性，最多只能同时较好的满足其中两个。   </p>\n<ul>\n<li>CA：单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。</li>\n<li>CP： 满足一致性，分区容忍性的系统，通常性能不是特别高。(比如 Zookeeper)</li>\n<li>AP：满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。(比如 Eureka)</li>\n</ul>\n<h4 id=\"Nosql的优缺点\"><a href=\"#Nosql的优缺点\" class=\"headerlink\" title=\"Nosql的优缺点\"></a>Nosql的优缺点</h4><p>优点：</p>\n<ul>\n<li>高可扩展性</li>\n<li>分布式计算</li>\n<li>低成本</li>\n<li>架构的灵活性，半结构化数据</li>\n<li>没有复杂的关系</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>没有标准化</li>\n<li>有限的查询功能</li>\n<li>最终一致时不直观的程序</li>\n</ul>\n<h4 id=\"Nosql-数据库分类\"><a href=\"#Nosql-数据库分类\" class=\"headerlink\" title=\"Nosql 数据库分类\"></a>Nosql 数据库分类</h4><table>\n<thead>\n<tr>\n<th>类型</th>\n<th style=\"text-align:center\">部分代表</th>\n<th style=\"text-align:right\">特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>列存储</td>\n<td style=\"text-align:center\">Hbase，CassandraH，ypertable</td>\n<td style=\"text-align:right\">按列存储数据。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。</td>\n</tr>\n<tr>\n<td>文档存储</td>\n<td style=\"text-align:center\">MongoDB,CouchDB</td>\n<td style=\"text-align:right\">文档存储一般用类似json的格式存储，存储的内容是文档型的。这样也就有有机会对某些字段建立索引，实现关系数据库的某些功能。</td>\n</tr>\n<tr>\n<td>key-value存储</td>\n<td style=\"text-align:center\">Tyrant,BerkeleyDB,MemcacheDB,Redis</td>\n<td style=\"text-align:right\">可以通过key快速查询到其value。一般来说，存储不管value的格式，照单全收</td>\n</tr>\n<tr>\n<td>图存储</td>\n<td style=\"text-align:center\">Neo4J，FlockDB</td>\n<td style=\"text-align:right\">图形关系的最佳存储。使用传统关系数据库来解决的话性能低下，而且设计使用不方便。</td>\n</tr>\n<tr>\n<td>对象存储</td>\n<td style=\"text-align:center\">db4o，Versant</td>\n<td style=\"text-align:right\">通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据。</td>\n</tr>\n<tr>\n<td>xml数据库</td>\n<td style=\"text-align:center\">BaseX，BerkeleyDB</td>\n<td style=\"text-align:right\">高效的存储XML数据，并支持XML的内部查询语法。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"MongoDB-简介\"><a href=\"#MongoDB-简介\" class=\"headerlink\" title=\"MongoDB 简介\"></a>MongoDB 简介</h3><p>MongoDB是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。在高负载的情况下，添加更多的节点，可以保证服务器性能。MongoDB旨在WEB应用提供可扩展的高性能数据存储解决方案。MongoDB将数据存储为一个文档，数据结构由键值对组成。MongoDB文档类似于json对象。字段值可以包含其他文档，数组及文档数组。</p>\n<h4 id=\"MongoDB的特点\"><a href=\"#MongoDB的特点\" class=\"headerlink\" title=\"MongoDB的特点\"></a>MongoDB的特点</h4><ul>\n<li>MongoDB的提供了一个面向文档存储，操作起来比较简单和容易。</li>\n<li>你可以在MongoDB记录中设置任何属性的索引来实现更快的排序。</li>\n<li>你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</li>\n<li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</li>\n<li>Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li>\n<li>MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li>\n<li>Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。</li>\n<li>Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</li>\n<li>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</li>\n<li>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li>\n<li>MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li>\n<li>MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li>\n<li>MongoDB安装简单。注意：国内下载需要翻墙，不然会停在下载页面，不出现下载框</li>\n</ul>\n<h4 id=\"MongoDB的概念解析\"><a href=\"#MongoDB的概念解析\" class=\"headerlink\" title=\"MongoDB的概念解析\"></a>MongoDB的概念解析</h4><table>\n<thead>\n<tr>\n<th>SQL术语/概念</th>\n<th style=\"text-align:center\">MongoDB术语/概念</th>\n<th style=\"text-align:right\">解释/说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>database</td>\n<td style=\"text-align:center\">database</td>\n<td style=\"text-align:right\">数据库</td>\n</tr>\n<tr>\n<td>table</td>\n<td style=\"text-align:center\">collection</td>\n<td style=\"text-align:right\">数据库表/集合</td>\n</tr>\n<tr>\n<td>row</td>\n<td style=\"text-align:center\">document</td>\n<td style=\"text-align:right\">数据记录行/文档</td>\n</tr>\n<tr>\n<td>column</td>\n<td style=\"text-align:center\">field</td>\n<td style=\"text-align:right\">数据字段/域</td>\n</tr>\n<tr>\n<td>index</td>\n<td style=\"text-align:center\">index</td>\n<td style=\"text-align:right\">索引</td>\n</tr>\n<tr>\n<td>table joins</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">表连接,MongoDB不支持</td>\n</tr>\n<tr>\n<td>primary key</td>\n<td style=\"text-align:center\">primary key</td>\n<td style=\"text-align:right\">主键,MongoDB自动将_id字段设置为主键</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>一个mongodb中可以建立多个数据库。<br>MongoDB的默认数据库为db，改数据库存储在data目录中。<br>MongoDB的单个示例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。<br>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库：</p>\n<ul>\n<li>admin：从权限的角度来看，这是”root”数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li>\n<li>local：这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合。</li>\n<li>config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li>\n</ul>\n<h4 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h4><p>文档是一个键值(key-value)对(即BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。<br>需要注意到是：</p>\n<ol>\n<li>文档中的键/值对是有序的</li>\n<li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li>\n<li>MongoDB区分类型和大小写。</li>\n<li>MongoDB的文档不能有重复的键。</li>\n<li>文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</li>\n</ol>\n<p>文档键命名规范：</p>\n<ol>\n<li>键不能含有\\0 (空字符)。这个字符用来表示键的结尾。</li>\n<li>.和$有特别的意义，只有在特定环境下才能使用。</li>\n<li>以下划线”_”开头的键是保留的(不是严格要求的)。</li>\n</ol>\n<h4 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h4><p>集合就是MongoDB文档组，集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。<br>比如，我们可以将以下不同数据结构的文档插入到集合中：</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;site&quot;:&quot;www.baidu.com&quot;&#125;  &#123;&quot;site&quot;:&quot;www.google.com&quot;,&quot;name&quot;:&quot;Google&quot;&#125;  </span><br><span class=\"line\">&#123;&quot;site&quot;:&quot;www.runoob.com&quot;,&quot;name&quot;:&quot;菜鸟教程&quot;,&quot;num&quot;:5&#125;</span><br></pre></td></tr></table></figure>\n<p>当第一个文档插入时，集合就会被创建。</p>\n<h4 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h4><p>数据库的信息是存储在集合中。他们使用了系统的命名空间：</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbname.system.*</span><br></pre></td></tr></table></figure>\n<p>在MongoDB数据库中名字空间 <dbname>.system.* 是包含多种系统信息的特殊集合(Collection)，如下:   </dbname></p>\n<table>\n<thead>\n<tr>\n<th>集合命名空间</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dbname.system.namespaces</td>\n<td style=\"text-align:center\">列出所有名字空间。</td>\n</tr>\n<tr>\n<td>dbname.system.indexes</td>\n<td style=\"text-align:center\">列出所有索引。</td>\n</tr>\n<tr>\n<td>dbname.system.profile</td>\n<td style=\"text-align:center\">包含数据库概要(profile)信息。</td>\n</tr>\n<tr>\n<td>dbname.system.users</td>\n<td style=\"text-align:center\">列出所有可访问数据库的用户。</td>\n</tr>\n<tr>\n<td>dbname.local.sources</td>\n<td style=\"text-align:center\">包含复制对端（slave）的服务器信息和状态。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"MongoDB-数据类型\"><a href=\"#MongoDB-数据类型\" class=\"headerlink\" title=\"MongoDB 数据类型\"></a>MongoDB 数据类型</h4><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td style=\"text-align:center\">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td>\n</tr>\n<tr>\n<td>Integer</td>\n<td style=\"text-align:center\">整型数值。用于存储数值。</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td style=\"text-align:center\">布尔值。用于存储布尔值。</td>\n</tr>\n<tr>\n<td>Double</td>\n<td style=\"text-align:center\">双精度浮点值。用于存储浮点值。</td>\n</tr>\n<tr>\n<td>Min/Max keys</td>\n<td style=\"text-align:center\">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td>\n</tr>\n<tr>\n<td>Arrays</td>\n<td style=\"text-align:center\">用于将数组或列表或多个值存储为一个键。</td>\n</tr>\n<tr>\n<td>Timestamp</td>\n<td style=\"text-align:center\">时间戳。</td>\n</tr>\n<tr>\n<td>Object</td>\n<td style=\"text-align:center\">用于内嵌文档。</td>\n</tr>\n<tr>\n<td>Null</td>\n<td style=\"text-align:center\">用于创建空值。</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td style=\"text-align:center\">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。。</td>\n</tr>\n<tr>\n<td>Date</td>\n<td style=\"text-align:center\">日期时间。</td>\n</tr>\n<tr>\n<td>Object ID</td>\n<td style=\"text-align:center\">对象 ID。用于创建文档的 ID。</td>\n</tr>\n<tr>\n<td>Binary Data</td>\n<td style=\"text-align:center\">二进制数据。用于存储二进制数据。</td>\n</tr>\n<tr>\n<td>Code</td>\n<td style=\"text-align:center\">代码类型。用于在文档中存储 JavaScript 代码。</td>\n</tr>\n<tr>\n<td>Regular expression</td>\n<td style=\"text-align:center\">正则表达式类型。用于存储正则表达式。</td>\n</tr>\n</tbody>\n</table>\n","categories":["database"],"tags":["MongoDB"]},{"title":"HTTP协议","url":"https://feifaninternet.github.io/2018/03/27/HTTP协议/","content":"<h3 id=\"Http-简介\"><a href=\"#Http-简介\" class=\"headerlink\" title=\"Http 简介\"></a>Http 简介</h3><p>HTTP协议(HyperText Transfer Protocol,超文本传输协议)是用于WWW 服务器传输超文本到本地浏览器的传送协议，它可以使浏览器更加高效，使网络传输减少。</p>\n<h3 id=\"计算机之间的通信\"><a href=\"#计算机之间的通信\" class=\"headerlink\" title=\"计算机之间的通信\"></a>计算机之间的通信</h3><h4 id=\"TCP-IP-协议\"><a href=\"#TCP-IP-协议\" class=\"headerlink\" title=\"TCP/IP 协议\"></a>TCP/IP 协议</h4><p>计算机之间的通信是通过TCP/IP协议在因特网上进行的，实际上这是两个协议：</p>\n<ul>\n<li><p>IP:网际协议，计算机之间的通信</p>\n<p>IP协议是计算机用来相互识别的通信的一种机制，每台计算机都有一个IP.用来在internet上标识这台计算机。  IP 负责在因特网上发送和接收数据包。通过 IP，消息（或者其他数据）被分割为小的独立的包，并通过因特网在计算机之间传送。IP 负责将每个包路由至它的目的地。</p>\n</li>\n<li><p>TCP:传输控制协议，应用程序之间的通信</p>\n</li>\n</ul>\n<p>TCP确保数据包以正确的次序到达，并且尝试确认数据包的内容没有改变。当应用程序希望通过 TCP 与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方“握手”之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 通信(双向同时通信，即通信的双方可以同时发送和接口信息的信息交互方式)，占用两个计算机之间整个的通信线路。TCP 用于从应用程序到网络的数据传输控制，负责在数据传送之前将它们分割为 IP 包，然后在它们到达的时候将它们重组。</p>\n<h3 id=\"HTTP-所在协议层\"><a href=\"#HTTP-所在协议层\" class=\"headerlink\" title=\"HTTP 所在协议层\"></a>HTTP 所在协议层</h3><p>HTTP是基于TCP协议之上的，它是应用层协议。</p>\n<div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/protocol.jpg\" alt=\"各层的协议\" title=\"各层的协议\"><br></div>\n\n<h3 id=\"HTTP的请求响应\"><a href=\"#HTTP的请求响应\" class=\"headerlink\" title=\"HTTP的请求响应\"></a>HTTP的请求响应</h3><p>HTTP由请求和响应构成，是一个标准的客户端服务器模型（B/S）。HTTP协议永远都是客户端发起请求，服务器回送响应。<br>HTTP是一个无状态协议。无状态是指客户端和服务器不需要建立持久的连接，当客户端的请求得到了服务器的响应，连接就被关闭了，在服务器端不保留连接的有关信息，HTTP遵循请求应答模型(Request Response)。</p>\n<h3 id=\"HTTP工作工程\"><a href=\"#HTTP工作工程\" class=\"headerlink\" title=\"* HTTP工作工程\"></a>* HTTP工作工程</h3><p>1.地址解析<br>如果客户端浏览器请求这个页面：<a href=\"http://localhost:8080/index.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/index.html</a><br>从中分解出协议名，主机名，端口，对象路径等，解析结果如下:</p>\n<ul>\n<li>协议名:http    </li>\n<li>主机名：localhost   </li>\n<li>端口：8080   </li>\n<li>对象路径：/index.html</li>\n</ul>\n<p>在这一步，需要域名系统DNS解析域名localhost，得到主机的ip地址。</p>\n<p>2.封装HTTP请求数据包<br>把以上部分结合本机自己的信息，封装成一个HTTP请求数据包。   </p>\n<p>3.封装成TCP包，建立TCP连接（TCP的三次握手）<br>在HTTP工作开始之前，客户机（Web浏览器）首先要通过网络与服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能进行高层协议的连接，因此，首先要建立TCP连接。</p>\n<p>4.客户端发送请求命令<br>建立连接后，客户端发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息(多用途互联网邮件扩展，用于告诉浏览器服务器发送的多媒体数据的类型)包括请求修饰符、客户端信息和内容。</p>\n<p>5.服务器响应<br>服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。<br>实体消息是服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。</p>\n<p>6.服务器关闭TCP链接<br>一般情况下一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码</p>\n<pre><code>Connection:keep-alive\n</code></pre><p>TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p>\n<h3 id=\"HTTP-协议栈传输流\"><a href=\"#HTTP-协议栈传输流\" class=\"headerlink\" title=\"HTTP 协议栈传输流\"></a>HTTP 协议栈传输流</h3><p>客户端：   </p>\n<ol>\n<li>将请求封装成http数据包</li>\n<li>封装成tcp数据包</li>\n<li>封装成ip数据包</li>\n<li>封装成数据帧</li>\n<li>硬件将帧数据转换成bit流(二进制数据)</li>\n<li>通过物理硬件(网卡芯片)发送到指定地点</li>\n</ol>\n<p>服务器：<br>先底层再高层</p>\n<ol>\n<li>服务器硬件首先收到bit流</li>\n<li>将bit流转换成ip数据包</li>\n<li>通过ip协议解析ip数据包</li>\n<li>发现里面为tcp数据包，通过tcp协议解析tcp数据包</li>\n<li>接着发现是http数据，通过http协议解析得到数据</li>\n</ol>\n","categories":["Expand"],"tags":["http"]},{"title":"JAVA面试题","url":"https://feifaninternet.github.io/2018/03/24/JAVA面试题/","content":"<h3 id=\"面向对象的优点和特性\"><a href=\"#面向对象的优点和特性\" class=\"headerlink\" title=\"面向对象的优点和特性\"></a>面向对象的优点和特性</h3><ul>\n<li>优点</li>\n</ul>\n<ol>\n<li>代码开发模块化，更易维护和修改</li>\n<li>代码复用</li>\n<li>增强代码的可靠性和灵活性</li>\n<li>增加代码的可理解性</li>\n</ol>\n<ul>\n<li>特性</li>\n</ul>\n<ol>\n<li>封装：封装给对象提供了隐藏内部特性和行为的能力。对象提供一些能被其他对象访问的方法来改变它内部的数据。访问权限修饰符：public，private，protected<br>封装的好处：<ul>\n<li>通过隐藏对象的属性来保护对象内部的状态</li>\n<li>提高了代码的可用性和维护性，因为对象的行为可以被单独的改变或者是扩展</li>\n<li>禁止对象之间的不良交互提高模块化</li>\n</ul>\n</li>\n<li>继承：继承给对象提供了从基类获取字段和方法的能力。继承提高了代码的重用性，也可以在不修改类的情况下给现存的类添加新特性。</li>\n<li>抽象：抽象是把想法从具体的实例中分离出来的步骤，因此要根据他们的功能而不是实现细节来创建类。Java支持创建只暴露接口而不包含方法实现的抽象的类。这种抽象技术的主要目的是把类的行为和实现细节分离开。</li>\n<li>多态：多态是同一个行为具有多个不同的表现形式或形态的能力，就是同一个接口，使用不同的实例而执行不同的操作。</li>\n</ol>\n<h3 id=\"JDK-与-JRE-的区别\"><a href=\"#JDK-与-JRE-的区别\" class=\"headerlink\" title=\"JDK 与 JRE 的区别\"></a>JDK 与 JRE 的区别</h3><ol>\n<li>JRE是Java运行时环境，是将要执行Java程序的Java虚拟机。JDK是Java开发工具包，包含了JRE，编译器和其他工具，可以让开发者开发，编译，执行Java应用程序。  </li>\n</ol>\n<h3 id=\"MVC-体系结构\"><a href=\"#MVC-体系结构\" class=\"headerlink\" title=\"MVC 体系结构\"></a>MVC 体系结构</h3><p>MVC包括三类对性爱那个，model是应用对象，view是视图，controller是控制器，它定义用户界面对用户输入的响应法师。<br>在MVC体系中，模型通常被称为”业务逻辑”，是真正完成任务的代码，视图就是使用界面，反应数据的裱变化。控制器控制着模型和视图之间的交互过程，它决定着向用户返回怎样的视图，检查通过界面输入的信息以及选择处理输入信息的模型<br>在MVC中，表示层和逻辑层分离，各部分可相互独立进行开发，便于开发和维护，提高效率。</p>\n<h3 id=\"servlet-执行流程\"><a href=\"#servlet-执行流程\" class=\"headerlink\" title=\"servlet 执行流程\"></a>servlet 执行流程</h3><p>客户端发起 http 请求，web 服务器将请求转发到 servlet 容器，servlet 解析 url 并根据 web.xml 找到对应的 servlet,并将 request、response对象传递给找到的 servlet，servlet根据 request 就可以知道是谁发出的请求，请求信息及其他信息，当 servlet 处理完业务逻辑后会将信息放入到 response 并响应到客户端。</p>\n<h3 id=\"servlet-的生命周期\"><a href=\"#servlet-的生命周期\" class=\"headerlink\" title=\"servlet 的生命周期\"></a>servlet 的生命周期</h3><p>Servlet加载—-实例化—-服务—-销毁   </p>\n<ul>\n<li>init()：在服务器装入servlet时执行，负责初始化servlet对象，仅执行一次。</li>\n<li>service()：它是servlet的核心，负责响应客户端的请求，每当一个客户端请求一个httpServlet对象，该对象的Service()方法就要调用，而且传递给这个方法一个请求(ServletRequest)对象和一个响应(ServletResponse)对象作为参数，然后调用与HTTP请求的方法相应的do功能(doGet,doPost)</li>\n<li>destroy()：仅执行一次，在服务器端停止且卸载Servlet时执行该方法。当Servlet对象退出生命周期时，负责释放占用的资源。一个servlet在运行service()方法时可能会产生其他的线程，因此需要确认在调用destroy()方法时，这些线程都已经终止或完成。</li>\n</ul>\n<h3 id=\"springMVC-执行流程\"><a href=\"#springMVC-执行流程\" class=\"headerlink\" title=\"springMVC 执行流程\"></a>springMVC 执行流程</h3><p>springMVC 是由 dispatchServlet 为核心的分层控制框架。首先客户端发出一个请求，web 服务器解析请求 url 并去匹配 dispatchServlet 的映射 url，如果匹配上就将这个请求放入dispatchServlet，dispatchServlet根据 mapping 映射配置去寻找相对应的 handler，然后把处理权交给 handler，handler 封装了处理业务逻辑的代码，当 handler 处理完后会返回一个逻辑视图modelAndView给dispatchServlet，此时的modelAndView不是物理视图，所以dispatchServlet会通过viewResource视图资源去解析modelAndView，然后将解析后的参数放到view中返回给客户端。</p>\n<h3 id=\"AOP-与-IOC-的概念-即-spring-的核心原理\"><a href=\"#AOP-与-IOC-的概念-即-spring-的核心原理\" class=\"headerlink\" title=\"AOP 与 IOC 的概念(即 spring 的核心原理)\"></a>AOP 与 IOC 的概念(即 spring 的核心原理)</h3><ul>\n<li>IOC : 控制反转。主要强调的是程序之间的关系是由容器控制的，容器控制对象，控制了对外部资源的获取，我们的spring就像一个容器一样。在传统的编程中我们都是通过创建对象来获取对象的属性和依赖，而在IOC中，是容器帮我们创建对象，并注入依赖，容器帮我们查找和注入对象，对象是被获取，所以叫反转。</li>\n<li>AOP : 面向切面编程，主要是管理系统层的业务，比如日志，权限，事物等。AOP是将封装好的对象剖开，找出其中对多个对象产生影响的公共行为，并将其封装为一个可重用的模块，这个模块为切面，切面将那些与业务逻辑无关，却被业务模块共同调用的逻辑提取并封装起来，减少了系统中的重复代码，降低了模块之间的耦合度，同时提高了系统的可维护性。在项目中使用AOP的地方有很多，比如，我们会使用AOP校验请求参数，验证 token，管理员权限拦截，日志信息，response状态码改变等等。</li>\n</ul>\n<h3 id=\"Hibernate-原理\"><a href=\"#Hibernate-原理\" class=\"headerlink\" title=\"Hibernate 原理\"></a>Hibernate 原理</h3><ol>\n<li>读取并解析hibernate.cfg.xml配置文件</li>\n<li>读取并解析映射信息</li>\n<li>创建SessionFactory</li>\n<li>负责被持久化对象CRUD操作，打开Session</li>\n<li>创建并启动事物Transaction</li>\n<li>操作数据，持久化操作</li>\n<li>提交事物，关闭Session，关闭SessionFactory</li>\n</ol>\n<h3 id=\"Hibernate-的三种状态和区别\"><a href=\"#Hibernate-的三种状态和区别\" class=\"headerlink\" title=\"Hibernate 的三种状态和区别\"></a>Hibernate 的三种状态和区别</h3><ol>\n<li>瞬时(transient)：也叫自由状态。数据库中没有数据组与之对应，超过作用域会被JVM垃圾回收器回收，一般是new出来且与session没有关联的对象</li>\n<li>持久(persistent)：数据库中可能有数据与之对应,当前与session有关联，并且相关联的session没有关闭，事物没有提交；持久对象状态发生改变，在事物提交时会影响到数据库。</li>\n<li>脱管(detached)：也叫游离状态，数据库中可能有数据与之对应，但是当前没有session与之关联，但是有oid；托管对象状态发生改变，hibernate不能检测到。</li>\n<li>区别：瞬时状态的实体缺乏与数据库表记录之间的联系，而脱管状态的的实体恰恰相反。</li>\n</ol>\n<h3 id=\"Mybatis-原理\"><a href=\"#Mybatis-原理\" class=\"headerlink\" title=\"Mybatis 原理\"></a>Mybatis 原理</h3><ol>\n<li>加载配置，包括配置文件，代码中的注解，将SQL的配置信息加载成为一个个MappedStatement对象(包括传入参数映射配置，执行的SQL语句，结果映射配置)，存储在内存中。</li>\n<li>SQL解析：当API接口层接收到调用请求时，会接收到传入SQL的ID和传入对象，Mybatis根据SQL的ID找到对应的MappedStatement,然后根据传入参数对象对MappedStatement进行解析，解析后可以得到最终要执行的SQL语句和参数。</li>\n<li>SQL执行：将最终得到的SQL和参数拿到数据库进行执行，得到操作数据库的结果。</li>\n<li>结果映射：将操作数据库的结果按照映射的配置进行转换，返回最终结果。<br><img src=\"/picture/Mybatis.png\" alt=\"Mybatis框架结构\"></li>\n</ol>\n<h3 id=\"JDBC-操作步骤\"><a href=\"#JDBC-操作步骤\" class=\"headerlink\" title=\"JDBC 操作步骤\"></a>JDBC 操作步骤</h3><ol>\n<li>加载驱动：Class.forName(“com.mysql.jdbc.Driver”)</li>\n<li>创建连接</li>\n<li>创建Statement对象，创建语句</li>\n<li>执行sql语句</li>\n<li>处理结果</li>\n<li>释放资源</li>\n</ol>\n<h3 id=\"数据库优化\"><a href=\"#数据库优化\" class=\"headerlink\" title=\"数据库优化\"></a>数据库优化</h3><ol>\n<li>选择合适的字段，设置合适的长度，尽量把字段设置为notNull，这样查询的时候数据库就不需要比较null值。</li>\n<li>使用关联查询代替子查询，不仅提高性能，而且避免子查询的锁问题。</li>\n<li>使用union联合查询手动创建临时表。</li>\n<li>开启事物，当数据库执行多条语句出现错误时，事物会回滚，可以维护数据库的完整性。</li>\n<li>使用外键，事物可以维护数据的完整性但是它不能保证数据的关联性，使用外键可以保证数据的关联性。</li>\n<li>使用索引，索引是提高数据库性能的常用方法，它可以让数据库以更快的速度检索特定的行，特别是对于max，min，order by查询时，效果很明显。</li>\n<li>优化查询语句。这点会在之后详细总结。</li>\n<li>创建视图或存储过程，这样可以聚焦特定的数据，简化数据操作。</li>\n</ol>\n<h3 id=\"Get-与-Post-的区别\"><a href=\"#Get-与-Post-的区别\" class=\"headerlink\" title=\"Get 与 Post 的区别\"></a>Get 与 Post 的区别</h3><ol>\n<li>get是从服务器上获取数据，post是向服务器传送数据。</li>\n<li>get 传送的数据量小，post传送的数据量较大。</li>\n<li>get方式服务器端用request.queryString获取变量的值，post方式服务器端用request.form获取提交的数据。</li>\n<li>get携带的参数和访问地址用户可见，post将字段与对应值封装在实体中传送，用户不可见，但是我们可以抓包看到。</li>\n<li>get幂等，post不幂等(幂等是指同一个请求方法执行多次和仅执行一次的效果完全相同),这就是我们浏览器在刷新/后退遇到post时会给用户提示的原因。</li>\n<li>网上有资料说get产生一个tcp数据包，post产生2个tcp数据包，这样的说法是不准确的，此说法指出: get请求浏览器会把http header 和 data 一并发送出去，服务器响应200返回数据，post方式请求浏览器会先发送header,服务器响应100 continue，浏览器再发送 data,在RFC(互联网规范)说明了如果你想在get 请求里带body,一样可以发送并等待 100 continue，这样是符合标准的，所以这样的说法并不准确。</li>\n</ol>\n<h3 id=\"ArrayList-与-LinkedList-的区别\"><a href=\"#ArrayList-与-LinkedList-的区别\" class=\"headerlink\" title=\"ArrayList 与 LinkedList 的区别\"></a>ArrayList 与 LinkedList 的区别</h3><p>ArrayList是线性表，底层是使用数组实现的，它在尾端插入和访问数据时效率较高，LinkedList是双向链表，它在中间插入或者头部插入时效率较高，在访问数据时效率较低。<br>下面你可以深入解析数组与链表的区别:   </p>\n<p>1.数组<br>数组是将元素在内存中连续存放(连序)，由于每个元素占用内存相同，可以通过下标迅速访问数组中任何元素，但是如果要在数组中增加或者删除一个元素，需要移动大量的元素，来空出或者填补空间。</p>\n<p>2.链表<br>链表中的元素在内存中不是顺序存储的(无序)，而是通过存在元素中的指针联系到一起，每个节点包括两个部分: 一个是存储数据元素的数据域，另一个是存储下一个节点地址的指针(这一点可以查看<a href=\"https://feifaninternet.github.io/2018/03/27/JAVA-Linked-List/\">链表底层</a>)。如果要访问链表中的一个元素，需要从第一个元素开始，一直找到需要的元素位置(查询修改慢),但是增加和删除操作就很容易，只需要修改元素中的指针就可以了。</p>\n<p>3.区别   </p>\n<ol>\n<li>存储位置：数组逻辑上相邻的元素在物理位置上也相邻，而链表不一定。</li>\n<li>存储空间：链表存放的内存空间可以是连续的，也可以是不连续的，数组则是连续的一段内存空间。一般情况下存放相同多的数据，数组占用较小的内存，而链表还需要存放其前驱和后继的空间。</li>\n<li>长度的可变性：链表的长度是按实际需要可以伸缩的，而数组的长度是在定义是要给定的，如果超出初始大小，则会出现溢出现象。</li>\n<li>按序号查找时：数组可以随机访问，时间复杂度为O(1),而链表不支持随机访问，平均需要O(n)。</li>\n<li>按值查找时：若数组无序，数组和链表的时间复杂度均为O(1)，但是当数组有序时，可以采用二分法查询(这个不懂的同学先哭会),将时间复杂度将为O(logn)。</li>\n<li>插入和删除时：数组平均需要移动n/2个元素，而链表只需要修改指针即可。</li>\n<li>空间分配：数组在静态存储分配情形下，存储元素数量受限制，动态存储分配情形下，虽然存储空间可以扩充，但需要移动大量元素，数组从栈中分配空间，方便快捷但自由度小。链表在堆中分配空间，灵活高效，但是申请管理比较麻烦。</li>\n</ol>\n<h3 id=\"ArrayList-与-Vector-的区别\"><a href=\"#ArrayList-与-Vector-的区别\" class=\"headerlink\" title=\"ArrayList 与 Vector 的区别\"></a>ArrayList 与 Vector 的区别</h3><ol>\n<li>Vector可实现同步，ArrayList不考虑同步的安全问题，但是效率要高。</li>\n<li>如果两者的容量已满，Vector会按其容量的一倍增长，而ArrayList则按其容量的5%增加，所以Vector更能节省资源。</li>\n</ol>\n<h3 id=\"HashMap-和-HashTable-的区别\"><a href=\"#HashMap-和-HashTable-的区别\" class=\"headerlink\" title=\"HashMap 和 HashTable 的区别\"></a>HashMap 和 HashTable 的区别</h3><ul>\n<li>HashMap 允许键和值是null,而HashTable不允许。</li>\n<li>HashTable是同步的，适合多线程环境，而HashMap只适合单线程环境</li>\n<li>HashMap提供了可供应用迭代的键的集合，HashMap是快速失败的,另一方面,HashTable提供了对键的猎取</li>\n</ul>\n<h3 id=\"HTTP-协议的了解\"><a href=\"#HTTP-协议的了解\" class=\"headerlink\" title=\"HTTP 协议的了解\"></a>HTTP 协议的了解</h3><p>详见 <a href=\"https://feifaninternet.github.io/2018/03/27/HTTP%E5%8D%8F%E8%AE%AE/\">HTTP协议</a></p>\n<h3 id=\"类的实例化顺序\"><a href=\"#类的实例化顺序\" class=\"headerlink\" title=\"类的实例化顺序\"></a>类的实例化顺序</h3><ol>\n<li>父类静态变量</li>\n<li>父类静态代码块</li>\n<li>子类静态变量</li>\n<li>子类静态代码块</li>\n<li>父类非静态变量(父类实例成员变量)</li>\n<li>父类构造函数</li>\n<li>子类非静态变量(子类实例成员变量)</li>\n<li>子类构造方法</li>\n</ol>\n<h3 id=\"抽象类和接口的区别\"><a href=\"#抽象类和接口的区别\" class=\"headerlink\" title=\"抽象类和接口的区别\"></a>抽象类和接口的区别</h3><ol>\n<li>抽象类和接口都不能实例化，如果要实例化，抽象类变量必须指向实现所有抽象方法的子类对象，接口变量必须指向实现所有接口方法的类对象。</li>\n<li>抽象类要被子类继承，接口要被类实现。</li>\n<li>接口只能做方法申明，抽象类中可以做方法申明，也可以做方法实现。</li>\n<li>接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。</li>\n<li>抽象类里的抽象方法必须全部被子类所实现，如果子类不能全部实现父类抽象方法，那么该子类只能是抽象类。同样，一个实现接口的时候，如不能全部实现接口方法，那么该类也只能为抽象类。</li>\n<li>抽象方法只能申明，不能实现。</li>\n<li>抽象类里可以没有抽象方法 。</li>\n<li>如果一个类里有抽象方法，那么这个类只能是抽象类 。</li>\n<li>抽象方法要被实现，所以不能是静态的，也不能是私有的。 </li>\n<li>接口可继承接口，并可多继承接口，但类只能单继承。</li>\n</ol>\n<h3 id=\"JAVA-集合类\"><a href=\"#JAVA-集合类\" class=\"headerlink\" title=\"JAVA 集合类\"></a>JAVA 集合类</h3><p>Collection是最基本的集合接口，一个Collection代表一组Object，即Collection的元素。由Collection接口派生的两个接口是List和Set。</p>\n<h4 id=\"1-List-接口\"><a href=\"#1-List-接口\" class=\"headerlink\" title=\"1. List 接口\"></a>1. List 接口</h4><p>List是有序的Collection，使用此接口能够精确的控制每个元素插入的位置。用户能够使用索引(类似于数组中的下标),来访问list中的元素，List允许有相同的元素。<br>实现List接口的常用类有LinkedList，ArrayList，Vector和Stack。</p>\n<h4 id=\"2-Set-接口\"><a href=\"#2-Set-接口\" class=\"headerlink\" title=\"2. Set 接口\"></a>2. Set 接口</h4><p>Set 是一种不包含重复元素的Collection，Set最多有一个null元素。</p>\n<h4 id=\"3-Map-接口\"><a href=\"#3-Map-接口\" class=\"headerlink\" title=\"3. Map 接口\"></a>3. Map 接口</h4><p>Map没有继承Collection接口，Map提供key到value的映射。一个Map中不能包含相同的key，每个key只能映射一个value。</p>\n<h3 id=\"Spring-加载流程\"><a href=\"#Spring-加载流程\" class=\"headerlink\" title=\"Spring 加载流程\"></a>Spring 加载流程</h3><p>这里其实是在考核你对spring源码的理解，描述的深入清晰就能获得加分。<br>通过listener入口，核心是在AbstractApplicationContext的refresh方法，在此处构建BeanFactory，注册可能感兴趣的事件，创建Bean实例随想，触发被监听的事件等。AbstractApplicationContext 有一个抽象方法refreshBeanFactory，其中的一个方法loadBeanDefinitions(beanFactory) 将开始加载/解析Bean的定义，也就是把用户定义的数据结构转化为IOC容器中的特定数据结构,创建好BeanFactory后，AbstractApplicationContext的prepareBeanFactory的方法会添加一些工具类，支持对已构建的BeanFactory的配置修改和添加一些自定义的操作。</p>\n<h3 id=\"Spring-支持的几种-bean-的作用域\"><a href=\"#Spring-支持的几种-bean-的作用域\" class=\"headerlink\" title=\"Spring 支持的几种 bean 的作用域\"></a>Spring 支持的几种 bean 的作用域</h3><ol>\n<li>singleton : bean在每个Spring ioc 容器中只有一个实例。</li>\n<li>prototype : 一个bean的定义可以有多个实例。</li>\n<li>request : 每次http请求都会创建一个bean,该作用域仅在基于web的springApplicationContext情形下有效。</li>\n<li>session : 在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的springApplicationContext情形下有效。</li>\n<li>global-session : 在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的springApplicationContext情形下有效。</li>\n</ol>\n<h3 id=\"Spring-的通知类型\"><a href=\"#Spring-的通知类型\" class=\"headerlink\" title=\"Spring 的通知类型\"></a>Spring 的通知类型</h3><ol>\n<li>before : 前置通知，在一个方法执行前被调用。</li>\n<li>after : 在方法执行之后调用的通知，无论方法执行收否成功</li>\n<li>after-returning : 仅当方法完成之后执行</li>\n<li>after-throwing : 在方法抛出异常退出时执行的通知</li>\n<li>around : 在方法执行之前和之后调用的通知</li>\n</ol>\n<h3 id=\"Java-经典的设计模式\"><a href=\"#Java-经典的设计模式\" class=\"headerlink\" title=\"Java 经典的设计模式\"></a>Java 经典的设计模式</h3><ul>\n<li>单例模式：核心是只需要new一个实例对象，比如数据库连接，在线人数等。把一个计时器存放在数据库或者内存中，当有人登陆的时候取出来加一再放回去，有人退出登陆的时候取出来减一再放回去，但是当有两个人同时登陆的时候，会同时取出计数器，同时加一，同时放回去，这样的话数据就会错误，所以需要一个全局变量的对象给全部人使用，只需要new出一个实例对象，这就是单例模式的应用，并且单例模式节省资源，因为它控制了实例对象的个数，并有利于gc回收。</li>\n<li>策略模式：将几个类中公共的方法提取到一个类中，从而使扩展更容易，保证代码的可移植性，减少冗余的代码，可维护性强。</li>\n<li>工厂模式：简单的工厂模式主要是统一提供示例对象的引用，通过工厂模式接口获取实例是对象的引用。<br>完整设计模式见<a href=\"https://feifaninternet.github.io/2018/04/03/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/\">Java设计模式</a></li>\n</ul>\n<h3 id=\"Hibernate-的核心思想\"><a href=\"#Hibernate-的核心思想\" class=\"headerlink\" title=\"Hibernate 的核心思想\"></a>Hibernate 的核心思想</h3><p>Hibernate的核心思想是ROM对象关系映射机制。他是将表与表之间的操作映射成对象与对象之间的操作。也就是从数据库中提取的信息会自动按照你设置的映射要求封装成特定的对象，我们对对象的修改对应数据行的修改。</p>\n<h3 id=\"Java-中-HashMap-的工作原理\"><a href=\"#Java-中-HashMap-的工作原理\" class=\"headerlink\" title=\"Java 中 HashMap 的工作原理\"></a>Java 中 HashMap 的工作原理</h3><p>HashMap的源码中可以发现，HashMap底层就是一个数组结果，数组中每一项又是一个链表，当新建一个HashMap的时候，就会初始化一个数组，Entry就是数组中的元素，每个Map.Entry就是一个key-value对，它持有一个指向下一个元素的引用(指针)，这就构成了链表。<br>实现原理：   </p>\n<ul>\n<li>利用key的hashCode重新hash计算出当前对象的元素所在数组中的下标</li>\n<li>存储时，如果出现hash值相同的key,会覆盖原始值，若不同则会添加新的Entry，与集合中的Entry行程Entry链，而且新Entry位于其头部。</li>\n<li>获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。</li>\n<li>出现冲突后，冲突的key的对象将放入链表中，然后在链表中做进一步的对比。</li>\n</ul>\n<h3 id=\"Java-堆的结构\"><a href=\"#Java-堆的结构\" class=\"headerlink\" title=\"Java 堆的结构\"></a>Java 堆的结构</h3><p>Jvm的堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在JVM启动的时候被创建。对象所占的堆内存是由自动内存管理系统也就是垃圾收集器回收。<br>堆内存是由存活和死亡的对象组成的。存活的对象是应用可以访问的，不会被垃圾回收，死亡的对象是应用不可访问尚且还没有被垃圾回收器回收的对象，一直到回收之前他们都会占据堆内存空间。</p>\n<h3 id=\"你知道的锁有哪些\"><a href=\"#你知道的锁有哪些\" class=\"headerlink\" title=\"你知道的锁有哪些\"></a>你知道的锁有哪些</h3><ol>\n<li>自旋锁：可以在使线程没有取得锁的时候，不被挂起，而转去执行一个空循环(即所谓的自旋)，若在若干个空循环后，线程如果就可以获得锁，则继续执行，若线程依然不能获得锁，才会被挂起。适用于锁竞争不是很激烈，锁占用时间很短的并发编程，对于锁竞争激烈，单线程锁占用很长时间的并发程序，反而会浪费CPU时间和系统资源。</li>\n<li>阻塞锁：让线程进入阻塞状态进行等待，当获得相应的信号(唤醒，时间)时，才可以进入线程的准备就绪状态，准备就绪状态的所有线程通过竞争进入运行状态。Java中能够进入/退出阻塞状态或包含阻塞锁的方法有，synchronized关键字，ReentrantLock,Object.wait()/notify()</li>\n<li>可重入锁：也叫做递归锁，指的是同一线程外层函数获得锁之后，内层递归函数仍然有货的该锁的代码，但不受影响。</li>\n<li>悲观锁：悲观锁认为，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库就用到了很多这种机制，比如行锁，表锁，读锁，写锁等，都是在操作之前先上锁。独占锁是悲观锁的一种实现。</li>\n<li>乐观锁：乐观锁认为，每次去拿数据的时候别人都不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。乐观锁适用于多读的应用类型。</li>\n<li>轮询锁和定时锁：由tryLock实现，与无条件获取锁模式相比，他们具有更完善的错误恢复机制。可避免死锁的发生：boolean tryLock():仅在调用时锁为空闲状态才获取该锁。如果锁可用，则获取锁，并立即返回true，如果锁不可用，则返回false。boolean tryLock(long time,TimeUnit unit) throws InterruptedException:如果锁在给定的等待时间内空闲，并且当前线程未被中断，则获取锁。</li>\n<li>显示锁和内置锁：显示锁用Lock来定义，内置锁用synchronized。内置锁：每个java对象都可以用作一个实现同步的锁，这些锁成为内置锁。获得内置锁的唯一途径就是进入这个锁保护的同步代码或方法，在推出同步代码或方法时会释放该锁。内置锁是互斥锁。</li>\n<li>读写锁：Lock接口以及对象，使用它，很优雅的控制了竞争资源的安全访问，在读的地方使用读锁，写的地方使用写锁，在读写锁的加锁策略中，允许多个读操作同时进行，但每次只允许一个写操作。读写锁是一种性能优化的策略。</li>\n<li>对象锁和类锁：对象锁使用于对象实例方法，或者一个对象实例上的，调用对象wait()方法时，会释放持有的对象锁，以便于调用notify方法，notify方法调用之后，会等到notify所在的线程执行完之后再释放锁，类锁是用于类的静态方法或者一个类的class对象上的，不同对象实例的对象锁是互不干扰的，但是每个类只有一个类锁，类锁只是一个概念上的东西，并不是真实存在的，它只是用来帮助我们理解锁定实例方法和静态方法的区别。</li>\n<li>锁粗化：锁粗化的概念应该比较好理解，就是将多次链接在一起的加锁，解锁操作合并为一次，将多个连续的锁扩展成一个范围更大的锁。</li>\n<li>互斥锁：互斥锁指的是一次最多只能有一个线程持有的锁，如Lock</li>\n</ol>\n<h3 id=\"对-Restful-的理解\"><a href=\"#对-Restful-的理解\" class=\"headerlink\" title=\"对 Restful 的理解\"></a>对 Restful 的理解</h3><p>REST指的是一组架构约束条件和原则，满足这些约束条件和原则的应用程序或设计就是Restful。</p>\n<h3 id=\"Dubbo-框架\"><a href=\"#Dubbo-框架\" class=\"headerlink\" title=\"Dubbo 框架\"></a>Dubbo 框架</h3><p><a href=\"https://feifaninternet.github.io/2018/04/03/Dubbo%E6%A1%86%E6%9E%B6/\">Dubbo分布式服务框架</a></p>\n<h3 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h3><p><a href=\"https://feifaninternet.github.io/2018/04/03/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/\">消息队列</a></p>\n<h3 id=\"Memcached-的原理\"><a href=\"#Memcached-的原理\" class=\"headerlink\" title=\"Memcached 的原理\"></a>Memcached 的原理</h3><p>基于libeven的事件处理，内置内存存储方式SLab Allocation机制，并不单一个的数据删除机制，基于客户端的分布式系统。<br>变化频繁，具有不稳定性的数据，不需要实时入库(在线人数)，门户网站的新闻等，觉得页面静态化仍不能满足要求，可以放入到memcache中。</p>\n<h3 id=\"Redis-和-Memcached-的区别\"><a href=\"#Redis-和-Memcached-的区别\" class=\"headerlink\" title=\"Redis 和 Memcached 的区别\"></a>Redis 和 Memcached 的区别</h3><h4 id=\"1-数据类型支持不同\"><a href=\"#1-数据类型支持不同\" class=\"headerlink\" title=\"1.数据类型支持不同\"></a>1.数据类型支持不同</h4><p>Memcached仅支持简单的key-value结构的数据，Redis支持String,Hash,List,Set和Sorted Set。</p>\n<h4 id=\"2-内存管理机制不同\"><a href=\"#2-内存管理机制不同\" class=\"headerlink\" title=\"2.内存管理机制不同\"></a>2.内存管理机制不同</h4><p>在Redis中，并不是所有的数据都一直存储在内存中，这是和Memcached最大的区别。当物理内存用完时，Redis可以将一些很久没用到的calue交换到磁盘，同时在内存中清除，如果读取的key对应的value不在内存中，那么则需要从swap文件中加载相应数据，这里就存在I/O线程池的问题，在默认情况下，Redis会出现阻塞，当swap文件加载完成后才会响应，这种策略只使用于客户端数量小的情况，无法满足大并发应用需求；Memcached默认使用Slab Allocation机制管理内存，按照预先规定的大小，将分配的内存分隔成特定长度的块以存储相应长度的key-value数据，解决内存碎片问题。</p>\n<h4 id=\"3-数据持久化支持不同\"><a href=\"#3-数据持久化支持不同\" class=\"headerlink\" title=\"3.数据持久化支持不同\"></a>3.数据持久化支持不同</h4><p>Redis虽然是基于内存的存储系统，但是它本身是支持内存数据的持久化的，而且提供两种主要的持久化策略：RDB快照和AOF日志。而memcached是不支持数据持久化操作的。</p>\n<h4 id=\"4-集群管理不同\"><a href=\"#4-集群管理不同\" class=\"headerlink\" title=\"4.集群管理不同\"></a>4.集群管理不同</h4><p>Memcached本身并不支持分布式，因此只能在客户端通过像一致性哈希这样的分布式算法来实现Memcached的分布式存储。Redis更偏向于在服务器端构建分布式存储,Redis Cluster是一个实现了分布式且允许单点故障的Redis高级版本,Redis Cluster引入了Master节点和Slave节点,每个Master节点都会有对应的两个用于冗余的Slave节点,当Master节点退出后，集群会自动选择一个Slave节点成为新的Master节点.</p>\n<h3 id=\"Mybatis-与-Hibernate-的区别\"><a href=\"#Mybatis-与-Hibernate-的区别\" class=\"headerlink\" title=\"Mybatis 与 Hibernate 的区别\"></a>Mybatis 与 Hibernate 的区别</h3><ul>\n<li>开发速度：Hibernate的真正掌握要比Mybatis来得难些。Mybatis框架相对简单很容易上手，但也相对简陋些。个人觉得要用好Mybatis还是首先要先理解好Hibernate。</li>\n<li>开发工作量：Hibernate和MyBatis都有相应的代码生成工具。可以生成简单基本的DAO层方法。针对高级查询，Mybatis需要手动编写SQL语句，以及ResultMap。而Hibernate有良好的映射机制，开发者无需关心SQL的生成与结果映射，可以更专注于业务流程。</li>\n<li>调优方面：</li>\n</ul>\n<p>Hibernate的调优方案   </p>\n<ol>\n<li>制定合理的缓存策略</li>\n<li>尽量使用延迟加载特性</li>\n<li>采用合理的Session管理机制</li>\n<li>使用批量抓取，设定合理的批处理参数</li>\n<li>进行合理的O/R映射设计</li>\n</ol>\n<p>Mybatis的调优方案<br>MyBatis在Session方面和Hibernate的Session生命周期是一致的，同样需要合理的Session管理机制。MyBatis同样具有二级缓存机制。(要开启二级缓存,你需要在你的 SQL 映射文件中添加一行:  <cache>)</cache></p>\n<ul>\n<li>SQL优化方面：</li>\n</ul>\n<p>Hibernate的查询会将表中的所有字段查询出来，这一点会有性能消耗。Hibernate也可以自己写SQL来指定需要查询的字段，但这样就破坏了Hibernate开发的简洁性。而Mybatis的SQL是手动编写的，所以可以按需求指定查询的字段。<br>Hibernate HQL语句的调优需要将SQL打印出来，而Hibernate的SQL被很多人嫌弃因为太丑了。MyBatis的SQL是自己手动写的所以调整方便。但Hibernate具有自己的日志统计。Mybatis本身不带日志统计，使用Log4j进行日志记录。</p>\n<ul>\n<li>扩展性方面：</li>\n</ul>\n<p>Hibernate与具体数据库的关联只需在XML文件中配置即可，所有的HQL语句与具体使用的数据库无关，移植性很好。MyBatis项目中所有的SQL语句都是依赖所用的数据库的，所以不同数据库类型的支持不好。</p>\n<p>Mybatis 的优势</p>\n<ol>\n<li>MyBatis可以进行更为细致的SQL优化，可以减少查询字段。</li>\n<li>MyBatis容易掌握，而Hibernate门槛较高。</li>\n</ol>\n<p>Hibernate 的优势</p>\n<ol>\n<li>Hibernate的DAO层开发比MyBatis简单，Mybatis需要维护SQL和结果映射。</li>\n<li>Hibernate对对象的维护和缓存要比MyBatis好，对增删改查的对象的维护要方便。</li>\n<li>Hibernate数据库移植性很好，MyBatis的数据库移植性不好，不同的数据库需要写不同SQL。</li>\n<li>Hibernate有更好的二级缓存机制，可以使用第三方缓存。MyBatis本身提供的缓存机制不佳。</li>\n</ol>\n<h4 id=\"Hibernate\"><a href=\"#Hibernate\" class=\"headerlink\" title=\"Hibernate\"></a>Hibernate</h4><p>标准的ORM框架，入门门槛高，不需要写sql，sql语句自动生成，对sql语句进行优化，修改比较困难，DAO层开发比Mybatis简单，缓存机制比Mybatis要好，对增删改查的对象维护更方便。<br>适合需求变化不多的中小型项目，比如：后台管理系统，ERP等。</p>\n<h4 id=\"Mybatis\"><a href=\"#Mybatis\" class=\"headerlink\" title=\"Mybatis\"></a>Mybatis</h4><p>专注sql本身，需要程序员自己编写sql，可以减少查询的字段，sql修改优化比较方便，更加灵活。Mybatis是一个不完全的ORM框架，相比Hibernate较容易掌握。</p>\n<h3 id=\"GC-的定义-优点-原理\"><a href=\"#GC-的定义-优点-原理\" class=\"headerlink\" title=\"GC 的定义/优点/原理\"></a>GC 的定义/优点/原理</h3><p>GC(Garbage Collection)是垃圾收集的意思，Java使用GC作为其内存管理机制。由于有垃圾回收机制，Java中的对象不再有”作用域”的概念，只有对象的引用才有作用域。垃圾回收可以有效地防止内存泄漏，有效利用可以使用的内存。垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存中已经死亡的或者长时间没有使用的对象进行清除和回收，程序员不能实时地调用垃圾回收器对某个对象或所有对象进行垃圾回收，可以使用system.gc()或者Runtime.gc()进行手动垃圾回收,但是没有办法保证GC的执行。</p>\n<h3 id=\"分布式Session的几种实现方式\"><a href=\"#分布式Session的几种实现方式\" class=\"headerlink\" title=\"分布式Session的几种实现方式\"></a>分布式Session的几种实现方式</h3><p>1.Session Replication 方式管理(session复制)   </p>\n<ul>\n<li>简介：将一台机器上的Session数据广播复制到集群中其余机器上</li>\n<li>使用场景：机器较少，网络流量较小</li>\n<li>优点：实现简单，配置较少，当网络中有机器Down掉时不影响用户访问</li>\n<li>缺点：广播式复制到其余机器有一定延时，带来一定网络开销</li>\n</ul>\n<p>2.Session Sticky 方式管理</p>\n<ul>\n<li>简介：粘性Session，当用户访问集群中某台机器后，强制指定后续所有请求均落到此机器上</li>\n<li>使用场景：机器数适中，对稳定性要求不是非常苛刻</li>\n<li>优点：实现简单、配置方便、没有额外网络开销</li>\n<li>缺点：网络中有机器Down掉时、用户Session会丢失、容易造成单点故障</li>\n</ul>\n<p>3.缓存集中式管理</p>\n<ul>\n<li>简介：将Session存入分布式缓存集群中的某台机器上，当用户访问不同节点时先从缓存中拿Session信息</li>\n<li>使用场景：集群中机器数多、网络环境复杂</li>\n<li>优点：可靠性好</li>\n<li>缺点：实现复杂、稳定性依赖于缓存的稳定性、Session信息放入缓存时要有合理的策略写入</li>\n</ul>\n<h3 id=\"springBoot-自动配置的原理\"><a href=\"#springBoot-自动配置的原理\" class=\"headerlink\" title=\"springBoot 自动配置的原理\"></a>springBoot 自动配置的原理</h3><p>在spring程序main方法中添加@SpringBootApplication或者@EnableAutoConfiguration，会自动去maven中读取每个starter中的spring.factories文件，该文件里配置了所有需要被创建的spring容器中的bean。</p>\n<h3 id=\"什么是微服务\"><a href=\"#什么是微服务\" class=\"headerlink\" title=\"什么是微服务\"></a>什么是微服务</h3><p>以前的模式是所有的代码在同一个工程中，部署在同一个服务器中，同一个项目的不同模块不同功能相互抢占资源。微服务将工程根据不同的业务规则拆分成微服务，部署在不同的机器上，服务之间进行相互调用，Java微服务框架有Dubbo，SpringCloud等</p>\n<h3 id=\"springCloud-如何实现服务的注册和发现\"><a href=\"#springCloud-如何实现服务的注册和发现\" class=\"headerlink\" title=\"springCloud 如何实现服务的注册和发现\"></a>springCloud 如何实现服务的注册和发现</h3><p>服务在发布时指定对应的服务名(服务名包括了IP地址和端口)将服务注册到注册中心(eureka或者zookeeper)，这一过程是springCloud自动实现的，只需要在main方法添加@EnableDiscoveryClient，同一个服务修改端口就可以启动多个实例。<br>调用方法：传递服务名称通过注册中心获取所有的可用实例，通过负载均衡策略调用对应的服务。</p>\n<h3 id=\"Ribbon-和-Feign-的区别\"><a href=\"#Ribbon-和-Feign-的区别\" class=\"headerlink\" title=\"Ribbon 和 Feign 的区别\"></a>Ribbon 和 Feign 的区别</h3><p>Ribbon 和 Feign 都是用于调用其他服务的，不过方式不同。</p>\n<ol>\n<li>启动类使用的注解不同，Ribbon用的是@RibbonClient，Feign用的是@EnableFeignClients</li>\n<li>服务的指定位置不同，Ribbon实在@RibbonClient注解上声明，Feign则是在定义抽象方法的接口中使用@FeignClient声明。</li>\n<li>调用方式不同，Ribbon需要自己构建http请求，模拟http请求然后使用RestTemplate发送给其他服务，步骤相当繁琐。Feign则是在Ribbon的基础上进行了一次改进，采用接口的方式，将需要调用的其他服务的方法定义成抽象方法即可。不需要自己构建http请求，不过要注意的是抽象方法的注解，方法签名要和提供服务的方法完全一致。</li>\n</ol>\n<h3 id=\"springCloud-断路器的作用\"><a href=\"#springCloud-断路器的作用\" class=\"headerlink\" title=\"springCloud 断路器的作用\"></a>springCloud 断路器的作用</h3><p>当一个服务调用另一个服务由于网络原因或者自身原因出现问题时，调用者就会等待被调用者的响应，当更多的服务请求这些资源时，导致更多的请求等待，这样就会发生连锁效应(雪崩效应),断路器的作用就是解决这一问题。一定时间内，达到一定的次数无法被调用，并且多次检测没有恢复的迹象，断路器完全打开，那么下次请求就不会请求到该服务，若段时间内有恢复迹象，断路器会将部分请求发给该服务，当能正常调用时，断路器关闭，服务一直处于正常状态是断路器是关闭的。</p>\n<h2 id=\"多线程方面\"><a href=\"#多线程方面\" class=\"headerlink\" title=\"多线程方面\"></a>多线程方面</h2><h3 id=\"Volatile-和-Synchronized-的不同\"><a href=\"#Volatile-和-Synchronized-的不同\" class=\"headerlink\" title=\"Volatile 和 Synchronized 的不同\"></a>Volatile 和 Synchronized 的不同</h3><ol>\n<li>粒度不同，前者针对变量，后者锁对象和类</li>\n<li>syn阻塞，volatile线程不阻塞</li>\n<li>syn保证三大特性，volatile不保证原子性</li>\n<li>syn编译器优化，volatile不优化</li>\n</ol>\n<h3 id=\"线程与进程的区别\"><a href=\"#线程与进程的区别\" class=\"headerlink\" title=\"线程与进程的区别\"></a>线程与进程的区别</h3><p>线程和进程都是一个时间段的描述，是CPU工作时间段的描述，不过是颗粒大小不同。在CPU中，任务轮流方法是：先加载程序A的上下文，然后开始执行A，保存程序A的上下文，调入下一个要执行的程序B的程序上下文，然后开始执行B,保存程序B的上下文…<br>进程就是包换上下文切换的程序执行时间总和 = CPU加载上下文 + CPU执行 + CPU保存上下文，加载上下文后，开始执行程序A的a小段，然后执行b小段，这里的ab就是线程，也就是说线程是共享了进程的上下文环境的更为细小的CPU时间段，一个进程可以包含很多个线程。</p>\n<h3 id=\"线程在执行过程中的状态\"><a href=\"#线程在执行过程中的状态\" class=\"headerlink\" title=\"线程在执行过程中的状态\"></a>线程在执行过程中的状态</h3><ol>\n<li>就绪(Runnable)：线程准备运行，不一定立马就能执行</li>\n<li>运行中(Running)：进程正在执行线程的代码</li>\n<li>等待中(Waiting)：线程处于阻塞的状态，等待外部的处理结束</li>\n<li>睡眠中(Sleeping)：线程被强制睡眠</li>\n<li>I/O阻塞(Blocked on I/O)：等待I/O操作完成</li>\n<li>同步阻塞(Blocked on Synchronization)：等待获取锁</li>\n<li>死亡(Dead)：线程完成了执行</li>\n</ol>\n<h3 id=\"多线程的优点\"><a href=\"#多线程的优点\" class=\"headerlink\" title=\"多线程的优点\"></a>多线程的优点</h3><ol>\n<li>相对于单线程而言，可以响应多任务的并发操作，多线程取消了主循环和轮流检测机制，一个线程可以暂停而不阻止系统其他部分的执行，而且当程序中一个线程阻塞时，只有那个被阻塞的线程暂停，所有其他的线程继续执行。</li>\n<li>相对于进程而言，开销比较小，转换成本较小，所有线程共享同一地址空间，相互协作，彼此之间通信很容易。</li>\n</ol>\n<h3 id=\"Thread-类中的start-和-run-方法有什么区别\"><a href=\"#Thread-类中的start-和-run-方法有什么区别\" class=\"headerlink\" title=\"Thread 类中的start() 和 run() 方法有什么区别\"></a>Thread 类中的start() 和 run() 方法有什么区别</h3><p>start()方法被用来启动新创建的线程，而且start()内部调用了run()方法，这和直接调用run()方法的效果是不一样的，调用run()方法的时候，只会在原来的方法中调用，没用新的线程启动，start()方法才会启动新线程。</p>\n<h3 id=\"一个线程在运行时发生异常会怎样\"><a href=\"#一个线程在运行时发生异常会怎样\" class=\"headerlink\" title=\"一个线程在运行时发生异常会怎样\"></a>一个线程在运行时发生异常会怎样</h3><p>如果异常没有被捕获该线程将会停止执行。Thread.UncaughtExceptionHandler是用于处理未捕获异常造成线程突然中断情况的一个内嵌接口。当一个未捕获异常造成线程线程中断的时候JVM会使用Thread.getUncaughtExceptionHandler()来查询线程的UncaughtExceptionHandler并将线程和异常作为参数传递给Handler的uncaughtException()方法进行处理。</p>\n<h3 id=\"i-与-i-的区别\"><a href=\"#i-与-i-的区别\" class=\"headerlink\" title=\"i++ 与 ++i 的区别\"></a>i++ 与 ++i 的区别</h3><ol>\n<li>i++ 返回原来的值，++i返回 +1 后的值(在代码中我们理解为，i++先处理逻辑再+1，++i先+1再处理逻辑)</li>\n<li><p>i++ 不能作为左值，++i可以。左值：对应内存中有确定存储地址的对象的表达式的值，而右值是所有不是左值的表达式的值。左值与右值的根本区别在于是否允许取地址&amp;运算符获得对应的内存地址。<br>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p1 = &amp;(++i); <span class=\"comment\">//正确</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p2 = &amp;(i++); <span class=\"comment\">//错误</span></span><br><span class=\"line\"></span><br><span class=\"line\">++i = <span class=\"number\">1</span>; <span class=\"comment\">//正确</span></span><br><span class=\"line\">i++ = <span class=\"number\">5</span>; <span class=\"comment\">//错误</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>我们从底层来看：</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 前缀形式(++i)：</span><br><span class=\"line\">int&amp; int::operator++() //这里返回的是一个引用形式，就是说函数返回值也可以作为一个左值使用</span><br><span class=\"line\">&#123;//函数本身无参，意味着是在自身空间内增加1的</span><br><span class=\"line\">  *this += 1;  // 增加</span><br><span class=\"line\">  return *this;  // 取回值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//后缀形式(i++):</span><br><span class=\"line\">const int int::operator++(int) //函数返回值是一个非左值型的，与前缀形式的差别所在。</span><br><span class=\"line\">&#123;//函数带参，说明有另外的空间开辟</span><br><span class=\"line\">  int oldValue = *this;  // 取回值</span><br><span class=\"line\">  ++(*this);  // 增加</span><br><span class=\"line\">  return oldValue;  // 返回被取回的值，返回的是一个临时变量，是右值。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JAVA9-的新特性\"><a href=\"#JAVA9-的新特性\" class=\"headerlink\" title=\"JAVA9 的新特性\"></a>JAVA9 的新特性</h3><ol>\n<li>Java 平台级模块系统：模块化的JAR文件都包含一个额外的模块描述器，在这个模块描述器中，对其他模块的依赖是通过requires来表示的，exports控制哪些包可以被其他模块访问到。</li>\n<li>Linking：通过java9中的jlink工具创建针对应用程序进行优化的最小运行时环境，而不需要完全加载JDK安装版本。</li>\n<li>JShell：交互式Java REPL,java语言的交互式编程环境，从控制台启动 jshell ，并直接启动输入和执行 Java 代码。</li>\n<li>改进的Javadoc：现已支持在API文档中进行搜索，而且兼容HTML5标准。</li>\n<li><p>集合工厂方法：使集合的填充更加方便快捷</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set&lt;Integer&gt; ints = Set.of(1, 2, 3);</span><br><span class=\"line\">List&lt;String&gt; strings = List.of(&quot;first&quot;, &quot;second&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改进的Stream API：通过这套API可以在集合上建立用于转换的申明管道。</p>\n</li>\n<li><p>私有接口方法：java8为我们带来了接口的默认方法。接口现在也可以包含行为，而不仅仅是方法签名，但是如果在接口上有几个默认方法，代码几乎相同，则我们可以使用java9，想接口添加私有辅助方法来解决。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface MyInterface &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    void normalInterfaceMethod();</span><br><span class=\"line\"> </span><br><span class=\"line\">    default void interfaceMethodWithDefault() &#123;  init(); &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    default void anotherDefaultMethod() &#123; init(); &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    // This method is not part of the public API exposed by MyInterface</span><br><span class=\"line\">    private void init() &#123; System.out.println(&quot;Initializing&quot;); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>a. HTTP/2：这个特性用来代替HttpURLConnection API，并提供对WebSocket和HTTP/2的支持。</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpClient client = HttpClient.newHttpClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">HttpRequest req =</span><br><span class=\"line\">   HttpRequest.newBuilder(URI.create(&quot;http://www.google.com&quot;))</span><br><span class=\"line\">              .header(&quot;User-Agent&quot;,&quot;Java&quot;)</span><br><span class=\"line\">              .GET()</span><br><span class=\"line\">              .build();</span><br><span class=\"line\"> </span><br><span class=\"line\">HttpResponse&lt;String&gt; resp = client.send(req, HttpResponse.BodyHandler.asString());</span><br></pre></td></tr></table></figure>\n<p>b. 多版本兼容JAR</p>\n<h3 id=\"JAVA10-新特性\"><a href=\"#JAVA10-新特性\" class=\"headerlink\" title=\"JAVA10 新特性\"></a>JAVA10 新特性</h3><ol>\n<li><p>局部变量类型推断：java引入在其他语言中很常见的var，只要编译器可以推断此种类型，你不在需要专门生命一个局部变量的类型，比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = new ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应用类数据共享(CDS)：CDS用于改善JVM启动，同时减少当多个虚拟机在同一个物理或虚拟的机器上运行时的资源占用。</p>\n</li>\n<li>并行垃圾回收器G1：G1是设计来作为一种低延时的垃圾回收器，可以减少在使用默认的收集器的应用性能配置文件的差异</li>\n<li>垃圾回收器接口：不是开发者用来控制垃圾回收的接口，而是一个在JVM源代码中允许另外的垃圾回收快速方便的集成接口。</li>\n</ol>\n","categories":["面试题"],"tags":["JAVA"]},{"title":"微信支付集成 -- JAVA","url":"https://feifaninternet.github.io/2018/03/22/微信支付集成-JAVA/","content":"<h3 id=\"1-文档说明\"><a href=\"#1-文档说明\" class=\"headerlink\" title=\"1.文档说明\"></a>1.文档说明</h3><p>  微信支付封装–DANKAL JAVAEE<br>  用于JAVA后台微信支付相关功能的开发。</p>\n<h4 id=\"版本说明\"><a href=\"#版本说明\" class=\"headerlink\" title=\"版本说明\"></a>版本说明</h4><p>· 1.0.0 – 2017-3-10<br>支付签名及统一下单接口的封装。</p>\n<h3 id=\"2-协议规范\"><a href=\"#2-协议规范\" class=\"headerlink\" title=\"2.协议规范\"></a>2.协议规范</h3><h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p>使用该工具在微信支付后台生成预支付交易单，返回正确的预支付交易回话标识后再在APP或者小程序中调起微信支付。</p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><ol>\n<li>导入 <a href=\"/file/dankal-java-mini-wxpay.jar\" title=\"jar包下载\">jar 包</a>。</li>\n<li>构建 PaymentPO 对象 </li>\n<li>调用 WxPayResponse.getPaySign() 获取调起微信支付所需参数</li>\n</ol>\n<h4 id=\"详细说明\"><a href=\"#详细说明\" class=\"headerlink\" title=\"详细说明\"></a>详细说明</h4><h3 id=\"1-PaymentPO-对象\"><a href=\"#1-PaymentPO-对象\" class=\"headerlink\" title=\"1.PaymentPO 对象\"></a>1.PaymentPO 对象</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PaymentPO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 交易金额 * 必须</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String total_fee;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * appId * 必须</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String appid;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 商户号 * 必须</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String mch_id;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 商户密匙 * 必须</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String merchant_pay_key;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 用户 openId * 必须</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String openid;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 终端 ip (用户端 ip,请注意格式,格式不对也会异常) * 必须</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String spbill_create_ip;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 微信回调地址，用于通知微信支付结果 * 必须</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String notify_url;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 随机字符串 (若不传则默认使用封装随机字符串生成规则)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String nonce_str;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 签名,内部生产(MD5方式)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String sign;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 商品描述 (最好传,不传也有默认值)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String body;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 订单号 (若不传则默认使用封装订单号生成规则)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String out_trade_no;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 订单优惠标记 使用代金券或者立减优惠功能时需要的参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String goods_tag;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 交易类型 若不传默认为小程序支付(MINI: JSAPI ; APP: APP)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String trade_type;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 交易开始时间</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String time_start;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 交易结束时间</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String time_expire;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"构建示例：\"><a href=\"#构建示例：\" class=\"headerlink\" title=\"构建示例：\"></a>构建示例：</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PaymentPO paymentPO = new PaymentPO();</span><br><span class=\"line\">paymentPO.setAppid(&quot;wx65fbfa71fbf0b639&quot;);</span><br><span class=\"line\">paymentPO.setMch_id(&quot;1498814312&quot;);</span><br><span class=\"line\">paymentPO.setMerchant_pay_key(&quot;vnYncWrMQsGHTVvj8ZR76B1d8T32oQZK&quot;);</span><br><span class=\"line\">paymentPO.setNotify_url(&quot;https://api-czh.dankal.cn/v1/recharge/wx_notify&quot;);</span><br><span class=\"line\">paymentPO.setTotal_fee(&quot;100&quot;);</span><br><span class=\"line\">paymentPO.setSpbill_create_ip(&quot;120.78.10.31&quot;);</span><br><span class=\"line\">paymentPO.setOpenid(&quot;odyO05BBjHEqIrPu1R5k9WbNwaC4&quot;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-WxPayResponse\"><a href=\"#2-WxPayResponse\" class=\"headerlink\" title=\"2.WxPayResponse\"></a>2.WxPayResponse</h3><p>  内部对 PaymentPO 对象的参数进行验证,必须的参数不能缺少，否则会视为异常，若参数正确，会请求微信支付统一下单接口，然后再次签名，返回调用微信支付所需参数。<br>  getPaySign()：此方法用于获取调起微信支付所需参数。   </p>\n<p>  参数说明：</p>\n<p>小程序调起微信支付 api 所需参数：   </p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th style=\"text-align:center\">参数说明</th>\n<th style=\"text-align:right\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nonceStr</td>\n<td style=\"text-align:center\">随机字符串</td>\n<td style=\"text-align:right\">不大于 32 位</td>\n</tr>\n<tr>\n<td>package</td>\n<td style=\"text-align:center\">数据包</td>\n<td style=\"text-align:right\">prepayid=wx2017033010242291fcfe0db70013231072 统一下单接口返回的 prepayid 参数值</td>\n</tr>\n<tr>\n<td>timeStamp</td>\n<td style=\"text-align:center\">当前时间的时间戳</td>\n<td style=\"text-align:right\">单位 : 秒</td>\n</tr>\n<tr>\n<td>paySign</td>\n<td style=\"text-align:center\">签名</td>\n<td style=\"text-align:right\">请求统一下单接口后,返回给前端需要再次签名 参与签名的参数 appId; nonceStr; package; signType; timeStamp; key</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;&nbsp;详细参数说明及签名算法 : <a href=\"https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7&amp;index=5\" target=\"_blank\" rel=\"noopener\">WeChat paid official API</a>   </p>\n<p>返回示例：</p>\n<h4 id=\"success\"><a href=\"#success\" class=\"headerlink\" title=\"success\"></a>success</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   timeStamp=1521442735, </span><br><span class=\"line\">   paySign=2476BEEECA2A991D7A41257B0BD26E9C, </span><br><span class=\"line\">   nonceStr=dd03919fa71742d282b5e12da59c25ce, </span><br><span class=\"line\">   package=prepay_id=wx201803191458535042d396b30400714725</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"fail\"><a href=\"#fail\" class=\"headerlink\" title=\"fail\"></a>fail</h4><ul>\n<li><p>微信返回错误:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  error = invalid spbill_create_ip</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>参数错误:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  error=[SpbillCreateIp is missing, TotalFee is missing]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-示例代码\"><a href=\"#3-示例代码\" class=\"headerlink\" title=\"3.示例代码\"></a>3.示例代码</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestWxPayResponse</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//构建 PaymentPO 对象,必须参数的赋值</span></span><br><span class=\"line\">            PaymentPO paymentPO = <span class=\"keyword\">new</span> PaymentPO();</span><br><span class=\"line\">            paymentPO.setAppid(<span class=\"string\">\"wx65fbfa71fbf0b639\"</span>);</span><br><span class=\"line\">            paymentPO.setMch_id(<span class=\"string\">\"1498814312\"</span>);</span><br><span class=\"line\">            paymentPO.setMerchant_pay_key(<span class=\"string\">\"vnYncWrMQsGHTVvj8ZR76B1d8T32oQZK\"</span>);</span><br><span class=\"line\">            paymentPO.setNotify_url(<span class=\"string\">\"https://api-czh.dankal.cn/v1/recharge/wx_notify\"</span>);</span><br><span class=\"line\">            paymentPO.setTotal_fee(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">            paymentPO.setSpbill_create_ip(<span class=\"string\">\"120.78.10.31\"</span>);</span><br><span class=\"line\">            paymentPO.setOpenid(<span class=\"string\">\"odyO05BBjHEqIrPu1R5k9WbNwaC4\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取微信支付所需参数</span></span><br><span class=\"line\">                WxPayResponse wxPayResponse = <span class=\"keyword\">new</span> WxPayResponse(paymentPO);</span><br><span class=\"line\">                Map&lt;String, Object&gt; paySign = wxPayResponse.getPaySign();</span><br><span class=\"line\">                System.out.println(paySign);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3>","categories":["Frame"],"tags":["wxPay"]},{"title":"JAVA IO","url":"https://feifaninternet.github.io/2018/03/20/JAVA-IO/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>JAVA IO 也成为 IO 流，它的核心就是对文件的操作，对于字节，字符类型的输入和输出流。   </p>\n<p>主要类或者接口：</p>\n<ol>\n<li>File – 文件夹</li>\n<li>RandomAccessFile – 随机存储文件类</li>\n<li>InputStream – 字节输入流</li>\n<li>OutputStream – 字节输出流</li>\n<li>Reader – 字符输入流</li>\n<li>Writer – 字符输出流   </li>\n</ol>\n<p>结构图：<br><img src=\"/picture/java-io.jpg\" alt=\"java流类结构图\"></p>\n<h4 id=\"流的概念和作用\"><a href=\"#流的概念和作用\" class=\"headerlink\" title=\"流的概念和作用\"></a>流的概念和作用</h4><p>流是一组有顺序的，有起点和终点的字节集合，是对数据传输的总称或抽象。数据在设备间进行传输称之为流。流的本质是数据传输，根据传输的特性将流分为各种类，方便更直观的进行数据操作。   </p>\n<h4 id=\"IO-流的分类\"><a href=\"#IO-流的分类\" class=\"headerlink\" title=\"IO 流的分类\"></a>IO 流的分类</h4><ul>\n<li>根据数据处理的不同类型分为：字节流和字符流</li>\n<li>根据数据流向不同分为：输入流和输出流</li>\n</ul>\n<h4 id=\"字节流和字符流\"><a href=\"#字节流和字符流\" class=\"headerlink\" title=\"字节流和字符流\"></a>字节流和字符流</h4><p>字符流的由来：因为数据编码的不同，而有了对字符进行高效操作的流对象，本质上其实就是对于字节流的读取时，去查了指定的码表。</p>\n<p>字节流和字符流的区别：</p>\n<ul>\n<li>读写单位的不同：字节流以字节（8bit）为单位。字符流以字符为单位，根据码表映射字符，一次可能读多个字节。</li>\n<li>处理对象不同：字节流可以处理任何类型的数据，如图片、avi等，而字符流只能处理字符类型的数据。   </li>\n</ul>\n<h4 id=\"输入流和输出流\"><a href=\"#输入流和输出流\" class=\"headerlink\" title=\"输入流和输出流\"></a>输入流和输出流</h4><p>输入流只能进行读操作，输出流只能进行写操作。</p>\n<h3 id=\"Java-IO-流对象\"><a href=\"#Java-IO-流对象\" class=\"headerlink\" title=\"Java IO 流对象\"></a>Java IO 流对象</h3><h4 id=\"1-输入字节流-InputStream\"><a href=\"#1-输入字节流-InputStream\" class=\"headerlink\" title=\"1.输入字节流 InputStream\"></a>1.输入字节流 InputStream</h4><ol>\n<li>InputStream是所有数据字节流的父类，它是一个抽象类。</li>\n<li>ByteArrayInputStream、StringBufferInputStream、FileInputStream是三种基本的介质流，它们分别从Byte数组、StringBuffer、和本地文件中读取数据，PipedInputStream是从与其他线程共用的管道中读取数据。</li>\n<li>ObjectInputStream和所有FileInputStream 的子类都是装饰流。   </li>\n</ol>\n<p>示例：<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">    //内存中的字节数组</span><br><span class=\"line\">    byte[] bArr = new byte[]&#123;1,2,3&#125;;</span><br><span class=\"line\">                  </span><br><span class=\"line\">    //字节输入流</span><br><span class=\"line\">    InputStream in = new ByteArrayInputStream(bArr);</span><br><span class=\"line\">               </span><br><span class=\"line\">    byte[] bff = new byte[3];</span><br><span class=\"line\">    //从输入流中读取字节</span><br><span class=\"line\">    in.read(bff,0,3);</span><br><span class=\"line\">    System.out.println(bff[0] + &quot;,&quot; + bff[1] + &quot;,&quot; + bff[2]);  </span><br><span class=\"line\">    </span><br><span class=\"line\">    in.close();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-输出字节流-OutputStream\"><a href=\"#2-输出字节流-OutputStream\" class=\"headerlink\" title=\"2.输出字节流 OutputStream\"></a>2.输出字节流 OutputStream</h4><ol>\n<li>OutputStream是所有输出字节流的父类，它是一个抽象类。</li>\n<li>ByteArrayOutputStream、FIleOutputStream是两种基本的介质，它们分别向Byte 数组，和本地文件中写入数据。PipedOutputStream是从与其他线程共用的管道中写入数据。</li>\n<li>ObjectOutputStream和所有FileOutputStream的子类都是装饰流。</li>\n</ol>\n<p>示例：<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">    //内存中的字节数组</span><br><span class=\"line\">    byte[] bArr = new byte[]&#123;1,2,3&#125;;</span><br><span class=\"line\">                  </span><br><span class=\"line\">    //字节输出流</span><br><span class=\"line\">    ByteArrayOutputStream bos = new ByteArrayOutputStream();</span><br><span class=\"line\">               </span><br><span class=\"line\">    byte[] bff = new byte[3];</span><br><span class=\"line\">    //往字节输出流中写入字节数组</span><br><span class=\"line\">    bos.write(bff);</span><br><span class=\"line\">    //从输出流中获取字节数组</span><br><span class=\"line\">    byte[] bArryFromOs = bos.toByteArray();</span><br><span class=\"line\">    System.out.println(bArryFromOs[0] + &quot;,&quot; + bArryFromOs[1] + &quot;,&quot; + bArryFromOs[2]); </span><br><span class=\"line\">    </span><br><span class=\"line\">    bos.close();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-字符输入流-Reader\"><a href=\"#3-字符输入流-Reader\" class=\"headerlink\" title=\"3.字符输入流 Reader\"></a>3.字符输入流 Reader</h4><ol>\n<li>Reader是所有的输入字符流的父类，它是一个抽象类。</li>\n<li>CharReader、StringReader 是两种基本的介质流，它们分别将Char数组、String中读取数据。PipedInputReader 是从与其他线程共用的管道中读取数据。</li>\n<li>BufferedReader 很明显的是一个装饰器，它和其子类复制装饰其他Reader对象。</li>\n<li>InputStreamReader 是一个连接字节流和字符流的桥梁，它将字节流转变为字符流。</li>\n</ol>\n<p>示例：<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) throws IOException  &#123;</span><br><span class=\"line\">        //读取本地文件，得到字符流</span><br><span class=\"line\">        Reader reader = new FileReader(&quot;C:\\\\test.txt&quot;);</span><br><span class=\"line\">        //读取一个字符并打印</span><br><span class=\"line\">        System.out.println((char)reader.read());</span><br><span class=\"line\">        //关闭流</span><br><span class=\"line\">        reader.close();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-字符输出流-Writer\"><a href=\"#4-字符输出流-Writer\" class=\"headerlink\" title=\"4.字符输出流 Writer\"></a>4.字符输出流 Writer</h4><ol>\n<li>Writer 是所有输出字符流的父类，它是一个抽象类。</li>\n<li>CharArrayWriter、StringWriter 是两种基本的介质流，它们分别向Char 数组、String 中写入数据。PipedInputWriter 是从与其他线程共用的管道中读取数据。</li>\n<li>BufferedWriter 很明显是一个装饰器，他和其子类复制装饰其他Reader对象。</li>\n<li>FilterWriter 和PrintStream 及其类似，功能和使用也非常相似。</li>\n<li>OutputStreamWriter 是OutputStream 到Writer 转换到桥梁，它的子类FileWriter 其实就是一个实现此功能的具体类,功能和使用OutputStream极其类。</li>\n</ol>\n<p>示例：<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class WriterDemo&#123;</span><br><span class=\"line\">    public static void main(String args[]) throws Exception&#123;  </span><br><span class=\"line\">        // 第1步、使用File类找到一个文件</span><br><span class=\"line\">        File f = new File(&quot;d:&quot; + File.separator + &quot;test.txt&quot;) ;    </span><br><span class=\"line\">        // 第2步、通过子类实例化父类对象</span><br><span class=\"line\">        Writer out = null ; </span><br><span class=\"line\">        //实例化 </span><br><span class=\"line\">        out = new FileWriter(f)  ;      </span><br><span class=\"line\">        // 第3步、进行写操作</span><br><span class=\"line\">        String str = &quot;Hello World!!!&quot; ;  </span><br><span class=\"line\">        // 将内容输出，保存文件</span><br><span class=\"line\">        out.write(str) ;                        </span><br><span class=\"line\">        // 第4步、关闭输出流</span><br><span class=\"line\">        out.close() ;                      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n","categories":["JAVA"],"tags":["JAVA"]},{"title":"JVM内存模型与垃圾回收","url":"https://feifaninternet.github.io/2018/03/20/JVM内存模型与垃圾回收/","content":"<h3 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h3><div class=\"wrap effect\" style=\"box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    webkit-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    moz-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\n    o-box-shadow:0px 1px 4px rgba(0,0,0,0.3),0 0 40px rgba(0,0,0,0.1) inset;\"><br>    <img src=\"/picture/java-stack-model.png\" alt=\"Picture\" title=\"Picture\"><br></div> \n\n<p>&nbsp;&nbsp;堆栈的分开设计</p>\n<ol>\n<li>栈存储了处理逻辑，堆存储了具体的数据，这样隔离设计更为清晰</li>\n<li>堆栈分离使得堆可以被多个栈共享</li>\n<li>栈保存了上下文的信息，因此只能向上增长；而堆是动态分配的  </li>\n</ol>\n<p>&nbsp;&nbsp;栈的大小可以通过-XSs设置，如果不足的话，会引起java.lang.StackOverflowError的异常   </p>\n<h4 id=\"栈区\"><a href=\"#栈区\" class=\"headerlink\" title=\"栈区\"></a>栈区</h4><p>&nbsp;&nbsp;线程私有，生命周期跟线程相同，每个方法执行的时候都会创建一个栈帧(stack frame)用于存放局部变量表，操作栈，动态链接，方法出口。   </p>\n<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><p>&nbsp;&nbsp;存放对象实例，所有对象的内存都在这里分配。垃圾回收主要就是作用于这里。  </p>\n<ol>\n<li>堆的内存由-Xms指定，默认是物理内存的1/64；最大的内存由-Xmx指定，默认是物理内存的1/4。</li>\n<li>默认空余的堆内存小于40%时，就会增大，直到-Xmx设置的内存。具体的比例可以由-XX:MinHeapFreeRatio指定。</li>\n<li>空余的内存大于70%时，就会减少内存，直到-Xms设置的大小。具体由-XX:MaxHeapFreeRatio指定。<br>&nbsp;&nbsp;因此一般都将这两个参数设置成一样大，避免JVM不断调整大小。</li>\n</ol>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><p>&nbsp;&nbsp;这里记录了线程执行的字节码的行号，在分支，循环，跳转，异常，线程恢复等都依赖这个计数器。</p>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><p>&nbsp;&nbsp;类型信息，字段信息，方法信息，其他信息。</p>\n<h3 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h3><p>&nbsp;&nbsp;在Java中，如果对象实体没有引用指向的话，存储该实体的内存便成为垃圾。JVM会有一个系统线程专门负责回收垃圾。垃圾同时包括分配对象内存间的碎片。<br>&nbsp;&nbsp;判断对象可以回收的情况：</p>\n<ol>\n<li>显示的把某个引用置位 NULL 或者指向别的对象</li>\n<li>局部引用指向的对象</li>\n<li>弱引用关联的对象   </li>\n</ol>\n<p>&nbsp;&nbsp;目前JVM主要采取 Generational Collection 分代收集的方法进行回收，思想是把JVM分成不同的区域，每种区域使用不同的方法进行垃圾回收。它是Mark-Sweep标记-清除算法(会造成内存碎片)，Copying 复制算法(不涉及对象的删除，将可用的对象从一个地方拷贝到另一个地方，因此适合大量对象回收，如新生代回收)，Mark-Compact 标记-整理算法(适合解决碎片问题，但是会增加停顿)的合体。   </p>\n<p>堆内存分为3个区域：   </p>\n<ul>\n<li>新生代(Young Generation)：用于存放新创建的对象，采用复制回收方法，这里的垃圾回收叫做 Minor GC。</li>\n<li>年老代(Old Generation)：这些对象垃圾回收的频率较低，采用的标记整理方法，这里的垃圾回收叫做 Major GC。</li>\n<li>永久代(Permanent Generation)：存放 Java 本身的一些数据，当类不再使用时，也会被回收。</li>\n</ul>\n<h4 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h4><ol>\n<li>串行收集器 Serial：这种收集器就是以单线程的方式收集，垃圾回收的时候其他线程也不能工作。</li>\n<li>并行收集器 Parallel：以多线程的方式进行收集。</li>\n<li>并发标记清除收集器 Concurrent Mark Sweep Collector, CMS：大致的流程为：初始标记–并发标记–重新标记–并发清除</li>\n<li>G1收集器 Garbage First Collector：大致的流程为：初始标记–并发标记–最终标记–筛选回收</li>\n</ol>\n","categories":["JAVA"],"tags":["JAVA"]},{"title":"JAVA 关键字","url":"https://feifaninternet.github.io/2018/03/19/JAVA-关键字/","content":"<h3 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h3><h4 id=\"1-访问控制\"><a href=\"#1-访问控制\" class=\"headerlink\" title=\"1.访问控制\"></a>1.访问控制</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private    protected    public</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-类-方法和变量修饰符\"><a href=\"#2-类-方法和变量修饰符\" class=\"headerlink\" title=\"2.类,方法和变量修饰符\"></a>2.类,方法和变量修饰符</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abstract    class    extends    final    implements    interface    native    </span><br><span class=\"line\">new    static    strictfp    synchronized    transient    volatile</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-程序控制\"><a href=\"#3-程序控制\" class=\"headerlink\" title=\"3.程序控制\"></a>3.程序控制</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">break    continue    return    do    while    if    </span><br><span class=\"line\">else    for    instanceof    switch    case    default</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-异常处理\"><a href=\"#4-异常处理\" class=\"headerlink\" title=\"4.异常处理\"></a>4.异常处理</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try    catch    throw    throws</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-基本类型\"><a href=\"#5-基本类型\" class=\"headerlink\" title=\"5.基本类型\"></a>5.基本类型</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean    byte    char    double    float    int    long    short    null    true    false</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-变量引用\"><a href=\"#6-变量引用\" class=\"headerlink\" title=\"6.变量引用\"></a>6.变量引用</h4>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">super    this    void</span><br></pre></td></tr></table></figure>\n<h3 id=\"详细解释\"><a href=\"#详细解释\" class=\"headerlink\" title=\"详细解释\"></a>详细解释</h3><h3 id=\"1-访问控制-1\"><a href=\"#1-访问控制-1\" class=\"headerlink\" title=\"1.访问控制\"></a>1.访问控制</h3><h4 id=\"1-1-private-私有的\"><a href=\"#1-1-private-私有的\" class=\"headerlink\" title=\"1.1 private 私有的\"></a>1.1 private 私有的</h4><p>&nbsp;&nbsp;private 修饰符可用于类，方法或字段，这些被 private 修饰的类，方法或者字段只能在该类中引用，在类的外部或者子类是不可见的，所有类成员的默认访问范围都是 package 访问。</p>\n<h4 id=\"1-2-protected-受保护的\"><a href=\"#1-2-protected-受保护的\" class=\"headerlink\" title=\"1.2 protected 受保护的\"></a>1.2 protected 受保护的</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;protected 关键字修饰的对象在该对象所在的包以外的任何地方是不可以通过该类对象的引用来调用它的 protected 方法和属性的。但是在某类中定义一个 protected 方法，在该类所在的包中是可以访问该类的子类中的 protected 方法的，即使该子类的方法是 protected 修饰的。(对于构造函数，不存在继承问题，此时为super()调用问题)</p>\n<h4 id=\"1-3-public-公共的\"><a href=\"#1-3-public-公共的\" class=\"headerlink\" title=\"1.3 public 公共的\"></a>1.3 public 公共的</h4><p>&nbsp;&nbsp;public 关键字，作用如其名。</p>\n<h3 id=\"2-类、方法和变量修饰符\"><a href=\"#2-类、方法和变量修饰符\" class=\"headerlink\" title=\"2.类、方法和变量修饰符\"></a>2.类、方法和变量修饰符</h3><h4 id=\"2-1-abstract-声明抽象\"><a href=\"#2-1-abstract-声明抽象\" class=\"headerlink\" title=\"2.1 abstract 声明抽象\"></a>2.1 abstract 声明抽象</h4><p>&nbsp;&nbsp;abstract 关键字可以修饰类或方法。<br>&nbsp;&nbsp;abstract 类可以扩展（增加子类）,但不能直接实例化。<br>&nbsp;&nbsp;abstract 方法不在声明它的类中实现，但必须在某个子类中重写。<br>&nbsp;&nbsp;采用 abstract 方法的类本来就是抽象类，并且必须声明为 abstract。<br>&nbsp;&nbsp;仅当 abstract 类的子类实现其超类的所有 abstract 方法时，才能实例化 abstract 类的子类。这种类称为具体类，以区别于 abstract 类。<br>&nbsp;&nbsp;abstract 关键字不能应用于 static、private 或 final 方法，因为这些方法不能被重写，因此，不能在子类中实现,其中 final 类还不能有子类。</p>\n<h4 id=\"2-2-class-类\"><a href=\"#2-2-class-类\" class=\"headerlink\" title=\"2.2 class 类\"></a>2.2 class 类</h4><p>&nbsp;&nbsp;类是相关变量和/或方法的集合。类是面向对象的程序设计方法的基本构造单位。每个对象都是类的一个实例。要使用类，通常使用 new 操作符将类的对象实例化，然后调用类的方法来访问类的功能。</p>\n<h4 id=\"2-3-extends-继承、扩展\"><a href=\"#2-3-extends-继承、扩展\" class=\"headerlink\" title=\"2.3 extends 继承、扩展\"></a>2.3 extends 继承、扩展</h4><p>&nbsp;&nbsp;extends 关键字用在 class 或 interface 声明中，用于指示所声明的类或接口是其所继承的类或接口的子类。子类继承父类的所有 public 和 protected 变量和方法。子类可以重写父类的任何非 final 方法。一个类只能扩展一个其他类。</p>\n<h4 id=\"2-4-final-最终、不可改变\"><a href=\"#2-4-final-最终、不可改变\" class=\"headerlink\" title=\"2.4 final 最终、不可改变\"></a>2.4 final 最终、不可改变</h4><p>&nbsp;&nbsp;final 修饰类：该类不可被继承，而且该类的所有成员都会被隐式地指定为 final 方法。<br>&nbsp;&nbsp;final 修饰方法：可锁定方法，防止任何继承类修改它的含义；类的 private 方法会隐式地被指定为 final 方法。<br>&nbsp;&nbsp;final 修饰变量：这是 final 用的最多的地方。对于一个 final 变量，如果是基本数据类型的变量，则其数值在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。<br>&nbsp;&nbsp;final 修饰的引用对象不能只指向另一个对象，但是该对象内部的内容是可变的。</p>\n<h4 id=\"2-5-implements-实现\"><a href=\"#2-5-implements-实现\" class=\"headerlink\" title=\"2.5 implements 实现\"></a>2.5 implements 实现</h4><p>&nbsp;&nbsp;implements 声明的类必须提供在接口中所声明的所有方法的实现，一个类可以实现多个接口。</p>\n<h4 id=\"2-6-static-静态\"><a href=\"#2-6-static-静态\" class=\"headerlink\" title=\"2.6 static 静态\"></a>2.6 static 静态</h4><p>&nbsp;&nbsp;静态方法一般用于工具类中。<br>&nbsp;&nbsp;static 的主要目的就是创建独立于具体对象的域变量与方法，也就是没有创建对象也能调用方法。<br>&nbsp;&nbsp;在加载类的同时加载 static 修饰的部分,静态变量不能引用非静态方法，因为在加载静态的时候，非静态的方法，变量还不存在。<br>static 用法：</p>\n<ol>\n<li>静态导入：静态导入，就是把一个静态变量或者静态方法一次性导入，导入后可以直接使用该方法或者变量，而不再需要写对象名。如：import static java.lang.Math.*;一般不建议这样使用，使用哪个方法就导入哪个方法 import static java.lang.Math.PI;不要滥用静态导入。</li>\n<li>静态变量：静态变量属于类，在内存中只有一个实例。所在类被加载时，就会为该静态变量分配空间，实例变量属于对象，只有对象创建后才会分配空间，所以，当某一个变量会经常被外部代码访问时，可以考虑设计为静态。</li>\n<li><p>静态方法：静态方法的理解与静态变量相似。静态方法中不能使用 this 和 super 关键字。用途：单例模式 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>单例模式的特点是一个类只能有一个实例，为了实现这一功能，必须隐藏该类的构造函数，即把构造函数声明为private，并提供一个创建对象的方法。</p>\n</li>\n<li><p>静态代码段：静态代码块就是用static修饰的用{}括起来的代码段，它的主要目的就是对静态属性进行初始化。JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birthDate;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Date startDate,endDate;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        startDate = Date.valueOf(<span class=\"string\">\"1990\"</span>);</span><br><span class=\"line\">        endDate = Date.valueOf(<span class=\"string\">\"1999\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(Date birthDate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.birthDate = birthDate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isBornBoomer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> birthDate.compareTo(startDate)&gt;=<span class=\"number\">0</span> &amp;&amp; birthDate.compareTo(endDate) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，我们将一些只需要进行一次的初始化操作都放在static代码块中进行。</p>\n</li>\n<li>静态内部类：只有内部类才能被static修饰，普通的类不可以。被static修饰的内部类，它可以不依赖于外部类实例对象而被实例化，而通常的内部类需要在外部类实例化后才能实例化。静态内部类不能与外部类有相同的名字，不能访问外部类的普通成员变量，只能访问内部类中的静态成员和静态方法（包括私有类型）。</li>\n</ol>\n<h4 id=\"2-7-strictfp-严格、精准\"><a href=\"#2-7-strictfp-严格、精准\" class=\"headerlink\" title=\"2.7 strictfp 严格、精准\"></a>2.7 strictfp 严格、精准</h4><p>&nbsp;&nbsp;strictfp也就是精确浮点的意思。如果没有指定strictfp关键字时，Java的编译器以及运行环境在对浮点运算的表达式是采取一种近似于我行我素的行为来完成这些操作，以致于得到的结果往往无法令人满意。而一旦使用了strictfp来声明一个类、接口或者方法时，那么所声明的范围内Java的编译器以及运行环境会完全依照浮点规范IEEE-754来执行。因此如果想让浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，那就请用关键字strictfp。</p>\n<h4 id=\"2-8-synchronized-线程、同步\"><a href=\"#2-8-synchronized-线程、同步\" class=\"headerlink\" title=\"2.8 synchronized 线程、同步\"></a>2.8 synchronized 线程、同步</h4><p>synchronized 关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。<br>synchronized 关键字可防止代码的关键代码段一次被多个线程执行。<br>如果应用于静态方法，那么，当该方法一次由一个线程执行时，整个类将被锁定。<br>如果应用于实例方法，那么，当该方法一次由一个线程访问时，该实例将被锁定。<br>如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。  </p>\n<h4 id=\"2-9-transient-短暂\"><a href=\"#2-9-transient-短暂\" class=\"headerlink\" title=\"2.9 transient 短暂\"></a>2.9 transient 短暂</h4><p>transient 关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，Java的serialization提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。</p>\n<h4 id=\"2-a-volatile-易失\"><a href=\"#2-a-volatile-易失\" class=\"headerlink\" title=\"2.a volatile 易失\"></a>2.a volatile 易失</h4><p>volatile 关键字用于表示可以被多个线程异步修改的成员变量。Java 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分。</p>\n<h3 id=\"3-变量引用\"><a href=\"#3-变量引用\" class=\"headerlink\" title=\"3.变量引用\"></a>3.变量引用</h3><h4 id=\"3-1-super-父类、超类\"><a href=\"#3-1-super-父类、超类\" class=\"headerlink\" title=\"3.1 super 父类、超类\"></a>3.1 super 父类、超类</h4><p>super 关键字用于引用使用该关键字的类的超类。作为独立语句出现的 super 表示调用超类的构造方法。<br>super.<methodname>()表示调用超类的方法。只有在如下情况中才需要采用这种用法：要调用在该类中被重写的方法，以便指定应当调用在超类中的该方法。<br>super 用在子类中，目的是访问直接父类(类之上最接近的超类)中被屏蔽的成员。若调用父类的构造方法，super(参数列表)方式调用时，只能用在子类构造方法体中的第一行。</methodname></p>\n<h4 id=\"3-2-this-本类\"><a href=\"#3-2-this-本类\" class=\"headerlink\" title=\"3.2 this 本类\"></a>3.2 this 本类</h4><p>this 关键字用于引用当前实例。当引用可能不明确时，可以使用 this 关键字来引用当前的实例。<br>this只能用于方法方法体内。当一个对象创建后，Java虚拟机（JVM）就会给这个对象分配一个引用自身的指针，这个指针的名字就是this。因此，this只能在类中的非静态方法中使用，静态方法和静态的代码块中绝对不能出现this。<br>this 使用场景:   </p>\n<ol>\n<li>通过this调用另一个构造方法，用法是this(参数列表)，这个仅仅用在类的构造方法中。   </li>\n<li>函数参数或者函数中的局部变量和成员变量同名时，成员变量屏蔽，此时要访问成员变量则需要用“this.成员变量名”的方式来引用成员变量。</li>\n<li>在函数中，需要引用该函数所属类的当前对象的时候直接用 this。<br>总的来说，this 是指向对象本身的一个指针。</li>\n</ol>\n","categories":["JAVA"],"tags":["JAVA"]},{"title":"Java Multithreading","url":"https://feifaninternet.github.io/2018/02/08/Java-Multithreading/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><ol>\n<li>Thread: Each part of the program is called one Threads, and each thread defines an independent execution path.Multithreading is a special form of multitasking. Multithreading requires less overhead than multitasking.   </li>\n<li>Process: A process includes the memory space allocated by the operating system, including one or more threads. Threads can not exist independently, it must be part of the process. A process will run until all non-waiting threads end.</li>\n</ol>\n<h4 id=\"Thread-Lift-Cycle\"><a href=\"#Thread-Lift-Cycle\" class=\"headerlink\" title=\"Thread Lift Cycle\"></a>Thread Lift Cycle</h4><p><img src=\"/picture/ThreadLife.jpg\" alt=\"Picture\">   </p>\n<h4 id=\"Key-Words\"><a href=\"#Key-Words\" class=\"headerlink\" title=\"Key Words\"></a>Key Words</h4><p>&nbsp;&nbsp;New state: A newly generated thread begins its life cycle from the new state. It stays in this state until the program starts this thread.</p>\n<p>&nbsp;&nbsp;Running state: When a new state thread is started, the thread becomes runnable and the thread begins executing its task in this state.</p>\n<p>&nbsp;&nbsp;Ready state: When a thread waiting for another thread to perform a task, the thread into the ready state. When another thread to the ready state,When the thread sends a signal, the thread switches back to running.</p>\n<p>&nbsp;&nbsp;Sleep state: This thread goes to sleep from running due to the exhaustion of one thread’s time slice. When the time interval or waiting time expires.And, the state of the thread to switch to running.</p>\n<p>&nbsp;&nbsp;Termination: A running state of the thread to complete the task or other termination conditions, the thread will switch to the termination of the state.</p>\n<h3 id=\"Thread’s-priority\"><a href=\"#Thread’s-priority\" class=\"headerlink\" title=\"Thread’s priority\"></a>Thread’s priority</h3><p>&nbsp;&nbsp;Every Java thread has a priority, which helps the operating system to determine the thread’s scheduling order. Java priority is in MIN_PRIORITY (1) and MAX_PRIORITY (10) in the range between. By default, every thread is assigned a priority of NORM_PRIORITY (5).Threads with higher priority are more important to the program and should allocate processor time before the lower priority thread, but can not guarantee thread execution order and depend on the platform.</p>\n<h3 id=\"Two-ways-to-create-a-thread\"><a href=\"#Two-ways-to-create-a-thread\" class=\"headerlink\" title=\"Two ways to create a thread\"></a>Two ways to create a thread</h3><ol>\n<li>By implementing the Runnable interface.</li>\n<li>By inheriting the Thread class itself.</li>\n</ol>\n<h4 id=\"1-Implements-Runnable\"><a href=\"#1-Implements-Runnable\" class=\"headerlink\" title=\"1.Implements Runnable\"></a>1.Implements Runnable</h4>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;  </span><br><span class=\"line\">   Thread t;  </span><br><span class=\"line\">   NewThread() &#123;  </span><br><span class=\"line\">      <span class=\"comment\">// Create a second new thread  </span></span><br><span class=\"line\">      t = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">this</span>, <span class=\"string\">\"Demo Thread\"</span>);  </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Child thread: \"</span> + t);  </span><br><span class=\"line\">      t.start();   </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">// The second thread entry </span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">5</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Child Thread: \"</span> + i);  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">50</span>);  </span><br><span class=\"line\">         &#125;  </span><br><span class=\"line\">     &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"Child interrupted\"</span>);  </span><br><span class=\"line\">     &#125;  </span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"Exiting child thread\"</span>);  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadDemo</span> </span>&#123;  </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;  </span><br><span class=\"line\">      <span class=\"comment\">// create a new thread </span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> NewThread();   </span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">5</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;  </span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"Main Thread: \"</span> + i);  </span><br><span class=\"line\">           Thread.sleep(<span class=\"number\">100</span>);  </span><br><span class=\"line\">         &#125;  </span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"Main thread interrupted\"</span>);  </span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Main thread exiting\"</span>);  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-Extends-thread-class\"><a href=\"#2-Extends-thread-class\" class=\"headerlink\" title=\"2.Extends thread class\"></a>2.Extends thread class</h4>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">   NewThread() &#123;  </span><br><span class=\"line\">      <span class=\"comment\">// Create a second new thread   </span></span><br><span class=\"line\">      <span class=\"keyword\">super</span>(<span class=\"string\">\"Demo Thread\"</span>);  </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Child thread: \"</span> + <span class=\"keyword\">this</span>);  </span><br><span class=\"line\">      start();   </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"comment\">// The second thread entry </span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">5</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Child Thread: \"</span> + i);  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">50</span>);  </span><br><span class=\"line\">         &#125;  </span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"Child interrupted.\"</span>);  </span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Exiting child thread.\"</span>);  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExtendsThread</span> </span>&#123;  </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;  </span><br><span class=\"line\">      <span class=\"comment\">// create a new thread </span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> NewThread();   </span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">5</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Main Thread: \"</span> + i);  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);  </span><br><span class=\"line\">         &#125;  </span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"Main thread interrupted.\"</span>);  </span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Main thread exiting.\"</span>);  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output:</span><br><span class=\"line\">    Child thread: Thread[Demo Thread, 5, main]</span><br><span class=\"line\">    Main Thread: 5</span><br><span class=\"line\">    Child Thread: 5</span><br><span class=\"line\">    Child Thread: 4</span><br><span class=\"line\">    Main Thread: 4</span><br><span class=\"line\">    Child Thread: 3</span><br><span class=\"line\">    Child Thread: 2</span><br><span class=\"line\">    Main Thread: 3</span><br><span class=\"line\">    Child Thread: 1</span><br><span class=\"line\">    Exiting child thread</span><br><span class=\"line\">    Main Thread: 2</span><br><span class=\"line\">    Main Thread: 1</span><br><span class=\"line\">    Main thread exiting</span><br></pre></td></tr></table></figure>\n<h3 id=\"Thread-class-method\"><a href=\"#Thread-class-method\" class=\"headerlink\" title=\"Thread class method\"></a>Thread class method</h3><ol>\n<li><p>Executed using this thread</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void start()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Runnable object’s run method</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void run()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Change the name of the thread to the same name as the parameter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void setName(String name)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Change the priority of the thread</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void setPriority(int priority)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Mark this thread as a daemon or user thread</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void setDaemon(boolean on)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>The maximum time to wait for this thread to expire is sec milliseconds</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void join(long sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Interrupt thread</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void interrupt()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Test whether the thread is active</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final boolean isAlive()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Static-method\"><a href=\"#Static-method\" class=\"headerlink\" title=\"Static method\"></a>Static method</h4><ol>\n<li><p>Suspend the current thread and execute other threads</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void yield()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Sleep sec milliseconds</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void sleep(long sec)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>True if and only if the current thread is holding the monitor lock on the specified object</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static boolean holdsLock(Object obj)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Returns a reference to the currently executing thread object</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Thread currentThread()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Print the current thread’s stack trace to the standard error stream</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void dumpStack()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Some-of-the-main-concepts-in-threads\"><a href=\"#Some-of-the-main-concepts-in-threads\" class=\"headerlink\" title=\"Some of the main concepts in threads\"></a>Some of the main concepts in threads</h3><h3 id=\"1-Thread-synchronization\"><a href=\"#1-Thread-synchronization\" class=\"headerlink\" title=\"1.Thread synchronization\"></a>1.Thread synchronization</h3><p>&nbsp;&nbsp;Having multiple threads accessing a variable or object at the same time, having both read and write operations in those threads can cause confusion in the value of the variable or the state of the object, causing the program to become abnormal. So add a synchronization lock to avoid being called by other threads before the thread has not completed the operation, thus ensuring the uniqueness and accuracy of the variable or object.</p>\n<h4 id=\"Synchronization-method\"><a href=\"#Synchronization-method\" class=\"headerlink\" title=\"Synchronization method\"></a>Synchronization method</h4><ol>\n<li><p>Use the synchronized keyword modification method</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bank</span> </span>&#123;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// balance</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// save money  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addMoney</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span></span>&#123;  </span><br><span class=\"line\">        count += money;  </span><br><span class=\"line\">        System.out.println(System.currentTimeMillis() + <span class=\"string\">\"Save：\"</span> + money);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// take out money  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">subMoney</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count - money &lt; <span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Insufficient balance\"</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        count -= money;  </span><br><span class=\"line\">        System.out.println(+System.currentTimeMillis() + <span class=\"string\">\"Take：\"</span>+money);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// select  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lookMoney</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Balance：\"</span> + count);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SyncThreadTest</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">final</span> Bank bank = <span class=\"keyword\">new</span> Bank();  </span><br><span class=\"line\"></span><br><span class=\"line\">        Thread threadAdd = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">                <span class=\"comment\">// TODO Auto-generated method stub  </span></span><br><span class=\"line\">                <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">                        <span class=\"comment\">// TODO Auto-generated catch block  </span></span><br><span class=\"line\">                        e.printStackTrace();  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                    bank.addMoney(<span class=\"number\">100</span>);  </span><br><span class=\"line\">                    bank.lookMoney();  </span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"\\n\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;);  </span><br><span class=\"line\"></span><br><span class=\"line\">        Thread threadSub = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">                <span class=\"comment\">// TODO Auto-generated method stub  </span></span><br><span class=\"line\">                <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;  </span><br><span class=\"line\">                    bank.subMoney(<span class=\"number\">100</span>);  </span><br><span class=\"line\">                    bank.lookMoney();  </span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"\\n\"</span>);  </span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">                        <span class=\"comment\">// TODO Auto-generated catch block  </span></span><br><span class=\"line\">                        e.printStackTrace();  </span><br><span class=\"line\">                    &#125;     </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;);  </span><br><span class=\"line\">        threadSub.start();   </span><br><span class=\"line\">        threadAdd.start();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Use special domain variables (volatile) to achieve thread synchronization</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private volatile int count = 0;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>&nbsp;&nbsp;a. The volatile keyword provides a lock-free mechanism for accessing domain variables   </p>\n<p>&nbsp;&nbsp;b. The use of volatile modified domain is equivalent to tell the virtual machine that the domain may be updated by other threads   </p>\n<p>&nbsp;&nbsp;c. Instead of using the value in the register each time you use this field, recalculate   </p>\n<p>&nbsp;&nbsp;d. Volatile does not provide any atomic operations, it can not be used to modify final type variables   </p>\n<p>&nbsp;&nbsp;Its principle is to read the volatile modified variables every time the thread is read from memory, rather than read the cache, so each thread to access the variable values ​​are the same. This ensures synchronization.Not recommended.</p>\n<p>3.Use re-lock to achieve thread synchronization<br>&nbsp;&nbsp;The ReentrantLock class is a reentrant, mutually exclusive, lock that implements the Lock interface, which has the same basic behavior and semantics as the synchronized method, and extends its capabilities.<br>&nbsp;&nbsp;ReentrantLock commonly used methods:   </p>\n<ul>\n<li><p>Create an ReentrantLock instance</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReentrantLock()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Get lock</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Release lock</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unlock()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Example<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bank</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// declare ReentrantLock</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addMoney</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">// lock</span></span><br><span class=\"line\">        lock.lock(); </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;                </span><br><span class=\"line\">            count += money;  </span><br><span class=\"line\">            System.out.println(System.currentTimeMillis() + <span class=\"string\">\"Save：\"</span> + money);  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;  </span><br><span class=\"line\">            <span class=\"comment\">// release</span></span><br><span class=\"line\">            lock.unlock(); </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subMoney</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> </span>&#123;  </span><br><span class=\"line\">        lock.lock();  </span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count - money &lt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Insufficient balance\"</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        count -= money;  </span><br><span class=\"line\">        System.out.println(+System.currentTimeMillis() + <span class=\"string\">\"Take：\"</span> + money);  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;  </span><br><span class=\"line\">            lock.unlock();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lookMoney</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Balance：\"</span> + count);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.Use local variables for thread synchronization<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bank</span> </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Integer&gt; count = <span class=\"keyword\">new</span> ThreadLocal&lt;Integer&gt;()&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Integer <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated method stub  </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addMoney</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> </span>&#123;  </span><br><span class=\"line\">        count.set(count.get()+money);  </span><br><span class=\"line\">        System.out.println(System.currentTimeMillis() + <span class=\"string\">\"Save：\"</span> + money);  </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subMoney</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count.get() - money &lt; <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Insufficient balance\"</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        count.set(count.get()- money);  </span><br><span class=\"line\">        System.out.println(+System.currentTimeMillis() + <span class=\"string\">\"Take：\"</span> + money);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lookMoney</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Balance：\"</span> + count.get());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;&nbsp;When using ThreadLocal to manage variables, each thread that uses the variable gets a copy of the variable, independent of each other, so that each thread is free to modify its own copy of the variable without affecting other threads.</p>\n<h3 id=\"Thread-Communication\"><a href=\"#Thread-Communication\" class=\"headerlink\" title=\"Thread Communication\"></a>Thread Communication</h3><h4 id=\"nbsp-nbsp-Demand-Write-two-threads-one-thread-printing-1-52-another-thread-printing-letters-A-Z-print-order-12A34B56C-……-5152Z-requires-the-use-of-communication-between-threads\"><a href=\"#nbsp-nbsp-Demand-Write-two-threads-one-thread-printing-1-52-another-thread-printing-letters-A-Z-print-order-12A34B56C-……-5152Z-requires-the-use-of-communication-between-threads\" class=\"headerlink\" title=\"&nbsp;&nbsp;Demand: Write two threads, one thread printing 1 ~ 52, another thread printing letters A ~ Z, print order 12A34B56C …… 5152Z, requires the use of communication between threads.\"></a>&nbsp;&nbsp;Demand: Write two threads, one thread printing 1 ~ 52, another thread printing letters A ~ Z, print order 12A34B56C …… 5152Z, requires the use of communication between threads.</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Auxiliary tools</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> HelpUtil &#123;</span><br><span class=\"line\">     instance;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ExecutorService tPool = Executors.newFixedThreadPool(<span class=\"number\">2</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String[] buildNumArr(<span class=\"keyword\">int</span> max)&#123;</span><br><span class=\"line\">         String[] numArr = <span class=\"keyword\">new</span> String[max];</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max; i++)&#123;</span><br><span class=\"line\">             numArr[i] = Integer.toString(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> numArr;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String[] buildCharArr(<span class=\"keyword\">int</span> max)&#123;</span><br><span class=\"line\">         String[] charArr = <span class=\"keyword\">new</span> String[max];</span><br><span class=\"line\">         <span class=\"keyword\">int</span> temp = <span class=\"number\">65</span>;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max; i++)&#123;</span><br><span class=\"line\">             charArr[i] = String.valueOf((<span class=\"keyword\">char</span>)(temp + i));</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> charArr;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(String... input)</span></span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (input == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (String each : input)&#123;</span><br><span class=\"line\">             System.out.print(each + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(Runnable r)</span></span>&#123;</span><br><span class=\"line\">         tPool.submit(r);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">         tPool.shutdown();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-By-sharing-variables-to-achieve\"><a href=\"#1-By-sharing-variables-to-achieve\" class=\"headerlink\" title=\"1.By sharing variables to achieve\"></a>1.By sharing variables to achieve</h3><h3 id=\"1-1-Use-the-most-basic-synchronized-notify-wait\"><a href=\"#1-1-Use-the-most-basic-synchronized-notify-wait\" class=\"headerlink\" title=\"1.1 Use the most basic synchronized,notify,wait\"></a>1.1 Use the most basic synchronized,notify,wait</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodOne</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 3.Use volatile</span></span><br><span class=\"line\"><span class=\"comment\">    * 4.Use AtomicInteger</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadToGo</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ThreadToGo threadToGo = <span class=\"keyword\">new</span> ThreadToGo();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Runnable <span class=\"title\">newThreadOne</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String[] numArrInit = HelpUtil.buildNumArr(<span class=\"number\">52</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> String[] numArr = numArrInit;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; numArr.length; i = i+<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">synchronized</span> (threadToGo)&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">while</span> (threadToGo.value == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                                threadToGo.wait();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            HelpUtil.print(numArr[i],numArr[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">                            threadToGo.value = <span class=\"number\">2</span>;</span><br><span class=\"line\">                            threadToGo.notify();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Oops....\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Runnable <span class=\"title\">newThreadTwo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String[] charArrInit = HelpUtil.buildCharArr(<span class=\"number\">26</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> String[] charArr = charArrInit;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; charArr.length; i++)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">synchronized</span> (threadToGo)&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">while</span> (threadToGo.value == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                                threadToGo.wait();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            HelpUtil.print(charArr[i]);</span><br><span class=\"line\">                            threadToGo.value = <span class=\"number\">1</span>;</span><br><span class=\"line\">                            threadToGo.notify();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Oops....\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MethodOne one = <span class=\"keyword\">new</span> MethodOne();</span><br><span class=\"line\">        HelpUtil.instance.run(one.newThreadOne());</span><br><span class=\"line\">        HelpUtil.instance.run(one.newThreadTwo());</span><br><span class=\"line\">        HelpUtil.instance.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-Use-Lock-and-Condition\"><a href=\"#1-2-Use-Lock-and-Condition\" class=\"headerlink\" title=\"1.2 Use Lock and Condition\"></a>1.2 Use Lock and Condition</h3>","categories":["JAVA"],"tags":["JAVA"]},{"title":"Java Collection","url":"https://feifaninternet.github.io/2018/02/05/Java-Collection/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>&nbsp;&nbsp;In programming, we often need to store data. Although the array is a good choice, but the premise is known to save the number of objects, once the length of the array initialization, can not be changed, and the collection is used to save the dynamic growth data (at compile time can not determine the specific number) of.<br>&nbsp;&nbsp;Collection classes are also called container classes.   </p>\n<ul>\n<li><p>1.Collection<br>A set of elements subject to some kind of rule</p>\n<ul>\n<li>List : Elements must be in a specific order</li>\n<li>Set : Can not have duplicate elements</li>\n<li>Queue : Maintain a queue (first in, first out) order   </li>\n</ul>\n</li>\n<li><p>2.Map<br>A set of paired “key-value” objects</p>\n</li>\n</ul>\n<h3 id=\"1-List\"><a href=\"#1-List\" class=\"headerlink\" title=\"1.List\"></a>1.List</h3><p>&nbsp;&nbsp;The List collection represents an ordered, repeatable collection of elements, each element of the collection has its corresponding sequential index.By default, the element’s index is set in the order in which elements are added.   </p>\n<h3 id=\"1-1-ArrayList\"><a href=\"#1-1-ArrayList\" class=\"headerlink\" title=\"1.1 ArrayList\"></a>1.1 ArrayList</h3><p>&nbsp;&nbsp;In order to reduce the number of distribution, improve performance, ArrayList provides the following methods.</p>\n<ul>\n<li>1.ensureCapacity(int minCapacity): Increment the Array [] array Object [] array length by minCapacity.</li>\n<li>2.trimToSize(): Adjust ArrayList collection Object [] array length is the current number of elements. <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        List books = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        <span class=\"comment\">// add three elements to the books collection</span></span><br><span class=\"line\">        books.add(<span class=\"keyword\">new</span> String(<span class=\"string\">\"----- the first element -----\"</span>));</span><br><span class=\"line\">        books.add(<span class=\"keyword\">new</span> String(<span class=\"string\">\"----- the second element -----\"</span>));</span><br><span class=\"line\">        books.add(<span class=\"keyword\">new</span> String(<span class=\"string\">\"-----the third element -----\"</span>));</span><br><span class=\"line\">        System.out.println(books);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// insert the new string object in the second position</span></span><br><span class=\"line\">        books.add(<span class=\"number\">1</span> , <span class=\"keyword\">new</span> String(<span class=\"string\">\"----- the added element -----\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; books.size() ; i++ )&#123;</span><br><span class=\"line\">            System.out.println(books.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// delete the third element</span></span><br><span class=\"line\">        books.remove(<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(books);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// judge the specified element in the List collection position: output 1, indicating that in the second place</span></span><br><span class=\"line\">        System.out.println(books.indexOf(<span class=\"keyword\">new</span> String(<span class=\"string\">\"----- the added element -----\"</span>)));</span><br><span class=\"line\">        <span class=\"comment\">// Replace the second element with a new string object</span></span><br><span class=\"line\">        books.set(<span class=\"number\">1</span>, <span class=\"keyword\">new</span> String(<span class=\"string\">\"----- the new element -----\"</span>));</span><br><span class=\"line\">        System.out.println(books);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// the second element of the books collection (including) to the third element (not included) is intercepted into subsets</span></span><br><span class=\"line\">        System.out.println(books.subList(<span class=\"number\">1</span> , <span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"1-2-Vector\"><a href=\"#1-2-Vector\" class=\"headerlink\" title=\"1.2 Vector\"></a>1.2 Vector</h3><p>&nbsp;&nbsp;An ancient collection almost identical to the ArrayList usage.Stack is a subclass provided by Vector for simulating the “stack” data structure (LIFO).<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VectorTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Stack v = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">        <span class=\"comment\">// followed by the three elements into the stack</span></span><br><span class=\"line\">        v.push(<span class=\"string\">\"---------- head ----------\"</span>);</span><br><span class=\"line\">        v.push(<span class=\"string\">\"---------- body ----------\"</span>);</span><br><span class=\"line\">        v.push(<span class=\"string\">\"---------- tail ----------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(v);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// visit the first element</span></span><br><span class=\"line\">        System.out.println(v.peek());  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// pop the first element</span></span><br><span class=\"line\">        v.pop();            </span><br><span class=\"line\">        <span class=\"comment\">// only left with head and body</span></span><br><span class=\"line\">        System.out.println(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-3-LinkedList\"><a href=\"#1-3-LinkedList\" class=\"headerlink\" title=\"1.3 LinkedList\"></a>1.3 LinkedList</h3><p>&nbsp;&nbsp;LinkedList implements List interface, it can be a queue operation, which can be based on the index random access to the elements in the collection. At the same time it also implements the Deque interface, which can use LinkedList as a double-ended queue. Naturally, it can also be used as a “stack.”<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedListTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;          </span><br><span class=\"line\">        LinkedList books = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">        <span class=\"comment\">// add a string element to the end of the queue (double-ended queue)</span></span><br><span class=\"line\">        books.offer(<span class=\"string\">\"queue rear\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// add a string element to the top of the stack (double-ended queue)</span></span><br><span class=\"line\">        books.push(<span class=\"string\">\"top of stack\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// add a string element to the head of the queue (equivalent to the top of the stack)</span></span><br><span class=\"line\">        books.offerFirst(<span class=\"string\">\"queue head\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; books.size(); i++ )&#123;</span><br><span class=\"line\">            System.out.println(books.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// visit the top of the stack element</span></span><br><span class=\"line\">        System.out.println(books.peekFirst());</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// visit the last element of the queue</span></span><br><span class=\"line\">        System.out.println(books.peekLast());</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// the top of the stack element will pop up stack</span></span><br><span class=\"line\">        books.pop();</span><br><span class=\"line\">        System.out.println(books);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// access and delete the last element of the queue</span></span><br><span class=\"line\">        System.out.println(books.pollLast());</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// only one element in the middle: \"top of stack\"</span></span><br><span class=\"line\">        System.out.println(books);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-Queue\"><a href=\"#2-Queue\" class=\"headerlink\" title=\"2.Queue\"></a>2.Queue</h3><p>&nbsp;&nbsp;Queue is used to simulate the “queue” this data structure.The head of the queue holds the oldest element in the queue, and the tail of the queue holds the element with the shortest storage time in the queue. The new element is offered at the end of the queue, the poll operation returns the element at the head of the queue, and the queue does not allow random access to the elements in the queue.</p>\n<h3 id=\"2-1-PriorityQueue\"><a href=\"#2-1-PriorityQueue\" class=\"headerlink\" title=\"2.1 PriorityQueue\"></a>2.1 PriorityQueue</h3><p>&nbsp;&nbsp;PriorityQueue is not a more standard queue implementation. PriorityQueue saves the order of queue elements not in the order they were queued, but in the queue elements.<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriorityQueueTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        PriorityQueue pq = <span class=\"keyword\">new</span> PriorityQueue();</span><br><span class=\"line\">        <span class=\"comment\">// add four elements</span></span><br><span class=\"line\">        pq.offer(<span class=\"number\">6</span>);</span><br><span class=\"line\">        pq.offer(-<span class=\"number\">3</span>);</span><br><span class=\"line\">        pq.offer(<span class=\"number\">9</span>);</span><br><span class=\"line\">        pq.offer(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//  elements arranged in order of size, output额[-3, 0, 6, 9]</span></span><br><span class=\"line\">        System.out.println(pq);</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"comment\">// access the first element of the queue, in fact, the smallest element in the queue: -3</span></span><br><span class=\"line\">        System.out.println(pq.poll());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;&nbsp;PriorityQueue does not allow null elements to be inserted, and its ordering is similar to that of a TreeSet.</p>\n<h3 id=\"2-2-Deque\"><a href=\"#2-2-Deque\" class=\"headerlink\" title=\"2.2 Deque\"></a>2.2 Deque</h3><p>&nbsp;&nbsp;Deque interface represents a “double-ended queue”, the double-ended queue can add and delete elements from both ends at the same time, so the implementation of Deque class can be used as a queue can also be used as a stack.</p>\n<h3 id=\"2-2-1-ArrayDeque\"><a href=\"#2-2-1-ArrayDeque\" class=\"headerlink\" title=\"2.2.1 ArrayDeque\"></a>2.2.1 ArrayDeque</h3><p>&nbsp;&nbsp;An array-based, dual-ended queue, similar to an ArrayList, uses a dynamic, reallocatable Object [] array at the bottom to store collection elements that are reallocated at the bottom when the collection element exceeds the capacity of the array An Object [] array to hold the collection elements.<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayDequeTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayDeque stack = <span class=\"keyword\">new</span> ArrayDeque();</span><br><span class=\"line\">        <span class=\"comment\">// push three elements to stack</span></span><br><span class=\"line\">        stack.push(<span class=\"string\">\"head\"</span>);</span><br><span class=\"line\">        stack.push(<span class=\"string\">\"body\"</span>);</span><br><span class=\"line\">        stack.push(<span class=\"string\">\"tail\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// output: [head, body, tail]</span></span><br><span class=\"line\">        System.out.println(stack);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// visit the first element, but do not pop it out of the \"stack\"</span></span><br><span class=\"line\">        System.out.println(stack.peek());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//output: [head, body, tail]</span></span><br><span class=\"line\">        System.out.println(stack);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// pop the first element，output：tail</span></span><br><span class=\"line\">        System.out.println(stack.pop());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// output: [head, body]</span></span><br><span class=\"line\">        System.out.println(stack);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"List-in-different-scenarios-of-choice\"><a href=\"#List-in-different-scenarios-of-choice\" class=\"headerlink\" title=\"List in different scenarios of choice\"></a>List in different scenarios of choice</h4><ol>\n<li><p>List provided by java is a “linear table interface,” ArrayList (linear array based on the array), LinkedList (linear list based on the chain) are two typical implementations of linear tables.</p>\n</li>\n<li><p>Queue represents the queue, Deque represents the deque (can be used as a queue, can also be used as a stack).</p>\n</li>\n<li><p>Because arrays hold all the array elements in a contiguous block of memory, arrays perform best at random accesses. Therefore, the internal array to achieve the underlying set of random access in the best performance.</p>\n</li>\n<li><p>Internal to the list as the underlying implementation of the collection in the implementation of insert, delete operation has a good performance.</p>\n</li>\n<li><p>When performing iterative operations, the collection performance achieved with the linked list as the bottom is better than the collection performance achieved with the array as the bottom.</p>\n</li>\n</ol>\n<h3 id=\"3-Set\"><a href=\"#3-Set\" class=\"headerlink\" title=\"3.Set\"></a>3.Set</h3><p>&nbsp;&nbsp;Set collection is similar to a jar, there is no obvious order between multiple objects thrown into the Set collection.When we add a new element, the Set will accept the new element if the new element has the same value as the object in the Set, and equals will return false. Otherwise, it will be rejected.</p>\n<h3 id=\"3-1-HashSet\"><a href=\"#3-1-HashSet\" class=\"headerlink\" title=\"3.1 HashSet\"></a>3.1 HashSet</h3><p>&nbsp;&nbsp;HashSet is a typical implementation of the Set interface. HashSet uses the HASH algorithm to store the elements in the set, so it has good access and lookup performance. When an element is stored in the HashSet collection, the HashSet will call the object hashCode () method to get the hashCode value of the object, and then determine the storage location of the object in the HashSet according to the HashCode value.It is noteworthy that the HashSet collection to determine the equality of the two elements of the standard is equal to two objects through the equals () method, and two objects hashCode () method returns the same value<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the equals method of class A always returns true, but does not override its hashCode () method</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the class B hashCode () method always returns 1, but does not override its equals () method</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the hashCode () method of class C always returns 2, and has overridden its equals () method</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashSetTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HashSet books = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\">        <span class=\"comment\">// add to books</span></span><br><span class=\"line\">        books.add(<span class=\"keyword\">new</span> A());</span><br><span class=\"line\">        books.add(<span class=\"keyword\">new</span> A());</span><br><span class=\"line\"></span><br><span class=\"line\">        books.add(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\">        books.add(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\"></span><br><span class=\"line\">        books.add(<span class=\"keyword\">new</span> C());</span><br><span class=\"line\">        books.add(<span class=\"keyword\">new</span> C());</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// result: [B@1, B@1, C@2, A@3bc257, A@785d65]</span></span><br><span class=\"line\">        System.out.println(books);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;&nbsp;equals() determines whether HashSet can be added, and where hashCode () determines where to place, both of them must be satisfied at the same time to allow a new element to join HashSet.</p>\n<h3 id=\"3-1-1-LinkedHashSet\"><a href=\"#3-1-1-LinkedHashSet\" class=\"headerlink\" title=\"3.1.1 LinkedHashSet\"></a>3.1.1 LinkedHashSet</h3><p>&nbsp;&nbsp;LinkedHashSet uses lists to maintain the order of the elements so that the elements appear to be saved in the order they were inserted.LinkedHashSet will iterate through the elements in the collection as it traverses the elements in the LinkedHashSet collection. LinkedHashSet needs to maintain the insertion order of the elements, so the performance is slightly lower than the performance of the HashSet, but will have good performance when iterating through all the elements in the Set (traversal).<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedHashSetTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        LinkedHashSet books = <span class=\"keyword\">new</span> LinkedHashSet();</span><br><span class=\"line\">        books.add(<span class=\"string\">\"head\"</span>);</span><br><span class=\"line\">        books.add(<span class=\"string\">\"tail\"</span>);</span><br><span class=\"line\">        System.out.println(books);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// delete element head</span></span><br><span class=\"line\">        books.remove(<span class=\"string\">\"head\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// add head again</span></span><br><span class=\"line\">        books.add(<span class=\"string\">\"head\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// result: tail, head</span></span><br><span class=\"line\">        System.out.println(books);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;&nbsp;The order of the elements is always the same as the order of the additions, and the collection elements are not allowed to repeat.</p>\n<h3 id=\"3-2-SortedSet\"><a href=\"#3-2-SortedSet\" class=\"headerlink\" title=\"3.2 SortedSet\"></a>3.2 SortedSet</h3><p>&nbsp;&nbsp;This interface is mainly used for sorting operations.</p>\n<h3 id=\"3-2-1-TreeSet\"><a href=\"#3-2-1-TreeSet\" class=\"headerlink\" title=\"3.2.1 TreeSet\"></a>3.2.1 TreeSet</h3><p>&nbsp;&nbsp;TreeSet is an implementation of the SortedSet interface, and TreeSet ensures that the collection elements are sorted.<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeSetTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TreeSet treeSet = <span class=\"keyword\">new</span> TreeSet();</span><br><span class=\"line\">        <span class=\"comment\">// add four Integer Object to treeSet</span></span><br><span class=\"line\">        treeSet.add(<span class=\"number\">5</span>);</span><br><span class=\"line\">        treeSet.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">        treeSet.add(<span class=\"number\">10</span>);</span><br><span class=\"line\">        treeSet.add(-<span class=\"number\">9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// result: the collection element is already in sort order</span></span><br><span class=\"line\">        System.out.println(treeSet);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// output the first element in the collection</span></span><br><span class=\"line\">        System.out.println(treeSet.first());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// output the late element in the collection</span></span><br><span class=\"line\">        System.out.println(treeSet.last());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// returns a subset of less than 4, not including 4</span></span><br><span class=\"line\">        System.out.println(treeSet.headSet(<span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// returns a subset greater than 5, if the Set contains 5, the subset also contains 5</span></span><br><span class=\"line\">        System.out.println(treeSet.tailSet(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// returns a subset of greater than or equal to -3 and less than 4</span></span><br><span class=\"line\">        System.out.println(treeSet.subSet(-<span class=\"number\">3</span> , <span class=\"number\">4</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;&nbsp;TreeSet uses a red-black tree data structure to store the collection elements. TreeSet supports two sorts: natural sort, custom sort.</p>\n<ul>\n<li>1.Natural sort: TreeSet will call the collection element compareTo method to compare the size of the relationship between the elements, and then set the elements sorted in ascending order.If compareTo returns 0, that is, if two objects compare with each other, the new object can not be added.If you try to add an object to the TreeSet, the object’s class must implement the Comparable interface, or the program will throw an exception.</li>\n<li>2.Custom sort: Comparator interface to achieve. <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">M</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">M</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"M[age:\"</span> + age + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeSetTest4</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TreeSet ts = <span class=\"keyword\">new</span> TreeSet(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Comparator()&#123;</span><br><span class=\"line\">            <span class=\"comment\">// according to the M object age attribute to determine the size</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Object o1, Object o2)</span></span>&#123;</span><br><span class=\"line\">                M m1 = (M)o1;</span><br><span class=\"line\">                M m2 = (M)o2;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> m1.age &gt; m2.age ? -<span class=\"number\">1</span></span><br><span class=\"line\">                    : m1.age &lt; m2.age ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);    </span><br><span class=\"line\">        ts.add(<span class=\"keyword\">new</span> M(<span class=\"number\">5</span>));</span><br><span class=\"line\">        ts.add(<span class=\"keyword\">new</span> M(-<span class=\"number\">3</span>));</span><br><span class=\"line\">        ts.add(<span class=\"keyword\">new</span> M(<span class=\"number\">9</span>));</span><br><span class=\"line\">        System.out.println(ts);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-3-EnumSet\"><a href=\"#3-3-EnumSet\" class=\"headerlink\" title=\"3.3 EnumSet\"></a>3.3 EnumSet</h3><p>&nbsp;&nbsp;A collection designed specifically for enumeration classes.All elements in the EnumSet must be enumerated values ​​of the specified enumeration type explicitly or implicitly specified when creating the EnumSet. EnumSet collection elements are also ordered, they enumerate values ​​in the Enum class in the order of definition to determine the order of the elements of the collection.<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> Season&#123;</span><br><span class=\"line\">    SPRING,SUMMER,FALL,WINTER</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnumSetTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// create an EnumSet collection, the collection element is the enumeration value of the Season enumeration class</span></span><br><span class=\"line\">        EnumSet es1 = EnumSet.allOf(Season.class);</span><br><span class=\"line\">        <span class=\"comment\">// output [SPRING,SUMMER,FALL,WINTER]</span></span><br><span class=\"line\">        System.out.println(es1);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// create an empty EnumSet collection</span></span><br><span class=\"line\">        EnumSet es2 = EnumSet.noneOf(Season.class); </span><br><span class=\"line\">        <span class=\"comment\">//output []</span></span><br><span class=\"line\">        System.out.println(es2); </span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">// manually add two elements</span></span><br><span class=\"line\">        es2.add(Season.WINTER);</span><br><span class=\"line\">        es2.add(Season.SPRING);</span><br><span class=\"line\">        <span class=\"comment\">// output [SPRING,WINTER]</span></span><br><span class=\"line\">        System.out.println(es2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// create an EnumSet collection with the specified enumeration value</span></span><br><span class=\"line\">        EnumSet es3 = EnumSet.of(Season.SUMMER , Season.WINTER); </span><br><span class=\"line\">        <span class=\"comment\">// output [SUMMER,WINTER]</span></span><br><span class=\"line\">        System.out.println(es3);</span><br><span class=\"line\"></span><br><span class=\"line\">        EnumSet es4 = EnumSet.range(Season.SUMMER , Season.WINTER); </span><br><span class=\"line\">        <span class=\"comment\">// output [SUMMER,FALL,WINTER]</span></span><br><span class=\"line\">        System.out.println(es4);</span><br><span class=\"line\">        </span><br><span class=\"line\">        EnumSet es5 = EnumSet.complementOf(es4); </span><br><span class=\"line\">        <span class=\"comment\">// output [SPRING]</span></span><br><span class=\"line\">        System.out.println(es5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Set-in-different-scenarios-of-choice\"><a href=\"#Set-in-different-scenarios-of-choice\" class=\"headerlink\" title=\"Set in different scenarios of choice\"></a>Set in different scenarios of choice</h4><ol>\n<li><p>HashSet always better than the performance of the TreeSet (especially the most commonly used to add, query elements and other operations), because TreeSet requires additional red-black tree algorithm to maintain the order of the elements of the collection. Only when you need to maintain a sorted set, you should use the TreeSet, otherwise you should use HashSet.</p>\n</li>\n<li><p>For normal insert and delete operations, LinkedHashSet is a little slower than HashSet, which is caused by the overhead of maintaining the linked list. However, with the existence of the linked list, traversing LinkedHashSet will be faster.</p>\n</li>\n<li><p>EnumSet is the best performance in all Set implementation class, but it can only save the enumeration value of the same enumeration class as a collection element.   </p>\n</li>\n<li><p>HashSet, TreeSet, EnumSet are “thread-insecure” and can usually be “wrapped” by the synchronizedSortedSet method of the Collections utility.<br>&nbsp;&nbsp;SortedSet s = Collections.synchronizedSortedSet(new TreeSet(…));</p>\n</li>\n</ol>\n<h3 id=\"4-Map\"><a href=\"#4-Map\" class=\"headerlink\" title=\"4.Map\"></a>4.Map</h3><p>&nbsp;&nbsp;Map is used to save the data with “mappings”,So the Map collection holds two sets of values, one for the key in the Map and the other for the value in the Map. Both key and value can be any reference type of data. Map’s key does not allow duplication.</p>\n<h3 id=\"4-1-HashMap\"><a href=\"#4-1-HashMap\" class=\"headerlink\" title=\"4.1 HashMap\"></a>4.1 HashMap</h3><p>&nbsp;&nbsp;HashMap can not guarantee the order of the key-value pairs, and the criterion for judging whether two keys are equal or not is that the two keys return true through the equals () method, and the hashCode values ​​of the two keys must also be equal.</p>\n<h3 id=\"4-1-1-LinkedHashMap\"><a href=\"#4-1-1-LinkedHashMap\" class=\"headerlink\" title=\"4.1.1 LinkedHashMap\"></a>4.1.1 LinkedHashMap</h3><p>&nbsp;&nbsp;LinkedHashMap also maintains a sequence of key-value pairs using doubly linked lists that maintain the order in which the Map iterates, in the same order as key-value pairs are inserted.<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedHashMapTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        LinkedHashMap scores = <span class=\"keyword\">new</span> LinkedHashMap();</span><br><span class=\"line\">        scores.put(<span class=\"string\">\"Chinese\"</span> , <span class=\"number\">80</span>);</span><br><span class=\"line\">        scores.put(<span class=\"string\">\"English\"</span> , <span class=\"number\">82</span>);</span><br><span class=\"line\">        scores.put(<span class=\"string\">\"Math\"</span> , <span class=\"number\">76</span>);</span><br><span class=\"line\">        <span class=\"comment\">// traverse</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object key : scores.keySet())&#123;</span><br><span class=\"line\">            System.out.println(key + <span class=\"string\">\"------&gt;\"</span> + scores.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-2-HashTable\"><a href=\"#4-2-HashTable\" class=\"headerlink\" title=\"4.2 HashTable\"></a>4.2 HashTable</h3><h3 id=\"4-2-1-Properties\"><a href=\"#4-2-1-Properties\" class=\"headerlink\" title=\"4.2.1 Properties\"></a>4.2.1 Properties</h3><p>&nbsp;&nbsp;The Properties object is particularly handy when working with properties files. The Properties class can associate a Map object with a properties file so that the key-value pairs in the Map object can be written to the properties file. The property name - attribute value “is loaded into the Map object.<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertiesTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Properties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        <span class=\"comment\">// add elements to Properties</span></span><br><span class=\"line\">        props.setProperty(<span class=\"string\">\"username\"</span> , <span class=\"string\">\"xfan\"</span>);</span><br><span class=\"line\">        props.setProperty(<span class=\"string\">\"password\"</span> , <span class=\"string\">\"0920\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// save the key-value pair in Properties to the a.ini file</span></span><br><span class=\"line\">        props.store(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"a.ini\"</span>), <span class=\"string\">\"Contents\"</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// create an new Properties Object</span></span><br><span class=\"line\">        Properties props2 = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        <span class=\"comment\">// add elements to Properties</span></span><br><span class=\"line\">        props2.setProperty(<span class=\"string\">\"loadPro\"</span> , <span class=\"string\">\"loadProV\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// append the key-value pair in the a.ini file to props2</span></span><br><span class=\"line\">        props2.load(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"a.ini\"</span>) );   </span><br><span class=\"line\">        System.out.println(props2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-3-SortedMap\"><a href=\"#4-3-SortedMap\" class=\"headerlink\" title=\"4.3 SortedMap\"></a>4.3 SortedMap</h3><h3 id=\"4-3-1-TreeMap\"><a href=\"#4-3-1-TreeMap\" class=\"headerlink\" title=\"4.3.1 TreeMap\"></a>4.3.1 TreeMap</h3><p>&nbsp;&nbsp;TreeMap is a red-black tree data structure, each key-value pair as a node of the red-black tree. When TreeMap stores the key-value pair (node), it is necessary to sort the nodes according to the key. TreeMap ensures that all key-value pairs are in order. Similarly, TreeMap also has two sorts of sorting: natural sorting, custom sorting.</p>\n<h3 id=\"4-4-WeakHashMap\"><a href=\"#4-4-WeakHashMap\" class=\"headerlink\" title=\"4.4 WeakHashMap\"></a>4.4 WeakHashMap</h3><p>&nbsp;&nbsp;WeakHashMap and HashMap usage is similar. The difference is that the key in the HashMap retains a “strong reference” to the actual object, and the object referenced in the HashMap will not be garbage collected as long as the object of the HashMap is not destroyed. However, the key in WeakHashMap only retains a “weak reference” to the actual object. If the object referenced by the key of the WeakHashMap object is not referenced by other strongly referenced variables, the objects referenced by these keys may be garbage collected. When the garbage After reclaiming the real object corresponding to the button, the key-value pairs corresponding to the keys may also be deleted automatically in the WeakHashMap.<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeakHashMapTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        WeakHashMap whm = <span class=\"keyword\">new</span> WeakHashMap();</span><br><span class=\"line\">        <span class=\"comment\">// add three elements（no other references）</span></span><br><span class=\"line\">        whm.put(<span class=\"keyword\">new</span> String(<span class=\"string\">\"Chinese\"</span>) , <span class=\"keyword\">new</span> String(<span class=\"string\">\"A\"</span>));</span><br><span class=\"line\">        whm.put(<span class=\"keyword\">new</span> String(<span class=\"string\">\"Math\"</span>) , <span class=\"keyword\">new</span> String(<span class=\"string\">\"B\"</span>));</span><br><span class=\"line\">        whm.put(<span class=\"keyword\">new</span> String(<span class=\"string\">\"English\"</span>) , <span class=\"keyword\">new</span> String(<span class=\"string\">\"C\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// add a strong reference object</span></span><br><span class=\"line\">        whm.put(<span class=\"string\">\"java\"</span> , <span class=\"keyword\">new</span> String(<span class=\"string\">\"B\"</span>));</span><br><span class=\"line\">        <span class=\"comment\">// output you can see four key-value</span></span><br><span class=\"line\">        System.out.println(whm);</span><br><span class=\"line\">        <span class=\"comment\">// notify the system immediately garbage collection</span></span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\">        System.runFinalization();</span><br><span class=\"line\">        <span class=\"comment\">// normally only the key-value pairs that are strongly referenced are retained</span></span><br><span class=\"line\">        System.out.println(whm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-5-IdentityHashMap\"><a href=\"#4-5-IdentityHashMap\" class=\"headerlink\" title=\"4.5 IdentityHashMap\"></a>4.5 IdentityHashMap</h3><p>&nbsp;&nbsp;The implementation mechanism of IdentityHashMap is basically similar to that of HashMap. In IdentityHashMap, IdentityHashMap considers the two keys equal if and only if the two keys are strictly equal (key1 == key2).<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IdentityHashMapTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        IdentityHashMap ihm = <span class=\"keyword\">new</span> IdentityHashMap();</span><br><span class=\"line\">        <span class=\"comment\">// add two elements</span></span><br><span class=\"line\">        ihm.put(<span class=\"keyword\">new</span> String(<span class=\"string\">\"Chinese\"</span>) , <span class=\"number\">89</span>);</span><br><span class=\"line\">        ihm.put(<span class=\"keyword\">new</span> String(<span class=\"string\">\"Chinese\"</span>) , <span class=\"number\">78</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// that will only add one element</span></span><br><span class=\"line\">        ihm.put(<span class=\"string\">\"java\"</span> , <span class=\"number\">93</span>);</span><br><span class=\"line\">        ihm.put(<span class=\"string\">\"java\"</span> , <span class=\"number\">98</span>);</span><br><span class=\"line\">        System.out.println(ihm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-6-EnumMap\"><a href=\"#4-6-EnumMap\" class=\"headerlink\" title=\"4.6 EnumMap\"></a>4.6 EnumMap</h3><p>&nbsp;&nbsp;EnumMap is a Map implementation used with enumeration classes. All keys in EnumMap must be enumerated values ​​of a single enumeration class. EnumMap must be created explicitly or implicitly specify its corresponding enumeration class. EnumMap based on the key natural order<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> Season&#123;</span><br><span class=\"line\">    SPRING,SUMMER,FALL,WINTER</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnumMapTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// associate EnumMap with enum classes</span></span><br><span class=\"line\">        EnumMap enumMap = <span class=\"keyword\">new</span> EnumMap(Season.class);</span><br><span class=\"line\">        enumMap.put(Season.SUMMER , <span class=\"string\">\"Summer is hot\"</span>);</span><br><span class=\"line\">        enumMap.put(Season.SPRING , <span class=\"string\">\"Spring is beautiful\"</span>);</span><br><span class=\"line\">        System.out.println(enumMap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Map-in-different-scenarios-of-choice\"><a href=\"#Map-in-different-scenarios-of-choice\" class=\"headerlink\" title=\"Map in different scenarios of choice\"></a>Map in different scenarios of choice</h4><ol>\n<li><p>The efficiency of HashMap and HashTable roughly the same, because their implementation mechanism is almost exactly the same. HashMap is usually faster than HashTable because HashTable requires additional thread synchronization control.   </p>\n</li>\n<li><p>TreeMap is usually slower than HashMap and HashTable (especially slower when inserting or deleting key-value pairs) because the underlying TreeMap uses a red-black tree to manage key-value pairs.   </p>\n</li>\n<li><p>One of the benefits of using TreeMap is that the key-value pairs in the TreeMap are always in an ordered state and do not need to be specifically ordered</p>\n</li>\n</ol>\n","categories":["JAVA"],"tags":["JAVA"]},{"title":"Java Queue","url":"https://feifaninternet.github.io/2018/02/02/Java-Queue/","content":"<h3 id=\"The-definition-of-the-queue\"><a href=\"#The-definition-of-the-queue\" class=\"headerlink\" title=\"The definition of the queue\"></a>The definition of the queue</h3><p>&nbsp;&nbsp;Is a linear table with limited operations. Is a first-in,first-out(FIFO) linear table.   </p>\n<ul>\n<li>front : The end that is allowed to be deleted is called the head of the team.</li>\n<li>rear  : The end that allows insertion is called the tail.   </li>\n</ul>\n<h3 id=\"Order-queue\"><a href=\"#Order-queue\" class=\"headerlink\" title=\"Order queue\"></a>Order queue</h3><h4 id=\"The-basic-operation-of-the-order-queue\"><a href=\"#The-basic-operation-of-the-order-queue\" class=\"headerlink\" title=\"The basic operation of the order queue\"></a>The basic operation of the order queue</h4><p>&nbsp;&nbsp;Their initial value should be set to 0 at queue initialization</p>\n<ul>\n<li>When entering the team : Insert the new element into the rear of the position pointed by.</li>\n<li>Departure : delete the front of the elements, and then add 1 front and return deleted elements.   </li>\n</ul>\n<h4 id=\"Sequence-table-overflow-phenomenon\"><a href=\"#Sequence-table-overflow-phenomenon\" class=\"headerlink\" title=\"Sequence table overflow phenomenon\"></a>Sequence table overflow phenomenon</h4><ul>\n<li>Underflow: When the queue is empty, make a spillover operation caused by the phenomenon. Underflow is a normal phenomenon and is commonly used as a condition of program transfer control.</li>\n<li>Really overflow: When the queue is full, into the stack operation space overflow phenomenon. True overflow is a mistake, should try to avoid.</li>\n<li>False overflow : Due to the entry and exit of the operation, only increase the head and tail pointer does not reduce, resulting in deleted elements of the space will never be reused, and thus can not be enqueued.</li>\n</ul>\n","categories":["JAVA"],"tags":["JAVA"]},{"title":"JAVA Linked List","url":"https://feifaninternet.github.io/2018/02/02/JAVA-Linked-List/","content":"<h3 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h3><p>&nbsp;&nbsp;A linked list is a common underlying data structure that is a linear list but does not store data in a linear order, but a pointer to the next node in each node.So the list is inserted faster than the linear order table,however, the query speed is relatively slow.The use of linked list structure can overcome the shortcomings of the array linked list need to know the size of the data in advance, the linked list structure can take full advantage of computer memory space for flexible dynamic memory management.However,the list has the lost random array read the advantages of the same time as the list linked to increase the pointer field,the space overhead is relatively large.<br>&nbsp;&nbsp;Linked list as a basic data structure can be used to generate other type of data structure.A linked list usually consists of a series of nodes,each containing arbitrary instance data and one or two links to point to the previous or next node,which allows inserting and removing nodes anywhere on the table,but not allow random access.There are many different types of lists : unidirectional lists,double linked lists and circular lists.<br>&nbsp;&nbsp;Linked to the list as a unit, the data is not stored in continuous storage, in addition to the data, but also contains a pointer to the next node, the data always need to access the data from the beginning of the list.   </p>\n<h3 id=\"Linked-list\"><a href=\"#Linked-list\" class=\"headerlink\" title=\"Linked list\"></a>Linked list</h3><h4 id=\"Create-a-node-class\"><a href=\"#Create-a-node-class\" class=\"headerlink\" title=\"Create a node class\"></a>Create a node class</h4>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * data : represents the value of the node</span></span><br><span class=\"line\"><span class=\"comment\">     * next : the reference to the next node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Getter</span> <span class=\"meta\">@Setter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Getter</span> <span class=\"meta\">@Setter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node next;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * only one node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> data)&#123;</span><br><span class=\"line\">        m_Data = data;</span><br><span class=\"line\">        m_Next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * contains multiple nodes,pointers must be defined</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> data, Node next)&#123;</span><br><span class=\"line\">        m_Data = data;</span><br><span class=\"line\">        m_Next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Create-a-linked-list\"><a href=\"#Create-a-linked-list\" class=\"headerlink\" title=\"Create a linked list\"></a>Create a linked list</h4>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkList</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Getter</span> <span class=\"meta\">@Setter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node m_Node;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * empty linked list</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    LinkList()&#123;</span><br><span class=\"line\">        m_Node = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * create a linked list with only one node because no pointers are declared</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    LinkList(<span class=\"keyword\">int</span> data)&#123;</span><br><span class=\"line\">        m_Node = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * traverse all nodes</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">viewAllNodes</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Node next = m_Node;</span><br><span class=\"line\">        String s;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            s += next.getData();</span><br><span class=\"line\">            next = next.getNext();              </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * insert at the specified id location</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertAfterId</span><span class=\"params\">(<span class=\"keyword\">int</span> data, <span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">        Node next = m_Node;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            m_Node = <span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(next.getNext() != <span class=\"keyword\">null</span> &amp;&amp; next.getData() != id)</span><br><span class=\"line\">            next = next.getNext();</span><br><span class=\"line\">            next.setNext(<span class=\"keyword\">new</span> Node(data, next.getNext()));</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * remove the node at the specified id location</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">removeAtId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">        Node ahead = m_Node;</span><br><span class=\"line\">        Node follow = ahead;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ahead == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ahead.getData() == id)&#123;</span><br><span class=\"line\">            m_Node = m_Node.getNext();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ahead = ahead.getNext();</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(ahead != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ahead.getData() == id)&#123;</span><br><span class=\"line\">                    follow.setNext(ahead.getNext());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                follow = ahead;</span><br><span class=\"line\">                ahead = ahead.getNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * remove all nodes</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">removeAll</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        m_Node = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Some-commonly-used-linked-list-operations\"><a href=\"#Some-commonly-used-linked-list-operations\" class=\"headerlink\" title=\"Some commonly used linked list operations\"></a>Some commonly used linked list operations</h3><h4 id=\"1-List-reversed\"><a href=\"#1-List-reversed\" class=\"headerlink\" title=\"1. List reversed\"></a>1. List reversed</h4>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedListMethodDemo</span></span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">ReverseIteratively</span><span class=\"params\">(Node head)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Node pReversedHead = head;</span><br><span class=\"line\">        Node pNode = head;</span><br><span class=\"line\">        Node pPrev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (pNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Node pNext = pNode.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pNext == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                pReversedHead = pNode;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pNode.next = pPrev;</span><br><span class=\"line\">            pPrev = pNode;</span><br><span class=\"line\">            pNode = pNext;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.head = pReversedHead;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-Find-single-linked-list-of-intermediate-nodes\"><a href=\"#2-Find-single-linked-list-of-intermediate-nodes\" class=\"headerlink\" title=\"2.Find single-linked list of intermediate nodes\"></a>2.Find single-linked list of intermediate nodes</h4><p>&nbsp;&nbsp;Use the fast and slow way to find the middle node of the single-linked list, the fast pointer takes two steps at a time, and the slow pointer takes one step at a time. When the fast pointer finishes, the slow pointer just reaches the intermediate node.<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchMidNode</span></span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">searchMidNode</span><span class=\"params\">(Node head)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Node p = <span class=\"keyword\">this</span>.head, </span><br><span class=\"line\">        q = <span class=\"keyword\">this</span>.head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.next != <span class=\"keyword\">null</span> &amp;&amp; p.next.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            p = p.next.next;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Mid:\"</span> + q.data);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-Sort-the-linked-list\"><a href=\"#3-Sort-the-linked-list\" class=\"headerlink\" title=\"3.Sort the linked list\"></a>3.Sort the linked list</h4>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SortLinkedList</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">orderList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Node nextNode;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">        Node curNode = head;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curNode.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            nextNode = curNode.next;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (nextNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (curNode.data &gt; nextNode.data) &#123;</span><br><span class=\"line\">                    tmp = curNode.data;</span><br><span class=\"line\">                    curNode.data = nextNode.data;</span><br><span class=\"line\">                    nextNode.data = tmp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            nextNode = nextNode.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curNode = curNode.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-Delete-duplicate-nodes-in-the-list\"><a href=\"#4-Delete-duplicate-nodes-in-the-list\" class=\"headerlink\" title=\"4.Delete duplicate nodes in the list\"></a>4.Delete duplicate nodes in the list</h4>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SortLinkedList</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteDuplicate</span><span class=\"params\">(Node head)</span></span>&#123;</span><br><span class=\"line\">        Node p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            Node q = p;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (q.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(q.next == p.next)&#123;</span><br><span class=\"line\">                    q.next == q.next.next;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    q = q.next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["JAVA"],"tags":["JAVA"]},{"title":"Java Array","url":"https://feifaninternet.github.io/2018/02/01/Java-Array/","content":"<h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><p>&nbsp;&nbsp;The same type of data collection.In fact, the array is a container.We can automatically number the elements in the array from 0 to facilitate the operation of these elements.Array is a way to store data.And array can hold any type of data.   </p>\n<h3 id=\"The-name-of-the-array\"><a href=\"#The-name-of-the-array\" class=\"headerlink\" title=\"The name of the array\"></a>The name of the array</h3>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// type [] arrayName = new type[size]</span><br><span class=\"line\">int[] arr = new int[5];</span><br><span class=\"line\"></span><br><span class=\"line\">// type [] arrayName = new type[]&#123;element, element,...&#125;</span><br><span class=\"line\">int[] arr = new int[]&#123;1,2,3,4&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Initialization-of-the-array\"><a href=\"#Initialization-of-the-array\" class=\"headerlink\" title=\"Initialization of the array\"></a>Initialization of the array</h3>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int[] arr = &#123; 1, 2, 3, 4, 5 &#125;;</span><br><span class=\"line\">int[] arr2 = new int[] &#123; 1, 2, 3, 4, 5 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int[] arr3 = new int[3];</span><br><span class=\"line\">arr3[0] = 1;</span><br><span class=\"line\">arr3[1] = 5;</span><br><span class=\"line\">arr3[2] = 6;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-traversal\"><a href=\"#Array-traversal\" class=\"headerlink\" title=\"Array traversal\"></a>Array traversal</h3>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">int[] x = &#123; 1, 2, 3 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">for (int y = 0; y &lt; x.length; y++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(x[y]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-common-exception\"><a href=\"#Array-common-exception\" class=\"headerlink\" title=\"Array common exception\"></a>Array common exception</h3><ul>\n<li>java.lang.NullPointerException   </li>\n<li>java.lang.ArrayIndexOutOfBoundsException</li>\n</ul>\n<h3 id=\"The-way-to-sort-array\"><a href=\"#The-way-to-sort-array\" class=\"headerlink\" title=\"The way to sort array\"></a>The way to sort array</h3><h3 id=\"1-Using-arrays-comes-with-methods\"><a href=\"#1-Using-arrays-comes-with-methods\" class=\"headerlink\" title=\"1.Using arrays comes with methods\"></a>1.Using arrays comes with methods</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArraySort</span></span>&#123;     </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] sortWithArrays( <span class=\"keyword\">int</span>[] args)&#123;            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(args == <span class=\"keyword\">null</span>|| args.length &lt; <span class=\"number\">2</span>)&#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> args;  </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            Arrays.sort(args); </span><br><span class=\"line\">            <span class=\"keyword\">return</span> args; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Bubble-sorting-algorithm\"><a href=\"#2-Bubble-sorting-algorithm\" class=\"headerlink\" title=\"2.Bubble sorting algorithm\"></a>2.Bubble sorting algorithm</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BubbleSort</span></span>&#123;     </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] sortWithBubble(<span class=\"keyword\">int</span>[] args)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(args == <span class=\"keyword\">null</span>|| args.length &lt; <span class=\"number\">2</span>)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> args;  </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; args.length-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>;j &lt; args.length;j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(args[j] &lt; args[i])&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> temp = args[i]; </span><br><span class=\"line\">                        args[i] = args[j];</span><br><span class=\"line\">                        args[j] = temp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">            <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Select-sorting-algorithm\"><a href=\"#3-Select-sorting-algorithm\" class=\"headerlink\" title=\"3.Select sorting algorithm\"></a>3.Select sorting algorithm</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelectSort</span></span>&#123;     </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] sortWithSelect(<span class=\"keyword\">int</span>[] args)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> minIndex;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(args == <span class=\"keyword\">null</span> || args.length &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; args.length-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">                minIndex = i;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>;j &lt; args.length;j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (args[j] &lt; args[minIndex])&#123;</span><br><span class=\"line\">                       minIndex = j;                          </span><br><span class=\"line\">                    &#125;          </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(minIndex != i)&#123;</span><br><span class=\"line\">                    temp = args[i];</span><br><span class=\"line\">                    args[i] = args[minIndex];</span><br><span class=\"line\">                    args[minIndex] = temp;</span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-Insert-sorting-algorithm\"><a href=\"#4-Insert-sorting-algorithm\" class=\"headerlink\" title=\"4.Insert sorting algorithm\"></a>4.Insert sorting algorithm</h3>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertSort</span></span>&#123;     </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] sortWithInsert(<span class=\"keyword\">int</span>[] args)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(args == <span class=\"keyword\">null</span> || args.length &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt; args.length;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i;j &gt; <span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (args[j] &lt; args[j-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> temp = args[j];</span><br><span class=\"line\">                        args[j] = args[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">                        args[j-<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                    &#125;      </span><br><span class=\"line\">                &#125;                   </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> args;           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n","categories":["JAVA"],"tags":["JAVA"]},{"title":"Java Data Structure","url":"https://feifaninternet.github.io/2018/01/29/Java-Data-Structure/","content":"<h3 id=\"The-class-and-interface-of-the-structure\"><a href=\"#The-class-and-interface-of-the-structure\" class=\"headerlink\" title=\"The class and interface of the structure\"></a>The class and interface of the structure</h3><h3 id=\"Enumeration-Interface\"><a href=\"#Enumeration-Interface\" class=\"headerlink\" title=\"Enumeration ( Interface )\"></a>Enumeration ( Interface )</h3><p>&nbsp;&nbsp;Enumeration is widely used in data structure.The enumeration interface defines a way to retrieve consecutive elements from the data structure.This traditional interface has been replaced by an iterator,although rarely used,but it has not been abandoned.<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Vector;</span><br><span class=\"line\">        <span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnumerationTester</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">              Enumeration&lt;String&gt; days;</span><br><span class=\"line\">              Vector&lt;String&gt; dayNames = <span class=\"keyword\">new</span> Vector&lt;String&gt;();</span><br><span class=\"line\">              dayNames.add(<span class=\"string\">\"Sunday\"</span>);</span><br><span class=\"line\">              dayNames.add(<span class=\"string\">\"Monday\"</span>);</span><br><span class=\"line\">              dayNames.add(<span class=\"string\">\"Tuesday\"</span>);</span><br><span class=\"line\">              dayNames.add(<span class=\"string\">\"Wednesday\"</span>);</span><br><span class=\"line\">              dayNames.add(<span class=\"string\">\"Thursday\"</span>);</span><br><span class=\"line\">              dayNames.add(<span class=\"string\">\"Friday\"</span>);</span><br><span class=\"line\">              dayNames.add(<span class=\"string\">\"Saturday\"</span>);</span><br><span class=\"line\">              days = dayNames.elements();</span><br><span class=\"line\">              <span class=\"keyword\">while</span> (days.hasMoreElements())&#123;</span><br><span class=\"line\">                 System.out.println(days.nextElement()); </span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"BitSet\"><a href=\"#BitSet\" class=\"headerlink\" title=\"BitSet\"></a>BitSet</h3><p>&nbsp;&nbsp;A BitSet class creates a special type of array to hold bit values,BitSet array size will increase with the need.<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.BitSet;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitSetDemo</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">     BitSet bits1 = <span class=\"keyword\">new</span> BitSet(<span class=\"number\">16</span>);</span><br><span class=\"line\">     BitSet bits2 = <span class=\"keyword\">new</span> BitSet(<span class=\"number\">16</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">     <span class=\"comment\">// set some bits</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">16</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((i%<span class=\"number\">2</span>) == <span class=\"number\">0</span>) bits1.set(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((i%<span class=\"number\">5</span>) != <span class=\"number\">0</span>) bits2.set(i);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"Initial pattern in bits1: \"</span>);</span><br><span class=\"line\">     System.out.println(bits1);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"\\nInitial pattern in bits2: \"</span>);</span><br><span class=\"line\">     System.out.println(bits2);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">// AND bits</span></span><br><span class=\"line\">     bits2.and(bits1);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"\\nbits2 AND bits1: \"</span>);</span><br><span class=\"line\">     System.out.println(bits2);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">// OR bits</span></span><br><span class=\"line\">     bits2.or(bits1);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"\\nbits2 OR bits1: \"</span>);</span><br><span class=\"line\">     System.out.println(bits2);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">// XOR bits</span></span><br><span class=\"line\">     bits2.xor(bits1);</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"\\nbits2 XOR bits1: \"</span>);</span><br><span class=\"line\">     System.out.println(bits2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p>&nbsp;&nbsp;The size of a Vector can be dynamically changed as needed.So when creating an object do not have to specify the size of it.The Vector class implements a dynamic array,and ArrayList and similar,but two are different.   </p>\n<ul>\n<li>Vector is accessed synchronously</li>\n<li>Vector contains many traditional methods,these methods do not belong to the collection framework   </li>\n</ul>\n<p>&nbsp;&nbsp;Vector class supports four kinds of construction method.</p>\n<p>1.Create a default vector,the default size is ten<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector()</span><br></pre></td></tr></table></figure></p>\n<p>2.Create a vector of the specified size<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector(int size)</span><br></pre></td></tr></table></figure></p>\n<p>3.Create a vector of the specified size,and specify the increment.Increments represent the number of elements each time the vector is incremented<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector(int size,int incr)</span><br></pre></td></tr></table></figure></p>\n<p>4.Create a vector that contains the elements of the set<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector(Collection c)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h3><p>&nbsp;&nbsp;Stack implements a back-in-first-out data structure.You can understand a stack as a vertically-distributed stack of objects, and when you add a new one, you place the new one at the top of the other.Stack is a subclass of Vector.<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StackDemo</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// push elements into the top of the stack</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showPush</span><span class=\"params\">(Stack&lt;Integer&gt; st, <span class=\"keyword\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">        st.push(<span class=\"keyword\">new</span> Integer(a));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"push(\"</span> + a + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"stack: \"</span> + st);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// remove the object at the top of the stack</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showPop</span><span class=\"params\">(Stack&lt;Integer&gt; st)</span> </span>&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"pop -&gt; \"</span>);</span><br><span class=\"line\">        Integer a = (Integer) st.pop();</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"stack: \"</span> + st);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Stack&lt;Integer&gt; st = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"stack: \"</span> + st);</span><br><span class=\"line\">        showpush(st, <span class=\"number\">42</span>);</span><br><span class=\"line\">        showpush(st, <span class=\"number\">66</span>);</span><br><span class=\"line\">        showpush(st, <span class=\"number\">99</span>);</span><br><span class=\"line\">        showpop(st);</span><br><span class=\"line\">        showpop(st);</span><br><span class=\"line\">        showpop(st);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            showpop(st);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (EmptyStackException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"empty stack\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h3><p>&nbsp;&nbsp;The HashTable class provides a means of organizing data based on user-defined key ( Hash key ) structures.The key is hashed, and the resulting hash code is used as an index for the values ​​stored in the table.<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashTableDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// create a hash map</span></span><br><span class=\"line\">      Hashtable balance = <span class=\"keyword\">new</span> Hashtable();</span><br><span class=\"line\">      Enumeration names;</span><br><span class=\"line\">      String str;</span><br><span class=\"line\">      <span class=\"keyword\">double</span> bal;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// specified the key and value</span></span><br><span class=\"line\">      balance.put(<span class=\"string\">\"key1\"</span>, <span class=\"keyword\">new</span> Double(<span class=\"number\">3434.34</span>));</span><br><span class=\"line\">      balance.put(<span class=\"string\">\"key2\"</span>, <span class=\"keyword\">new</span> Double(<span class=\"number\">123.22</span>));</span><br><span class=\"line\">      balance.put(<span class=\"string\">\"key3\"</span>, <span class=\"keyword\">new</span> Double(<span class=\"number\">1378.00</span>));</span><br><span class=\"line\">      balance.put(<span class=\"string\">\"key4\"</span>, <span class=\"keyword\">new</span> Double(<span class=\"number\">99.22</span>));</span><br><span class=\"line\">      balance.put(<span class=\"string\">\"key5\"</span>, <span class=\"keyword\">new</span> Double(-<span class=\"number\">19.08</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// show all balances in hash table.</span></span><br><span class=\"line\">      names = balance.keys();</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(names.hasMoreElements()) &#123;</span><br><span class=\"line\">         str = (String) names.nextElement();</span><br><span class=\"line\">         System.out.println(str + <span class=\"string\">\": \"</span> +</span><br><span class=\"line\">         <span class=\"comment\">// get the value from this key</span></span><br><span class=\"line\">         balance.get(str));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">      <span class=\"comment\">// deposit 1,000 into key1`s account</span></span><br><span class=\"line\">      bal = ((Double)balance.get(<span class=\"string\">\"key1\"</span>)).doubleValue();</span><br><span class=\"line\">      balance.put(<span class=\"string\">\"key1\"</span>, <span class=\"keyword\">new</span> Double(bal+<span class=\"number\">1000</span>));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"key1's new balance: \"</span> +</span><br><span class=\"line\">      balance.get(<span class=\"string\">\"key1\"</span>));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h3><p>&nbsp;&nbsp;Properties inherit from the HashTable.Properties class represents a durable set of properties.Each key in the property list and its corresponding value is a string.<br>   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// create</span></span><br><span class=\"line\">      Properties capitals = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">      Set states;</span><br><span class=\"line\">      String str;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// put elements</span></span><br><span class=\"line\">      capitals.put(<span class=\"string\">\"Illinois\"</span>, <span class=\"string\">\"Springfield\"</span>);</span><br><span class=\"line\">      capitals.put(<span class=\"string\">\"Missouri\"</span>, <span class=\"string\">\"Jefferson City\"</span>);</span><br><span class=\"line\">      capitals.put(<span class=\"string\">\"Washington\"</span>, <span class=\"string\">\"Olympia\"</span>);</span><br><span class=\"line\">      capitals.put(<span class=\"string\">\"California\"</span>, <span class=\"string\">\"Sacramento\"</span>);</span><br><span class=\"line\">      capitals.put(<span class=\"string\">\"Indiana\"</span>, <span class=\"string\">\"Indianapolis\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// get set-view of keys</span></span><br><span class=\"line\">      states = capitals.keySet(); </span><br><span class=\"line\">      Iterator itr = states.iterator();</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(itr.hasNext()) &#123;</span><br><span class=\"line\">         str = (String) itr.next();</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"The capital of \"</span> +</span><br><span class=\"line\">            str + <span class=\"string\">\" is \"</span> + capitals.getProperty(str) + <span class=\"string\">\".\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// look for state not in list -- specify default</span></span><br><span class=\"line\">      str = capitals.getProperty(<span class=\"string\">\"Florida\"</span>, <span class=\"string\">\"Not Found\"</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"The capital of Florida is \"</span></span><br><span class=\"line\">          + str + <span class=\"string\">\".\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["JAVA"],"tags":["JAVA"]},{"title":"Git Notes","url":"https://feifaninternet.github.io/2018/01/27/Git-Notes/","content":"<h3 id=\"Git-operation\"><a href=\"#Git-operation\" class=\"headerlink\" title=\"Git operation\"></a>Git operation</h3><h3 id=\"Put-your-project-into-remote-warehouse\"><a href=\"#Put-your-project-into-remote-warehouse\" class=\"headerlink\" title=\"Put your project into remote warehouse\"></a>Put your project into remote warehouse</h3><p>1.you need a project code and a code repository(gitHub or coding)<br>2.initialize local repository   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n<p>3.add the project code to working tree  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br></pre></td></tr></table></figure>\n<p>4.commit your project code</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">\"first commit notes\"</span></span><br></pre></td></tr></table></figure>\n<p>5.synchronize the code to the remote repository</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin your remote reposiroty address</span><br></pre></td></tr></table></figure>\n<p>6.create an upstream push to the master branch</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>7.now you can create a new dev branch based on the master,and then create your branch based on the dev,keep the developments</p>\n<h3 id=\"Change-your-git-warehouse-address\"><a href=\"#Change-your-git-warehouse-address\" class=\"headerlink\" title=\"Change your git warehouse address\"></a>Change your git warehouse address</h3><p>We use the simplest method.</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin remote_git_address</span><br></pre></td></tr></table></figure>\n<h3 id=\"Submit-code-steps\"><a href=\"#Submit-code-steps\" class=\"headerlink\" title=\"Submit code steps\"></a>Submit code steps</h3><p>1.add your code to the working tree</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br></pre></td></tr></table></figure>\n<p>2.commit your code</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">\"notes\"</span></span><br></pre></td></tr></table></figure>\n<p>3.pushed to the remote branch</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin yourBranch</span><br></pre></td></tr></table></figure>\n<p>4.switch to the dev branch </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout dev</span><br></pre></td></tr></table></figure>\n<p>5.synchronize remote dev branch code</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n<p>6.merge your branch code into dev</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge --no-ff -m <span class=\"string\">\"merge: notes\"</span></span><br></pre></td></tr></table></figure>\n<p>7.pushed to the remote branch</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure>\n<p>8.switch to your branch </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout yourBranch</span><br></pre></td></tr></table></figure>\n<p>9.rebase the dev branch</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase dev</span><br></pre></td></tr></table></figure>\n<p>10.pushed to the remote branch</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin yourBranch</span><br></pre></td></tr></table></figure>\n<h3 id=\"Resolve-git-conflict\"><a href=\"#Resolve-git-conflict\" class=\"headerlink\" title=\"Resolve git conflict\"></a>Resolve git conflict</h3><h3 id=\"Merge-conflict\"><a href=\"#Merge-conflict\" class=\"headerlink\" title=\"Merge conflict\"></a>Merge conflict</h3><p>1.find the conflict file<br>2.find the text like this </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD  -- dev branch</span><br><span class=\"line\"> dev code</span><br><span class=\"line\">=======</span><br><span class=\"line\">your code</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 6853e5ff961e684d3a6c02d4d06183b5ff330dcc  -- your branch</span><br></pre></td></tr></table></figure>\n<p>3.remove the conflict flag, leaving only one branch of the code (dev code or your code)<br>4.add changes to the working tree</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br></pre></td></tr></table></figure>\n<p>5.commit your code   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">\"notes\"</span></span><br></pre></td></tr></table></figure>\n<p>6.push changes to dev branch   </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure>\n<h3 id=\"Rebase-conflict\"><a href=\"#Rebase-conflict\" class=\"headerlink\" title=\"Rebase conflict\"></a>Rebase conflict</h3><p>1.find the conflict file<br>2.find the text like this </p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD  -- dev branch</span><br><span class=\"line\">dev code</span><br><span class=\"line\">=======</span><br><span class=\"line\">your code</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 6853e5ff961e684d3a6c02d4d06183b5ff330dcc  -- your branch</span><br></pre></td></tr></table></figure>\n<p>3.remove the conflict flag, leaving only one branch of the code (dev code or your code)<br>4.add changes to the working tree</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -u</span><br></pre></td></tr></table></figure>\n<p>5.continue rebase   </p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase --<span class=\"built_in\">continue</span></span><br></pre></td></tr></table></figure>\n<p>6.until all conflicts resolved<br>7.if you want to quit rebase   </p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase --abort</span><br></pre></td></tr></table></figure>\n<p><em>attention: after rebase,don`t need to commit and submit new changes,all git automatically</em></p>\n<h3 id=\"My-IDEA-ignore-directory\"><a href=\"#My-IDEA-ignore-directory\" class=\"headerlink\" title=\"My IDEA .ignore directory\"></a>My IDEA .ignore directory</h3>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target/</span><br><span class=\"line\">!.mvn/wrapper/maven-wrapper.jar</span><br><span class=\"line\"></span><br><span class=\"line\">### STS ###</span><br><span class=\"line\">.apt_generated</span><br><span class=\"line\">*.classpath</span><br><span class=\"line\">.factorypath</span><br><span class=\"line\">*.project</span><br><span class=\"line\">*.settings/</span><br><span class=\"line\">*.springBeans</span><br><span class=\"line\">*.class</span><br><span class=\"line\"></span><br><span class=\"line\">### IntelliJ IDEA ###</span><br><span class=\"line\">*.jar</span><br><span class=\"line\"># *.war</span><br><span class=\"line\">*.ear</span><br><span class=\"line\">*.log</span><br><span class=\"line\">*.mvn</span><br><span class=\"line\"></span><br><span class=\"line\">*.idea</span><br><span class=\"line\">*.iws</span><br><span class=\"line\">*.iml</span><br><span class=\"line\">*.ipr</span><br><span class=\"line\"></span><br><span class=\"line\">target</span><br><span class=\"line\">src/test</span><br><span class=\"line\"></span><br><span class=\"line\">### NetBeans ###</span><br><span class=\"line\">nbproject/private/</span><br><span class=\"line\">build/</span><br><span class=\"line\">nbbuild/</span><br><span class=\"line\">dist/</span><br><span class=\"line\">nbdist/</span><br><span class=\"line\">.nb-gradle/</span><br></pre></td></tr></table></figure>\n<p>need to remove cached first : </p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached .</span><br></pre></td></tr></table></figure>\n<p>no userName no password every push :</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global credential.helper store</span><br></pre></td></tr></table></figure>\n","categories":["work notes"],"tags":["git"]},{"title":"JAVA Stacks And Heaps","url":"https://feifaninternet.github.io/2018/01/23/JAVA-Stacks-and-heaps/","content":"<h3 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h3><p>&nbsp;&nbsp;Some basic types of variables defined in the function and the object reference variables are allocated in the function’s stack memory.<br>&nbsp;&nbsp;Define a variable in a block of code, java on the stack for this variable to allocate memory space,when the scope of variables beyond,java will automatically release the memory space of the variable, the memory space can be used for other purposes.<br>&nbsp;&nbsp;Heap memory is used to store objects and arrays created by new. The allocated memory in the heap is managed by the java virtual machine’s automatic garbage collector. After an array or object is created in the heap,you can also define a special variable in the stack whose value is equal to the first address of the array or object in the heap memory. This special variable in the stack becomes Arrays or objects referenced variables can be used in the program after the reference variable in the stack memory to access the heap array or object,the reference variable is equivalent to an array or object from an alias, or code.<br>&nbsp;&nbsp;For arrays, objects, the heap memory occupied by arrays and objects themselves will not be released,even if the program runs into the code block where the statements they produce are located. Arrays and objects become garbage when they are not referenced by variables. It can no longer be used, but still occupies memory and is freed by the garbage collector at a later time. This is also the main reason for java memory, in fact, the stack variable points to the heap memory variables, this is the pointer in Java</p>\n<h3 id=\"Memory-allocation-strategy\"><a href=\"#Memory-allocation-strategy\" class=\"headerlink\" title=\"Memory allocation strategy\"></a>Memory allocation strategy</h3><p>&nbsp;&nbsp;Memory allocation has three strategies, namely static, stack, and heap.      </p>\n<ul>\n<li>&nbsp;&nbsp;Static storage allocation refers to the storage space that each data object needs to be determined at compile time so that fixed memory space can be allocated at compile time.This allocation strategy requires that variable data is not allowed in the program code The existence of structures, such as mutable arrays, also does not allow nested or recursive structures to appear as they all result in the compiler not being able to calculate the exact memory requirements.   </li>\n<li>&nbsp;&nbsp;Stacked storage allocation can also be referred to as dynamic storage allocation, implemented by a stack-like runtime stack. In a storied storage strategy, the program’s data area requirements are completely unknown at compile time and are not known until runtime , But when entering a program module on the fly it is necessary to know the size of the data area required by the program module to allocate memory for it.As with the well-known stack in the data structure, the stack memory allocation is advanced Principle of distribution.   </li>\n<li>&nbsp;&nbsp;Heap storage allocations are solely responsible for allocating memory allocations for data structures that store requirements, such as variable length strings and object instances, at compile time or at runtime module entries. The heap is made up of large blocks of available or free blocks, The memory can be allocated and released in any order.<br>&nbsp;&nbsp;A heap is an application that requires the operating system to allocate memory at run time and takes up time to allocate and destroy, so using heaps is inefficient, but the heap has the advantage that the compiler does not have to know how much memory to allocate from the heap , And you do not have to know how long the stored data stays in the heap, so you have greater flexibility in saving data with the heap. In fact, object-oriented polymorphism, heap memory allocation is essential, because the storage space required for polymorphic variables can only be determined after the object has been created at run time.When executing the code to create the object, it will be in the heap Automatically save the data, but it takes more time to save in the heap.   </li>\n</ul>\n<h3 id=\"Heap-and-stacks-in-Java\"><a href=\"#Heap-and-stacks-in-Java\" class=\"headerlink\" title=\"Heap and stacks in Java\"></a>Heap and stacks in Java</h3><p>&nbsp;&nbsp;JVM is a stack-based virtual machine.JVM for each newly created thread is assigned a stack.That is, for a Java program, it runs through the stack to complete the operation. The stack saves the state of the thread in frames. The JVM performs only two operations on the stack: push and pop operations on a frame-by-frame basis.When a java method is activated,the JVM pushes a new frame into the thread’s stack, called the current frame, to hold parameters, local variables, intermediate calculations, and other data.<br>&nbsp;&nbsp;When creating an object in Java, memory is allocated both in the stack and in the heap. The memory allocated in the heap actually establishes that for sex, and the memory allocated on the stack is just a pointer to the heap.<br>&nbsp;&nbsp;Stacks and heaps are all used by Java to store data in Ram. Unlike C ++, Java automatically manages stacks and heaps.Java heap is a runtime data area, the object of the class from which to allocate space. They do not need to be explicitly released by the program code, but are responsible for garbage collection, Java’s garbage collector will automatically take away the data is no longer in use. Stack has a very important special, that is, there is data in the stack can be shared.</p>\n","categories":["JAVA"],"tags":["JAVA"]},{"title":"Xfan CV","url":"https://feifaninternet.github.io/about/index.html","content":"<p>date: 2018-01-20 18:19:11<br>tags: xfan<br>categories: Personal</p>\n<h3 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h3><p>熊凡，男，1994-12-27，毕业于湖南工业大学机械设计制造及其自动化专业，2年工作经验<br>邮箱：feifaninternet920@gmail.com<br>个人博客：<a href=\"https://feifaninternet.github.io\">https://feifaninternet.github.io</a><br>github网址：<a href=\"https://github.com/feifaninternet\" target=\"_blank\" rel=\"noopener\">https://github.com/feifaninternet</a>   </p>\n<h3 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h3><ol>\n<li>扎实的Java基础，熟悉多线程、网络编程，了解设计模式。</li>\n<li>熟练使用Maven、Gradle版本控制工具，Git、GitHub、Coding、GitLab等代码管理。</li>\n<li>熟悉Java Web技术，jQuery、Ajax等前端框架。</li>\n<li>熟练应用Spring boot、MyBatis、Hibernate等框架开发常用框架。</li>\n<li>熟悉springCloud、Dubbo等分布式框架。</li>\n<li>掌握Mysql、Oracle关系数据库，Redis、MongoDB等Nosql。</li>\n<li>熟悉Tomcat、JBOSS、WebLogic下的项目部署。</li>\n<li>良好的文档阅读能力，能快速接入第三方应用。</li>\n</ol>\n<h3 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h3><h4 id=\"1-顺丰专送小程序-2017-09-2018-3\"><a href=\"#1-顺丰专送小程序-2017-09-2018-3\" class=\"headerlink\" title=\"1.顺丰专送小程序 2017.09 - 2018.3\"></a>1.顺丰专送小程序 2017.09 - 2018.3</h4><ul>\n<li>公司：深圳蛋壳创意科技</li>\n<li>架构：SpringBoot + Mybatis + JPA</li>\n<li>职能：可行性分析,功能需求开发,代码与数据库维护</li>\n<li>描述：顺丰专送的第一个微信端小程序，用于寄同城件(同城快递)和大网件(跨城快递)，<br>也可以给好友发送包裹礼物，好友填写接收地址后，寄件方下单即可，后取消大网件，<br>同城也可跨城配送，增加了余额支付和发票功能。</li>\n</ul>\n<h4 id=\"2-共享抽纸小程序-2018-1-2018-4\"><a href=\"#2-共享抽纸小程序-2018-1-2018-4\" class=\"headerlink\" title=\"2.共享抽纸小程序 2018.1 - 2018.4\"></a>2.共享抽纸小程序 2018.1 - 2018.4</h4><ul>\n<li>公司：深圳蛋壳创意科技</li>\n<li>架构：SpringBoot + Mybatis</li>\n<li>职能：可行性分析,开发周期估算，功能需求开发,代码与数据库维护</li>\n<li>描述：共享抽纸盒，在餐厅或其他装配该抽纸盒的地方扫描设备上的二维码进行登录小程序<br>进行抽纸功能，个人中心可使用手机号和微信快捷登录方式登录，可以在一个微信中登录2个不同的小程序账号，<br>其设备信息及相关功能需要与硬件对接。</li>\n</ul>\n<h4 id=\"3-联程出行APP-2016-5-2016-11\"><a href=\"#3-联程出行APP-2016-5-2016-11\" class=\"headerlink\" title=\"3. 联程出行APP 2016.5 - 2016.11\"></a>3. 联程出行APP 2016.5 - 2016.11</h4><ul>\n<li>公司：深圳蛋壳创意科技</li>\n<li>架构：Mybatis + Spring + SpringMVC + Redis + Mysql</li>\n<li>职能：可行性分析,开发周期估算，功能需求开发,代码与数据库维护</li>\n<li>描述：<ul>\n<li>Android APP, IOS APP，PC端（管理系统）   </li>\n<li>项目实现了电动汽车的在线分时租赁；</li>\n<li>用户：个人用户，集团用户，系统管理人员；</li>\n<li>APP功能：寻找周边车辆，我的订单，我的钱包，客服等</li>\n<li>总体技术：Mybatis + Spring + SpringMVC + Redis + Mysql</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h3><ol>\n<li>热爱软件开发事业，对IT领域的软件开发技术具有浓厚的兴趣。</li>\n<li>有很强的团队合作意识，不突显个人主义，能够快速融入新的工作环境。</li>\n<li>想在分布式和高并发方面得到提升。</li>\n</ol>\n","categories":[],"tags":[]},{"title":"分类","url":"https://feifaninternet.github.io/categories/index.html","content":"","categories":[],"tags":[]},{"title":"Xfan And Sweet Money Saving Plan","url":"https://feifaninternet.github.io/link/index.html","content":"<p>date: 2018-05-23 18:00:00</p>\n<h3 id=\"1-2018-6-10-The-Begin-Day\"><a href=\"#1-2018-6-10-The-Begin-Day\" class=\"headerlink\" title=\"1. 2018-6-10 (The Begin Day)\"></a>1. 2018-6-10 (The Begin Day)</h3><p>Xfan : 1200 RMB<br>Sweet : 500 RMB</p>\n<ul>\n<li>Xfan :</li>\n<li>Sweet :</li>\n</ul>\n<label style=\"color:red\"><strong>JUNE_SUM :</strong></label>\n\n<h3 id=\"2-2018-7-10\"><a href=\"#2-2018-7-10\" class=\"headerlink\" title=\"2. 2018-7-10\"></a>2. 2018-7-10</h3><p>Xfan:  RMB<br>Sweet:  RMB</p>\n<ul>\n<li>Xfan:</li>\n<li>Sweet:</li>\n</ul>\n<label style=\"color:red\"><strong>JULY_SUM :</strong></label>\n\n<h3 id=\"3-2018-8-10\"><a href=\"#3-2018-8-10\" class=\"headerlink\" title=\"3. 2018-8-10\"></a>3. 2018-8-10</h3><p>Xfan:  RMB<br>Sweet:  RMB</p>\n<ul>\n<li>Xfan:</li>\n<li>Sweet:</li>\n</ul>\n<label style=\"color:red\"><strong>AUGUST_SUM :</strong></label>\n\n<h3 id=\"4-2018-9-10\"><a href=\"#4-2018-9-10\" class=\"headerlink\" title=\"4. 2018-9-10\"></a>4. 2018-9-10</h3><p>Xfan:  RMB<br>Sweet:  RMB</p>\n<ul>\n<li>Xfan:</li>\n<li>Sweet:</li>\n</ul>\n<label style=\"color:red\"><strong>SEPTEMBER_SUM :</strong></label>\n\n<h3 id=\"5-2018-10-10\"><a href=\"#5-2018-10-10\" class=\"headerlink\" title=\"5. 2018-10-10\"></a>5. 2018-10-10</h3><p>Xfan:  RMB<br>Sweet:  RMB</p>\n<ul>\n<li>Xfan:</li>\n<li>Sweet:</li>\n</ul>\n<label style=\"color:red\"><strong>OCTOBER_SUM :</strong></label>\n\n<h3 id=\"6-2018-11-10\"><a href=\"#6-2018-11-10\" class=\"headerlink\" title=\"6. 2018-11-10\"></a>6. 2018-11-10</h3><p>Xfan:  RMB<br>Sweet:  RMB</p>\n<ul>\n<li>Xfan:</li>\n<li>Sweet:</li>\n</ul>\n<label style=\"color:red\"><strong>NOVEMBER_SUM :</strong></label>\n\n<h3 id=\"7-2018-12-10\"><a href=\"#7-2018-12-10\" class=\"headerlink\" title=\"7. 2018-12-10\"></a>7. 2018-12-10</h3><p>Xfan:  RMB<br>Sweet:  RMB</p>\n<ul>\n<li>Xfan:</li>\n<li>Sweet:</li>\n</ul>\n<label style=\"color:red\"><strong>DECEMBER_SUM :</strong></label>\n\n<h3 id=\"8-2018-1-10\"><a href=\"#8-2018-1-10\" class=\"headerlink\" title=\"8. 2018-1-10\"></a>8. 2018-1-10</h3><p>Xfan:  RMB<br>Sweet:  RMB</p>\n<ul>\n<li>Xfan:</li>\n<li>Sweet:</li>\n</ul>\n<label style=\"color:red\"><strong>JANUARY_SUM :</strong></label>\n\n<h3 id=\"9-2018-2-10\"><a href=\"#9-2018-2-10\" class=\"headerlink\" title=\"9. 2018-2-10\"></a>9. 2018-2-10</h3><p>Xfan:  RMB<br>Sweet:  RMB</p>\n<ul>\n<li>Xfan:</li>\n<li>Sweet:</li>\n</ul>\n<label style=\"color:red\"><strong>FEBRUARY_SUM :</strong></label>\n\n<h3 id=\"SUM-2018\"><a href=\"#SUM-2018\" class=\"headerlink\" title=\"* SUM(2018)\"></a>* SUM(2018)</h3><label style=\"color:red\"><strong>2018_XFAN_SUM :</strong></label><br><label style=\"color:red\"><strong>2018_SWEET_SUM :</strong></label><br><label style=\"color:red\"><strong>2018_SUM :</strong></label>","categories":[],"tags":[]},{"title":"","url":"https://feifaninternet.github.io/person/personal-style.css","content":"html.page-home {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: url('/picture/background.jpeg');\n  background-color: transparent;\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;\n\n  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n  /*background-blend-mode: screen;*/\n\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}","categories":[],"tags":[]},{"title":"project","url":"https://feifaninternet.github.io/project/index.html","content":"<p>project:</p>\n<ul>\n<li>type: personal<br>name: fexo<br>url: <a href=\"https://github.com/forsigner/fexo\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/fexo</a><br>intro: A minimalist design theme for hexo<h1 id=\"type-company\"><a href=\"#type-company\" class=\"headerlink\" title=\"- type: company\"></a>- type: company</h1><h1 id=\"name-Fexo\"><a href=\"#name-Fexo\" class=\"headerlink\" title=\"name: Fexo\"></a>name: Fexo</h1><h1 id=\"url-https-github-com-forsigner-fexo\"><a href=\"#url-https-github-com-forsigner-fexo\" class=\"headerlink\" title=\"url: https://github.com/forsigner/fexo\"></a>url: <a href=\"https://github.com/forsigner/fexo\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/fexo</a></h1><h1 id=\"intro-A-minimalist-design-theme-for-hexo\"><a href=\"#intro-A-minimalist-design-theme-for-hexo\" class=\"headerlink\" title=\"intro: A minimalist design theme for hexo\"></a>intro: A minimalist design theme for hexo</h1></li>\n<li>type: personal<br>name: beside<br>url: <a href=\"https://github.com/forsigner/beside\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/beside</a><br>intro: I need you beside me</li>\n<li>type: personal<br>name: web-fontmin<br>url: <a href=\"https://github.com/forsigner/web-fontmin\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/web-fontmin</a><br>intro: 字体子集化，在线提取你需要的字体</li>\n<li>type: personal<br>name: magic-check<br>url: <a href=\"https://github.com/forsigner/magic-check\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/magic-check</a><br>intro: Beautify Radio and Checkbox with pure CSS</li>\n<li>type: personal<br>name: nice-bar<br>url: <a href=\"https://github.com/forsigner/nice-bar\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/nice-bar</a><br>intro: A nice and lightweight scrollbar</li>\n<li>type: personal<br>name: angular-nice-bar<br>url: <a href=\"https://github.com/forsigner/angular-nice-bar\" target=\"_blank\" rel=\"noopener\">https://github.com/forsigner/angular-nice-bar</a><br>intro: A nice and lightweight scrollbar in Angular</li>\n</ul>\n","categories":[],"tags":[]},{"title":"search","url":"https://feifaninternet.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"https://feifaninternet.github.io/tags/index.html","content":"<hr>\n<p>title: tags<br>layout: tags</p>\n<h2 id=\"comments-false\"><a href=\"#comments-false\" class=\"headerlink\" title=\"comments: false\"></a>comments: false</h2>","categories":[],"tags":[]}]